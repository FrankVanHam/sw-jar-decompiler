_package user
$


_block
	sw:method_finder.auto_start? << _true
	
	_dynamic !source_file!
	write(!source_file!)

	_local (x, dir) << system.pathname_components(!source_file!)
	
	_local sw_core_dir << smallworld_product.products[:sw_core].directory
	smallworld_product.add_product(sw_core_dir+"\modules\sw_dev_tools")
	smallworld_product.add_product(dir)
	smallworld_product.add_product(dir+"\..\munit-SW525")
	sw_module_manager.load_module(:jar_decompiler)
	sw_module_manager.load_module(:jar_decompiler_test)
_endblock
$

#sw_module_manager.save_compiled_module(sw_module_manager.module(:decompile_target))

#deco:decompiler.new().decompile_jar_dir_to_dir("D:\SW526\core\sw_core\libs", "sw_core.*.jar", "c:\temp")

_block 
	simple_munit_gui.open()
_endblock
$

_method object.dp
	debug_print(_self)
_endmethod
$

_method object.p
	print(_self)
_endmethod
$

_package deco
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method decompiler.decompile_jar_dir_to_dir(p_search_dir, p_match, p_dir)
	_local ch << directory_channel.new(p_search_dir, p_match)
	_loop
		_local path << ch.get_full()
		_if path _is _unset _then _leave _endif

		_if path.matches?("*backup_manager_engine*") _then _continue _endif
		_if path.matches?("*backup_manager_plugin*") _then _continue _endif
		_if path.matches?("*case_engines*")          _then _continue _endif
		_if path.matches?("*conflict_dialog*")       _then _continue _endif
		_if path.matches?("*conflict_viewer_framework*")       _then _continue _endif
		write("Decompiling: ", path)
		_self.decompile_jar_to_dir(path, p_dir)
	_endloop
_endmethod
$
