_package user
$

#remex(:java_parser_test)

_pragma(classify_level=restricted, topic={jar_decompiler, test})
def_slotted_exemplar(:java_parser_test,
	{},
	:test_case)
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_package()

	_local s << deco:lexical_scanner.new("package magik.decompile_target;".read_stream())
	_local p << deco:java_parser.new(s)

	_local node << p.get()
	_self.assert_true(node.is_class_of?(deco:jpn_package), "should be package")
	_self.assert_equals("magik.decompile_target", node.name)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_import()

	_local s << deco:lexical_scanner.new("import magik.decompile_target;".read_stream())
	_local p << deco:java_parser.new(s)

	_local node << p.get()
	_self.assert_true(node.is_class_of?(deco:jpn_import), "should be import")
	_self.assert_equals("magik.decompile_target", node.name)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_method_invocation()
	##
	_local inp << write_string("obj.dothing()")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)

	_local node << p.parse_expression()

	_self.assert_true(node.is_class_of?(deco:jpn_method_invocation), "should be an invocation")
	_self.assert_equals("obj", node.sender.name)
	_self.assert_equals("dothing", node.name)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_negative_constant()
	##
	_local inp << write_string("-100")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)

	_local node << p.parse_expression()
	_self.assert_true(node.is_class_of?(deco:jpn_negated), "should be an negative")
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_self_method_invocation()
	##
	_local inp << write_string("dothing()")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)

	_local node << p.parse_expression()

	_self.assert_true(node.is_class_of?(deco:jpn_method_invocation), "should be an invocation")
	_self.assert_true(node.sender.is_class_of?(deco:jpn_this))
	_self.assert_equals("dothing", node.name)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_concat_method_invocation()
	##
	_local inp << write_string("obj.dothing().doanother()")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)

	_local node << p.parse_expression()
	_self.assert_true(node.is_class_of?(deco:jpn_method_invocation), "should be an invocation")
	_self.assert_equals("doanother", node.name)
	_self.assert_true(node.sender.is_class_of?(deco:jpn_method_invocation), "should be a nested invocation")
	_self.assert_equals("dothing", node.sender.name)

_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_concat_cast_method_invocation()
	##
	_local inp << write_string("(a).asAllResults();")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)

	_local node << p.parse_expression()
	_self.assert_true(node.is_class_of?(deco:jpn_method_invocation), "should be an invocation")
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_method_invocation_with_args()
	##
	_local inp << write_string("obj.dothing(x, y)")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)

	_local node << p.parse_expression()
	_self.assert_true(node.is_class_of?(deco:jpn_method_invocation), "should be an invocation")
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_method_invocation_with_method_handle_args()
	##
	_local inp << write_string("obj.dothing((MethodHandle)cfr_ldc_0() )")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)

	_local node << p.parse_expression()
	_self.assert_true(node.is_class_of?(deco:jpn_method_invocation), "should be an invocation")
	_self.assert_true(node.args[1].expression.is_class_of?(deco:jpn_method_invocation))
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_method_invocation_with_casted_args()
	##
	_local inp << write_string("obj.dothing((Object) x)")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	p.define_locals("x")

	_local node << p.parse_expression()
	_self.assert_true(node.is_class_of?(deco:jpn_method_invocation), "should be an invocation")
	_self.assert_true(node.args[1].expression.is_class_of?(deco:jpn_variable))
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_assignment()
	##
	_local inp << write_string("AType t = obj.dothing()")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)

	_local node << p.parse_statement()
	_self.assert_true(node.is_class_of?(deco:jpn_assignment), "should be an assignment")
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_array_type_assignment()
	##
	_local inp << write_string("AType[] t = obj.dothing()")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)

	_local node << p.parse_statement()
	_self.assert_true(node.is_class_of?(deco:jpn_assignment), "should be an assignment")
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_array_type_direct_assignment()
	##
	_local inp << write_string("AType[] t = new Object[2]")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)

	_local node << p.parse_statement()
	_self.assert_true(node.is_class_of?(deco:jpn_assignment), "should be an assignment")
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_array_type_direct_array_assignment()
	##
	_local inp << write_string("AType[] t = new Object[]{1}")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)

	_local node << p.parse_statement()
	_self.assert_true(node.is_class_of?(deco:jpn_assignment), "should be an assignment")
	_self.assert_equals(1,node.right.args.size)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_array_type_direct_array_assignment2()
	##
	_local inp << write_string("AType[] t = new Object[]{env[0]}")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	p.define_locals("env")
	
	_local node << p.parse_statement()
	_self.assert_true(node.is_class_of?(deco:jpn_assignment), "should be an assignment")
	_self.assert_equals(1,node.right.args.size)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_array_type_direct_array_assignment3()
	##
	_local inp << write_string("x = env[0]")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	p.define_locals("env")
	
	_local node << p.parse_statement()
	_self.assert_true(node.is_class_of?(deco:jpn_assignment), "should be an assignment")
	_self.assert_equals(1, node.right.args.size)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_new_array_with_array_values()
	## 
	_local inp << write_string("var5 = new Object[]{__env__[3], __env__[4]};")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	p.define_locals("var5", "__env__")
	
	_local node << p.parse_statement()
	_self.assert_true(node.is_class_of?(deco:jpn_assignment), "should be an assignment")
	_self.assert_equals(2, node.right.args.size)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_class()
	_local inp << write_string("public class deco_test_34 {", newline_char, "}")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)

	_local node << p.get()
	_self.assert_true(node.is_class_of?(deco:jpn_class), "should be class")
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_new()
	##
	_local inp << write_string("new aClass()")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)

	_local node << p.parse_expression()
	_self.assert_true(node.is_class_of?(deco:jpn_new), "should be new")
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_declaration()
	##
	_local inp << write_string("ResultTuple resultTuple;")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)

	_local node << p.parse_statement()
	_self.assert_true(node.is_declaration?, "should be declaration")
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_return()
	##
	_local inp << write_string("return avar;")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	p.define_locals("avar")

	_local node << p.parse_statement()
	_self.assert_true(node.is_class_of?(deco:jpn_return), "should be return")
	_self.assert_true(node.expression.is_class_of?(deco:jpn_variable, "should be returning a variable"))
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_return_empty_tuple()
	##
	_local inp << write_string("return ResultTuple.EMPTY_TUPLE;")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)

	_local node << p.parse_statement()
	_self.assert_true(node.is_class_of?(deco:jpn_return), "should be return")
	_self.assert_true(node.expression.is_class_of?(deco:jpn_dotted), "should be returning dotted")
_endmethod
$


_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_new_with_args()
	##
	_local inp << write_string("new aClass( obj, thing)")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)

	_local node << p.parse_expression()
	_self.assert_true(node.is_class_of?(deco:jpn_new), "should be new")
	_self.assert_equals(2, node.args.size)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_throw()
	##
	_local inp << write_string("throw x;")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)

	_local node << p.parse_statement()
	_self.assert_true(node.is_class_of?(deco:jpn_throw), "should be throw")
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_throw_new()
	##
	_local inp << write_string("throw new IllegalArgumentException(except);")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)

	_local node << p.parse_statement()
	_self.assert_true(node.is_class_of?(deco:jpn_throw), "should be throw")
	_self.assert_true(node.expression.is_class_of?(deco:jpn_new), "should be throwing a new")
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_class_annotation()
	##
	_local inp << write_string("@Override", newline_char,
				   "@SourceHash(value=888600578)", newline_char,
				   "@Debugger(method='MagikDebug')", newline_char,
				   "@CodeType(value='Subsidiary')", newline_char,
				   "public class a_class {}"
		      )
	inp << inp.substitute_character(%', %")

	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	_local node << p.get()

	_self.assert_true(node.is_class_of?(deco:jpn_class))
	_self.assert_equals(4,node.annotations.size)
	_self.assert_equals("Override", node.annotations[1].name)
	_self.assert_equals("888600578", node.annotations[2].value.string_value)
	_self.assert_equals("MagikDebug", node.annotations[3].property(:method).string_value)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_multi_value_annotation()
	##
	_local inp << write_string("@EnvVar(name='__dynamic_frame__', type=Object.class, start=21, end=74, index=0)", newline_char,
				   "public class a_class {}")
	inp << inp.substitute_character(%', %")

	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	_local node << p.get()

	_self.assert_true(node.is_class_of?(deco:jpn_class))
	_self.assert_equals(1,node.annotations.size)
	_local anno << node.annotations[1]
	_self.assert_equals("__dynamic_frame__", anno.property(:name).string_value)
_endmethod 
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_nested_annotation()
	##
	_local inp << write_string("@EnvVars(value={@EnvVar(name='__dynamic_frame__', type=Object.class, start=21, end=74, index=0), @EnvVar(name='a', type=Object.class, start=29, end=74, index=1), @EnvVar(name='_self', type=Object.class, start=13, end=74, index=2)})", newline_char,
				   "public class a_class {}")
	inp << inp.substitute_character(%', %")

	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	_local node << p.get()

	_self.assert_true(node.is_class_of?(deco:jpn_class))
	_self.assert_equals(1,node.annotations.size)
	_local anno << node.annotations[1]
	_self.assert_true(anno.value[1].is_class_of?(deco:jpn_annotation))
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_class_with_implements()
	_local inp << write_string("public class a_class ", newline_char,
				   "implements ExecutableMagik {",
				   "}")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)

	_local node << p.get()
	_self.assert_true(node.is_class_of?(deco:jpn_class), "should be class")
	_self.assert_equals("a_class", node.name)
	_self.assert_equals("ExecutableMagik", node.implementation)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_class_with_error()
	_local inp << write_string("public class a_class_name")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)

	_try _with e
		_local node << p.get()

		_self.assert_true(_true, "Should have thrown an error")
	_when deco_expected_separator
		_self.assert_equals(1, e[:line], "Line should be 1")
		_self.assert_equals(26, e[:column], "Column should be 26")
	_endtry
_endmethod
$



_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_method_with_args()
	_local inp << write_string(
			      "public static Object deco_test__test(Object _self) {",newline_char,
			      "}",newline_char)
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)

	_local m << p.parse_method("deco_test")
	_self.assert_equals(1, m.parameters.size)
_endmethod
$


_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_method_definition_without_args()
	##
	_local inp << write_string(
			      "public static Object deco_test__test1() {", newline_char,
			      "}")
	inp << inp.substitute_character(%', %")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)

	_local m << p.parse_method("deco_test")
	_self.assert_true(m.is_class_of?(deco:jpn_method), "Should be an body")
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_method_definition_with_question()
	##
	_local inp << write_string(
			      "public static Object deco_test__writable?_() {", newline_char,
			      "}")
	inp << inp.substitute_character(%', %")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)

	_local m << p.parse_method("deco_test")
	_self.assert_true(m.is_class_of?(deco:jpn_method), "Should be an body")
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_method_definition_with_exclamation()
	##
	_local inp << write_string(
			      "public static Object deco_test__int!writable() {", newline_char,
			      "}")
	inp << inp.substitute_character(%', %")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)

	_local m << p.parse_method("deco_test")
	_self.assert_true(m.is_class_of?(deco:jpn_method), "Should be an body")
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_casting()
	_local inp << write_string(
			      "(Object)a_var;")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	p.define_locals("a_var")

	_local c << p.parse_statement()
	_self.assert_true(c.is_class_of?(deco:jpn_cast), "should be cast")
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_casting_questionmark()
	_local inp << write_string(
			      "(Class<?>)a_var;")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	p.define_locals("a_var")

	_local c << p.parse_statement()
	_self.assert_true(c.is_class_of?(deco:jpn_cast), "should be cast")
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_double_casting()
	_local inp << write_string(
			      "(Object)((AType)a_var);")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)

	_local c << p.parse_statement()
	_self.assert_true(c.is_class_of?(deco:jpn_cast), "should be cast")
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_double_casting_method()
	_local inp << write_string(
			      "(Object)((AType)a_var.do());")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)

	_local c << p.parse_statement()
	_self.assert_true(c.is_class_of?(deco:jpn_cast), "should be cast")
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_array_casting()
	_local inp << write_string(
			      "(Object[])a_var")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)

	_local c << p.parse_expression()
	_self.assert_true(c.is_class_of?(deco:jpn_cast), "should be cast")
	_self.assert_true(c.type.array?, "should be an array type")
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_keyword_casting()
	_local inp << write_string(
			      "(int)a_var")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)

	_local c << p.parse_expression()
	_self.assert_true(c.is_class_of?(deco:jpn_cast), "should be cast")
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_keyword_array_casting()
	_local inp << write_string(
			      "(int[])a_var")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)

	_local c << p.parse_expression()
	_self.assert_true(c.is_class_of?(deco:jpn_cast), "should be cast")
	_self.assert_true(c.type.array?, "should be an array type")
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_if()
	##
	_local inp << write_string("if (thing.value()) { this.do_if(); };")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)

	_local m << p.parse_statement()
	_self.assert_true(m.is_class_of?(deco:jpn_if), "should be an if statement")
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_if_else()
	##
	_local inp << write_string("if (thing.value()) { this.do_if(); } else { thing.do_else();};")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)

	_local m << p.parse_statement()
	_self.assert_true(m.is_class_of?(deco:jpn_if), "should be an if statement")
	_self.assert_true(m.else _isnt _unset , "should be an else statement")
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_try_catch()
	_local inp << write_string(
			      "	try {", newline_char,
			      "            _self.in_try()", newline_char,
			      "        }", newline_char,
			      "        catch (Throwable throwable) {", newline_char,
			      "            _self.in_catch();", newline_char,
			      "        }")

	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	_local m << p.parse_statement()

	_self.assert_true(m.is_class_of?(deco:jpn_try), "should be an try")
	_self.assert_equals(1, m.exceptions.size, "should be one exceptions")
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_try_catch2()
	_local inp << write_string(
			      "	try {", newline_char,
			      "            _self.in_try()", newline_char,
			      "        }", newline_char,
			      "        catch (Thrower.Throw throw_) {", newline_char,
			      "            _self.in_catch();", newline_char,
			      "        }")

	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	_local m << p.parse_statement()

	_self.assert_true(m.is_class_of?(deco:jpn_try), "should be an try")
	_self.assert_equals(1, m.exceptions.size, "should be one exceptions")
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_try_catches()
	_local inp << write_string(
			      "	try {", newline_char,
			      "            _self.in_try()", newline_char,
			      "        }", newline_char,
			      "        catch (NoSuchMethodException | IllegalAccessException throwable) {", newline_char,
			      "            _self.in_catch();", newline_char,
			      "        }")

	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	_local m << p.parse_statement()

	_self.assert_true(m.is_class_of?(deco:jpn_try), "should be an try")
	_self.assert_equals(m.exceptions.size, 2)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_xxx()
	_local inp << write_string("resultTuple = ResultTuple.EMPTY_TUPLE;")
	inp << inp.substitute_character(%', %")

	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	_local m << p.parse_statement()
	#debug_print(m.right)
	#_self.assert_true(m.right.is_class_of?(deco:jpn_method_invocation), "should be a method invoc")
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_local_execution()
	_local inp << write_string("resultTuple.pop();")
	inp << inp.substitute_character(%', %")

	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	p.define_locals("resultTuple")
	_local m << p.parse_statement()
	_self.assert_true(m.is_class_of?(deco:jpn_method_invocation), "should be a method")
	_self.assert_true(m.sender.is_class_of?(deco:jpn_variable), "should be a local variable method")
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_void_type()
	##
	_local inp << write_string("void obj;")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	_local m << p.parse_statement()
	
	_self.assert_true(m.is_declaration?, "should be a local declaration")
_endmethod
$


_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_assign_typed_local_with_local()
	_local inp << write_string("Object obj = a;")
	inp << inp.substitute_character(%', %")

	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	p.define_locals("a")
	_local m << p.parse_statement()
	
	_self.assert_true(m.is_class_of?(deco:jpn_assignment), "should be a local assignment")
	_self.assert_true(m.right.is_class_of?(deco:jpn_variable), "should be a variable")
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_assign_local_with_local()
	_local inp << write_string("obj = a;")
	inp << inp.substitute_character(%', %")

	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	p.define_locals("obj", "a")
	_local m << p.parse_statement()
	
	_self.assert_true(m.is_class_of?(deco:jpn_assignment), "should be a local assignment")
	_self.assert_true(m.left.is_class_of?(deco:jpn_variable), "left should be a variable")
	_self.assert_true(m.right.is_class_of?(deco:jpn_variable), "right should be a variable")
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_assign_local_with_bool()
	_local inp << write_string("obj = true;")
	inp << inp.substitute_character(%', %")

	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	p.define_locals("obj")
	_local m << p.parse_statement()
	
	_self.assert_true(m.is_class_of?(deco:jpn_assignment), "should be a local assignment")
	_self.assert_true(m.right.is_class_of?(deco:jpn_constant), "should be constant")
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_block()
	_local inp << write_string("block0: {}")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	
	_local m << p.parse_statement()
	_self.assert_true(m.is_class_of?(deco:jpn_block), "should be a block")
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_break()
	_local inp << write_string("break block0")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	
	_local m << p.parse_statement()
	_self.assert_true(m.is_class_of?(deco:jpn_break), "should be a break")
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_loop()
	_local inp << write_string("while (true) {};")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	
	_local m << p.parse_statement()
	_self.assert_true(m.is_class_of?(deco:jpn_loop), "should be a loop")
	_self.assert_true(m.tag _is _unset , "should have no tag")
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_loop_label()
	_local inp << write_string("while (true) lbl-1000: {};")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	
	_local m << p.parse_statement()
	_self.assert_true(m.is_class_of?(deco:jpn_loop), "should be a loop")
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_loop_tag()
	_local inp << write_string("block0: while (true) {};")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	
	_local m << p.parse_statement()
	_self.assert_true(m.is_class_of?(deco:jpn_loop), "should be a loop")
	_self.assert_true(m.tag = "block0" , "should have tag")
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_loop_while()
	_local inp << write_string("do {} while (!self.test());")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	
	_local m << p.parse_statement()
	_self.assert_true(m.is_class_of?(deco:jpn_loop), "should be a loop")
	_self.assert_true(m.while _isnt _unset, "should have while expression")
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_if_break()
	_local inp << write_string("if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate('test?', (Object)_self))) break;")
	inp << inp.substitute_character(%', %")
	
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	p.define_locals("_self")
	
	_local m << p.parse_statement()
	_self.assert_true(m.is_class_of?(deco:jpn_if), "should be a branch")
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_conditional_operator()
	_local inp << write_string("CallSite n_percent_str = a ? b : c;")
	inp << inp.substitute_character(%', %")
	
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	p.define_locals("a", "b", "c")
	
	_local m << p.parse_statement()
	_self.assert_true(m.is_class_of?(deco:jpn_assignment), "should be an assignment")
	_self.assert_equals("a", m.right.condition.name)
	_self.assert_equals("b", m.right.then.statements[1].expression.name)
	_self.assert_equals("c", m.right.else.statements[1].expression.name)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_conditional_nested_operator()
	_local inp << write_string("CallSite val = a ? (b ? ba:bb) : (c ? ca:cb);")
	inp << inp.substitute_character(%', %")
	
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	p.define_locals("a", "b", "ba", "bb", "c", "ca", "cb")
	
	_local m << p.parse_statement()

	_self.assert_true(m.is_class_of?(deco:jpn_assignment), "should be an assignment")
	_self.assert_true(m.right.is_class_of?(deco:jpn_if), "right should be an if")
	_self.assert_equals("a", m.right.condition.name)
	_self.assert_true(m.right.then.statements[1].expression.is_class_of?(deco:jpn_parenthesis), "then is ()" )
	_local right_left << m.right.then.statements[1].expression.expression
	_self.assert_true(right_left.is_class_of?(deco:jpn_if), "right should be an if")
	_self.assert_equals("b", right_left.condition.name)
	_self.assert_equals("ba", right_left.then.statements[1].expression.name)
	_self.assert_equals("bb", right_left.else.statements[1].expression.name)

	_local right_right << m.right.else.statements[1].expression.expression
	_self.assert_true(right_right.is_class_of?(deco:jpn_if), "right should be an if")
	_self.assert_equals("c", right_right.condition.name)
	_self.assert_equals("ca", right_right.then.statements[1].expression.name)
	_self.assert_equals("cb", right_right.else.statements[1].expression.name)
_endmethod
$



_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_conditional_operator1()
	_local inp << write_string("CallSite n_percent_str = MagikObjectUtils.should_be_boolean(BinaryDispatcher.bootstrap('\\l', n_percent, Integer.valueOf(100))) ? BinaryDispatcher.bootstrap('+', ConstantBuilder.stringBootstrap('string', ' '), Invoker.bootstrap('write_string', n_percent)) : Invoker.bootstrap('write_string', n_percent);")
	inp << inp.substitute_character(%', %")
	
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	
	_local m << p.parse_statement()
	_self.assert_true(m.is_class_of?(deco:jpn_assignment), "should be an assignment")
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_conditional()
	##
	_local inp << write_string("return the_soc != null ? (ResultTuple)(x) : null;")
	#inp << write_string("return the_soc != null ? x : null;")
	inp << inp.substitute_character(%', %")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	p.define_locals("x")
	_local jpn_exp << p.parse_statement()
	_self.assert_true(jpn_exp.is_class_of?(deco:jpn_return), "should be a return")

	jpn_exp.expression.dp
	_self.assert_true(jpn_exp.expression.is_class_of?(deco:jpn_if), "should be an if")
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_conditional2()
	##
	_local inp << write_string("return the_soc != null ? x : null;")
	inp << inp.substitute_character(%', %")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	p.define_locals("x")
	_local jpn_exp << p.parse_statement()
	_self.assert_true(jpn_exp.is_class_of?(deco:jpn_return), "should be a return")
	
	_self.assert_true(jpn_exp.expression.is_class_of?(deco:jpn_if), "should be an if")
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_comment()
	##
	_local inp << write_string("/* The code below will print the words Hello World" + newline_char,
				   "to the screen, and it is amazing */")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	
	_local jpn_exp << p.parse_statement()
	_self.assert_unset(jpn_exp, "Comment gives no result")
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_comment2()
	##
	_local inp << write_string("// ** MonitorExit[v0] (shouldn't be in output)" + newline_char,
				   "CallSite callSite2 = callSite;")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	
	_local jpn_exp << p.parse_statement()
	_self.assert_true(jpn_exp.is_class_of?(deco:jpn_assignment), "Comment should be skipped")
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_or_if()
	##
	_local inp << write_string("if (a || b) { this.do_if(); };")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	p.define_locals("a", "b")

	_local m << p.parse_statement()
	_self.assert_true(m.is_class_of?(deco:jpn_if), "should be an if statement")
	_self.assert_true(m.condition.is_class_of?(deco:jpn_operation), "should be an if operation")
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_if_and_assign()
	##
	_local inp << write_string("if (a || MagikObjectUtils.isnt(callSite = b != c ? d : e)) {} ;")
	inp << inp.substitute_character(%', %")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	p.define_locals("callSite", "a", "b", "c", "d", "e")

	_local m << p.parse_statement()
#	_self.assert_true(m.is_class_of?(deco:jpn_if), "should be an if statement")
#	_self.assert_true(m.condition.is_class_of?(deco:jpn_operation), "should be an if operation")
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_if_and_assign1()
	##
	_local inp << write_string("if (a || MagikObjectUtils.isnt(callSite = b != (c ? d : e))) {} ;")
	inp << inp.substitute_character(%', %")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	p.define_locals("callSite", "a", "b", "c", "d", "e")

	_local m << p.parse_statement()
#	_self.assert_true(m.is_class_of?(deco:jpn_if), "should be an if statement")
#	_self.assert_true(m.condition.is_class_of?(deco:jpn_operation), "should be an if operation")
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method java_parser_test.test_if_and_assign2()
	##
	_local inp << write_string("if (a || MagikObjectUtils.isnt(callSite = (b != (c ? d : e)))) {} ;")
	inp << inp.substitute_character(%', %")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	p.define_locals("callSite", "a", "b", "c", "d", "e")

	_local m << p.parse_statement()
#	_self.assert_true(m.is_class_of?(deco:jpn_if), "should be an if statement")
#	_self.assert_true(m.condition.is_class_of?(deco:jpn_operation), "should be an if operation")
_endmethod
$



