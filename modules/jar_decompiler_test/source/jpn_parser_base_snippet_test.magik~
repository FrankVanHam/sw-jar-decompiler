_package user
$

#remex(:jpn_parser_base_snippet_test)

_pragma(classify_level=restricted, topic={jar_decompiler, test})
def_slotted_exemplar(:jpn_parser_base_snippet_test,
	{
		{:before, _unset},
		{:after, _unset}
	},
	:test_case)
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
jpn_parser_base_snippet_test.define_shared_constant(:filename, "no.txt", :private)
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method jpn_parser_base_snippet_test.new(p_name, p_before, p_after)
	>> _clone.init(p_name, p_before, p_after)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_private _method jpn_parser_base_snippet_test.init(p_name, p_before, p_after)
	##
	.before << p_before
	.after << p_after
	>> _super.init(p_name)
_endmethod
$

_pragma(classify_level=advanced,topic=MUnit)
_method jpn_parser_base_snippet_test.infrastructure?
	## Return false for all runnable children tests of test case.
	>> _self _is jpn_parser_base_snippet_test
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method jpn_parser_base_snippet_test.suite( _optional a_name, _gather suite_args)
	##
	_local a_name << a_name.default( _self.class_name )
	_local suite << test_suite.new( _unset , a_name, _scatter suite_args )
	
	_local snippet << deco_snippet.new(_self.filename)
	_for i_name, i_before, i_after _over snippet.snippets()
	_loop 
		suite.add_test( _self.exemplar.new(write_string("Test ", i_name).as_symbol(), i_before, i_after) )
	_endloop 
	>> suite
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_abstract _method jpn_parser_base_snippet_test.run_test()
	## 
#	_local s << deco:lexical_scanner.new(.before.read_stream())
#	_local p << deco:java_parser.new(s)
#	_local jpn_meth << p.parse_method()
#
#	_local jp << deco:jpn_parser.new()
#	_local dcn_node << jp.parse_method("deco_test", jpn_meth)
#	dcn_node.bind_names("deco_test", "test()")
#	
#	_local out_ind << indentation_stream.new(out << internal_text_output_stream.new())
#	dcn_node.decode_on(out_ind)
#	_self.assert_equals_execution_strings(.after, out.string)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method jpn_parser_base_snippet_test.assert_equals_execution_strings(p_goal, p_given)
	##
	_local goal << p_goal.substitute_string(space_char,"").
		       substitute_string(newline_char,"").
		       substitute_string(tab_char,"")
	_local given << p_given.substitute_string(space_char,"").
			substitute_string(newline_char,"").
		       substitute_string(tab_char,"")
	_if goal<>given
	_then
		write(write_string("Strings are not equal. Goal:", newline_char,
					p_goal, newline_char,
					"Given:", newline_char,
					p_given))
		_self.fail("Strings are not equal")

		write(goal)
		write(given)
	_endif 
_endmethod
$
