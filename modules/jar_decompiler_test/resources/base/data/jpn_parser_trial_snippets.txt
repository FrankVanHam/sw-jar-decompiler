## jpn_3_3_3_no_cnd_try_combinations
package magik.jar_decompiler_lp.decompile_target;

import com.gesmallworld.magik.commons.runtime.annotations.CodeType;
import com.gesmallworld.magik.commons.runtime.annotations.Debugger;
import com.gesmallworld.magik.language.ResultTuple;
import com.gesmallworld.magik.language.SourceHash;
import com.gesmallworld.magik.language.invokers.GlobalAccessor;
import com.gesmallworld.magik.language.invokers.Invoker;
import com.gesmallworld.magik.language.invokers.ProcInvoker;
import com.gesmallworld.magik.language.utils.MagikObjectUtils;
import java.lang.invoke.CallSite;

@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_4381 {
    @SourceHash(value=-916776549)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object deco_test__test_andif(Object _self) {
        block1: {
            CallSite callSite = Invoker.bootstrapPrivate("test1", (Object)_self);
            if (MagikObjectUtils.should_be_boolean(callSite)) {
                callSite = Invoker.bootstrapPrivate("test2", (Object)_self);
            }
            if (!MagikObjectUtils.should_be_boolean(callSite)) break block1;
            ProcInvoker.naturalBootstrap("()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "show"), (Object)1);
        }
        return ResultTuple.EMPTY_TUPLE;
    }

    @SourceHash(value=-1096226313)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object deco_test__test_andif_else(Object _self) {
        CallSite callSite = Invoker.bootstrapPrivate("test1", (Object)_self);
        if (MagikObjectUtils.should_be_boolean(callSite)) {
            callSite = Invoker.bootstrapPrivate("test2", (Object)_self);
        }
        if (MagikObjectUtils.should_be_boolean(callSite)) {
            ProcInvoker.naturalBootstrap("()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "show"), (Object)1);
        } else {
            ProcInvoker.naturalBootstrap("()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "show"), (Object)2);
        }
        return ResultTuple.EMPTY_TUPLE;
    }

    @SourceHash(value=-157022783)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object deco_test__test_andif_andif(Object _self) {
        block2: {
            CallSite callSite;
            CallSite callSite2 = Invoker.bootstrapPrivate("test1", (Object)_self);
            if (MagikObjectUtils.should_be_boolean(callSite2)) {
                callSite2 = callSite = Invoker.bootstrapPrivate("test2", (Object)_self);
            }
            if (MagikObjectUtils.should_be_boolean(callSite2)) {
                callSite = Invoker.bootstrapPrivate("test3", (Object)_self);
            }
            if (!MagikObjectUtils.should_be_boolean(callSite)) break block2;
            ProcInvoker.naturalBootstrap("()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "show"), (Object)1);
        }
        return ResultTuple.EMPTY_TUPLE;
    }

    @SourceHash(value=-791582049)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object deco_test__test_orif(Object _self) {
        block1: {
            CallSite callSite = Invoker.bootstrapPrivate("test1", (Object)_self);
            if (!MagikObjectUtils.should_be_boolean(callSite)) {
                callSite = Invoker.bootstrapPrivate("test2", (Object)_self);
            }
            if (!MagikObjectUtils.should_be_boolean(callSite)) break block1;
            ProcInvoker.naturalBootstrap("()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "show"), (Object)1);
        }
        return ResultTuple.EMPTY_TUPLE;
    }

    @SourceHash(value=-1562743613)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object deco_test__test_orif_orif(Object _self) {
        block2: {
            CallSite callSite;
            CallSite callSite2 = Invoker.bootstrapPrivate("test1", (Object)_self);
            if (!MagikObjectUtils.should_be_boolean(callSite2)) {
                callSite2 = callSite = Invoker.bootstrapPrivate("test2", (Object)_self);
            }
            if (!MagikObjectUtils.should_be_boolean(callSite2)) {
                callSite = Invoker.bootstrapPrivate("test3", (Object)_self);
            }
            if (!MagikObjectUtils.should_be_boolean(callSite)) break block2;
            ProcInvoker.naturalBootstrap("()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "show"), (Object)1);
        }
        return ResultTuple.EMPTY_TUPLE;
    }

    @SourceHash(value=1290779935)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object deco_test__test_andif_orif1(Object _self) {
        block2: {
            CallSite callSite;
            CallSite callSite2 = Invoker.bootstrapPrivate("test1", (Object)_self);
            if (MagikObjectUtils.should_be_boolean(callSite2)) {
                callSite2 = callSite = Invoker.bootstrapPrivate("test2", (Object)_self);
            }
            if (!MagikObjectUtils.should_be_boolean(callSite2)) {
                callSite = Invoker.bootstrapPrivate("test3", (Object)_self);
            }
            if (!MagikObjectUtils.should_be_boolean(callSite)) break block2;
            ProcInvoker.naturalBootstrap("()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "show"), (Object)1);
        }
        return ResultTuple.EMPTY_TUPLE;
    }

    @SourceHash(value=-617319128)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object deco_test__test_andif_orif2(Object _self) {
        block1: {
            CallSite callSite = Invoker.bootstrapPrivate("test1", (Object)_self);
            if (MagikObjectUtils.should_be_boolean(callSite) && !MagikObjectUtils.should_be_boolean(callSite = Invoker.bootstrapPrivate("test2", (Object)_self))) {
                callSite = Invoker.bootstrapPrivate("test3", (Object)_self);
            }
            if (!MagikObjectUtils.should_be_boolean(callSite)) break block1;
            ProcInvoker.naturalBootstrap("()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "show"), (Object)1);
        }
        return ResultTuple.EMPTY_TUPLE;
    }
}

/*
 * Decompiled with CFR 0.151-SNAPSHOT (${git.commit.id.abbrev}).
 */
package magik.jar_decompiler_lp.decompile_target;

import com.gesmallworld.magik.commons.runtime.annotations.CodeType;
import com.gesmallworld.magik.commons.runtime.annotations.Debugger;
import com.gesmallworld.magik.language.invokers.ConstantBuilder;
import com.gesmallworld.magik.language.invokers.DynamicAccessor;
import com.gesmallworld.magik.language.invokers.GlobalAccessor;
import com.gesmallworld.magik.language.invokers.ProcInvoker;
import com.gesmallworld.magik.language.invokers.TupleBuilder;
import com.gesmallworld.magik.language.invokers.VectorBuilder;
import com.gesmallworld.magik.language.utils.ExecutableMagik;
import com.gesmallworld.magik.language.utils.MagikObjectUtils;
import magik.jar_decompiler_lp.decompile_target.deco_test_4381;

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_4380
implements ExecutableMagik {
    @Debugger(value="MagikDebug")
    @CodeType(value="EmptyConstructor")
    public deco_test_4380() {
    }

    @Override
    @Debugger(value="MagikDebug")
    @CodeType(value="TopLevel")
    public Object execute() {
        //MagikObjectUtils.createMethod("deco_test", "test_andif()", deco_test_4381.class, "deco_test__test_andif", 1, 1);
	//MagikObjectUtils.createMethod("deco_test", "test_andif_else()", deco_test_4381.class, "deco_test__test_andif_else", 1, 1);
        //MagikObjectUtils.createMethod("deco_test", "test_andif_andif()", deco_test_4381.class, "deco_test__test_andif_andif", 1, 1);
        //MagikObjectUtils.createMethod("deco_test", "test_orif()", deco_test_4381.class, "deco_test__test_orif", 1, 1);
        //MagikObjectUtils.createMethod("deco_test", "test_orif_orif()", deco_test_4381.class, "deco_test__test_orif_orif", 1, 1);
        //MagikObjectUtils.createMethod("deco_test", "test_andif_orif1()", deco_test_4381.class, "deco_test__test_andif_orif1", 1, 1);
        return TupleBuilder.bootstrap("tb", MagikObjectUtils.createMethod("deco_test", "test_andif_orif2()", deco_test_4381.class, "deco_test__test_andif_orif2", 1, 1));
    }

    @Override
    public void preload() {
    }
}
#########
#########
