## jpn_method_definition_test_no_args
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_3458 {
    @CodeType(value="Method")
    public static Object deco_test__test_no_args(Object _self) {
        return ResultTuple.EMPTY_TUPLE;
    }
}

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "test_no_args()", deco_test_3458.class, "deco_test__test_no_args", 1, 1);
    }
}
###########
_method deco_test.test_no_args() 
    _return _unset
_endmethod
$
###########
## jpn_method_definition_test_no_parenthesis
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_3458 {
    @CodeType(value="Method")
    public static Object deco_test__test_no_parenthesis_(Object _self) {
        return ResultTuple.EMPTY_TUPLE;
    }
}

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "test_no_parenthesis", deco_test_3458.class, "deco_test__test_no_parenthesis_", 1, 1);
    }
}
###########
_method deco_test.test_no_parenthesis
    _return _unset
_endmethod
$
###########
## jpn_method_definition_test_args
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_3458 {
    @CodeType(value="Method")
    public static Object deco_test__test_args(Object _self, Object a, Object b) {
        return ResultTuple.EMPTY_TUPLE;
    }
}

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "test_args()", deco_test_3458.class, "deco_test__test_args", 3, 3);
    }
}
###########
_method deco_test.test_args(a, b)
    _return _unset
_endmethod
$
###########
## jpn_method_definition_test_args_asign(a,b)<<
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_3458 {
    @CodeType(value="Method")
    public static Object deco_test__test_args_asign()\l\l_(Object _self, Object c, Object a, Object b) {
        return ResultTuple.EMPTY_TUPLE;
    }
}

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "test_args_asign()<<", deco_test_3458.class, "deco_test__test_args_asign()\\l\\l_", 4, 4);
    }
}
###########
_method deco_test.test_args_asign(a, b)<<c
    _return _unset
_endmethod
$
###########
## jpn_method_definition_test_optional_args
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_3458 {
    @CodeType(value="Method")
    public static Object deco_test__test_optional_args(Object _self, Object a, Object b, Object c) {
        return ResultTuple.EMPTY_TUPLE;
    }
}

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "test_optional_args()", deco_test_3458.class, "deco_test__test_optional_args", 4, 2);
    }
}
###########
_method deco_test.test_optional_args(a, _optional b, c)
    _return _unset
_endmethod
$
###########
## jpn_method_definition_test_gather_args
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_3458 {
    @CodeType(value="Method")
    public static Object deco_test__test_gather_args(Object _self, Object a, Object b, Object c, Object ... extras) {
        return ResultTuple.EMPTY_TUPLE;
    }
}

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "test_gather_args()", deco_test_3458.class, "deco_test__test_gather_args", 5, 2);
    }
}
###########
_method deco_test.test_gather_args(a, _optional b, c, _gather extras)
    _return _unset
_endmethod
$
###########
## jpn_method_definition_[]
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_3458 {
    @CodeType(value="Method")
    public static Object deco_test__\b]_(Object _self, Object a) {
        return ResultTuple.EMPTY_TUPLE;
    }
}

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "[]", deco_test_3458.class, "deco_test__\\b]_", 2, 2);
    }
}
###########
_method deco_test[a]
    _return _unset
_endmethod
$
###########
## jpn_method_definition_[]<<
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_3458 {
    @CodeType(value="Method")
    public static Object deco_test__\b]\l\l_(Object _self, Object b, Object a) {
        return ResultTuple.EMPTY_TUPLE;
    }
}

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "[]<<", deco_test_3458.class, "deco_test__\\b]\\l\\l_", 3, 3);
    }
}
###########
_method deco_test[a]<< b
    _return _unset
_endmethod
$
###########
## jpn_method_definition_boot^<<
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_3458 {
    @CodeType(value="Method")
    public static Object deco_test__test_boot_becomes^\l\l_(Object _self, Object a) {
        return ResultTuple.EMPTY_TUPLE;
    }
}

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "test_boot_becomes^<<", deco_test_3458.class, "deco_test__test_boot_becomes^\\l\\l_", 2, 2);
    }
}
###########
_method deco_test.test_boot_becomes^<< a
	_return _unset
_endmethod
$
###########
## jpn_method_definition_boot()^<<
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_3458 {
    @CodeType(value="Method")
    public static Object deco_test__test_boot_par()^\l\l_(Object _self, Object a) {
        return ResultTuple.EMPTY_TUPLE;
    }
}

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "test_boot_par()^<<", deco_test_3458.class, "deco_test__test_boot_par()^\\l\\l_", 2, 2);
    }
}
###########
_method deco_test.test_boot_par()^<< a
	_return _unset
_endmethod
$
###########
## jpn_method_definition_boot[]^<<
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_3458 {
    @CodeType(value="Method")
    public static Object deco_test__\b]^\l\l_(Object _self, Object b, Object a) {
        return ResultTuple.EMPTY_TUPLE;
    }
}

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "[]^<<", deco_test_3458.class, "deco_test__\\b]^\\l\\l_", 3, 3);
    }
}
###########
_method deco_test[a]^<< b
	_return _unset
_endmethod
$
###########
## jpn_method_definition_private
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_3458 {
    @CodeType(value="Method")
    public static Object deco_test__private(Object _self) {
        return ResultTuple.EMPTY_TUPLE;
    }
}

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "private()", deco_test_3458.class, "deco_test__private", 1, 1, false, false, true, 0);
    }
}
###########
_private _method deco_test.private() 
    _return _unset
_endmethod
$
###########
## jpn_method_definition_abstract
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_3458 {
    @CodeType(value="Method")
    public static Object deco_test__abstract(Object _self) {
        return ResultTuple.EMPTY_TUPLE;
    }
}

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "abstract()", deco_test_3458.class, "deco_test__abstract", 1, 1, false, true, false, 0);
    }
}
###########
_abstract _method deco_test.abstract() 
    _return _unset
_endmethod
$
###########
## jpn[,]
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_40399 {
    @SourceHash(value=877752802)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object deco_test__\b,]_(Object _self, Object x, Object y) {
        return (ResultTuple)((Object)Invoker.tupleBootstrap("\\b,]", (Object)Invoker.bootstrapPrivate("$slot_get_entries()", (Object)_self), (Object)x, (Object)y));
    }
}

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_40398
implements ExecutableMagik {
    @Debugger(value="MagikDebug")
    @CodeType(value="EmptyConstructor")
    public deco_test_40398() {
    }

    @Override
    @Debugger(value="MagikDebug")
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "[,]", deco_test_40399.class, "deco_test__\\b,]_", 3, 3);
    }

    @Override
    public void preload() {
    }
}
##########
_method deco_test[x, y]
	_return .entries[x, y]
_endmethod
$
##########
## jpn[,]<<
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_40399 {
    @SourceHash(value=-846893568)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object deco_test__\b,]\l\l_(Object _self, Object value, Object x, Object y) {
        Object object = value;
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrap("\\b,]\\l\\l", (Object)Invoker.bootstrapPrivate("$slot_get_entries()", (Object)_self), (Object)object, (Object)x, (Object)y));
        return ResultTuple.EMPTY_TUPLE;
    }
}

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_40398
implements ExecutableMagik {
    @Debugger(value="MagikDebug")
    @CodeType(value="EmptyConstructor")
    public deco_test_40398() {
    }

    @Override
    @Debugger(value="MagikDebug")
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "[,]<<", deco_test_40399.class, "deco_test__\\b,]\\l\\l_", 4, 4);
    }

    @Override
    public void preload() {
    }
}
#########
_method deco_test[x, y]<< value
	.entries[x, y] << (object << value)
	_return _unset
_endmethod
$
#########
## jpn[,]^<<
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_40399 {
    @SourceHash(value=-846893568)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object deco_test__\b,]^\l\l_(Object _self, Object value, Object x, Object y) {
        Object object = value;
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrap("\\b,]^\\l\\l", (Object)Invoker.bootstrapPrivate("$slot_get_entries()", (Object)_self), (Object)object, (Object)x, (Object)y));
        return ResultTuple.EMPTY_TUPLE;
    }
}

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_40398
implements ExecutableMagik {
    @Debugger(value="MagikDebug")
    @CodeType(value="EmptyConstructor")
    public deco_test_40398() {
    }

    @Override
    @Debugger(value="MagikDebug")
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "[,]^<<", deco_test_40399.class, "deco_test__\\b,]^\\l\\l_", 4, 4);
    }

    @Override
    public void preload() {
    }
}
#########
_method deco_test[x, y]^<< value
	.entries[x, y] ^<< (object << value)
	_return _unset
_endmethod
$
#########
## jpn_weird_proc_names
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class operators_5998 {
    @SourceHash(value=1252028520)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    public static Object proc__integral_number + integral_number_(Object _self, Object l, Object r) {
        return (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)ConstantBuilder.stringBootstrap("string", "primitive integral_number + integral_number failed")));
    }
}


@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class operators_5997
implements ExecutableMagik {
    @Debugger(value="MagikDebug")
    @CodeType(value="EmptyConstructor")
    public operators_5997() {
    }

    @Override
    @Debugger(value="MagikDebug")
    @CodeType(value="TopLevel")
    @EnvVars(value={@EnvVar(name="p", type=Object.class, start=210, end=319, index=3), @EnvVar(name="exemplars", type=Object.class, start=234, end=319, index=4), @EnvVar(name="name", type=Object.class, start=226, end=319, index=5), @EnvVar(name="__dynamic_frame__", type=Object.class, start=218, end=319, index=2)})
    public Object execute() {
        ProcInvoker.naturalBootstrap("()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "define_binary_operator_case"), (Object)ConstantBuilder.symbolBootstrap("symbol", "+"), (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "integral_number_mixin"), (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "integral_number_mixin"), (Object)ConstantBuilder.procWithEmptyEnvBootstrap("proc", (Class<?>)operators_5998.class, "proc__integral_number + integral_number_", "integral_number + integral_number", 3, 3, 0, 0));
	}
}
       
#########
sw:define_binary_operator_case(:|+|, sw:integral_number_mixin, sw:integral_number_mixin, _proc @|integral_number + integral_number|(l, r)
		_return _self.error("primitive integral_number + integral_number failed")
_endproc)
$
#########
## jpn_types_with_dashes

import magik.sw_kernel.sys_src.a_name-q_6063;

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class a_name-q_6062
implements ExecutableMagik {
    @Debugger(value="MagikDebug")
    @CodeType(value="EmptyConstructor")
    public a_name-q_6062() {
    }

    @Override
    @Debugger(value="MagikDebug")
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("a_name_queue", "new()", a_name-q_6063.class, "a_name_queue__new", 2, 2);
	}
}

@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class a_name-q_6063 {
    @SourceHash(value=-399115385)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object a_name_queue__new(Object _self, Object size) {
        block1: {
            if (MagikObjectUtils.should_be_boolean(BinaryDispatcher.bootstrap("\\l", size, Integer.valueOf(0)))) {
                ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)ConstantBuilder.stringBootstrap("string", "a_name_queue.new(): negative size")));
            }
            if (!MagikObjectUtils.should_be_boolean(BinaryDispatcher.bootstrap("\\g", size, Integer.valueOf(1019)))) break block1;
            ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)ConstantBuilder.stringBootstrap("string", "a_name_queue.new(): too big (max 1019)")));
        }
        return (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("init()", (Object)Cloner.makeClone(Cloner.makeClone(_self)), (Object)size));
    }
}
########
_method a_name_queue.new(size) 
	_block @block1
		_if (size < 0)
		_then
			_self.error("a_name_queue.new(): negative size")
		_endif
		_if  _not((size > 1019))
		_then
			 _leave @block1
		_endif
		_self.error("a_name_queue.new(): too big (max 1019)")
	_endblock
	_return _clone.init(size)
_endmethod
$
########
