## jpn_method_test_try
@CodeType(value="Subsidiary")
public class deco_test_3468 {
    @CodeType(value="Method")
    public static Object deco_test__try(Object _self) {
        block8: {
            Object object;
            Object[] __env__ = new Object[1];
            EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
            EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
            DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
            CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
            DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
            try {
                try {
                    DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                    try {
                        Object[] objectArray = new Object[]{__env__[0]};
                        ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_3468.class, "proc___", "", 3, 3, 0, 0, (Object[])objectArray));
                        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("do()", (Object)_self));
                        DynamicScope.destroyFrame();
                        DynamicScope.destroyFrame();
                        break block8;
                    }
                    catch (Throwable throwable) {
                        DynamicScope.destroyFrame();
                        throw throwable;
                    }
                }
                catch (Thrower.Throw throw_) {
                    Object object2;
                    object = object2 = Thrower.checkTag(throw_, callSite).peek();
                    DynamicScope.destroyFrame();
                }
            }
            catch (Throwable throwable) {
                DynamicScope.destroyFrame();
                throw throwable;
            }
            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) {
                ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self));
            } else {
                throw new Error("Try block caught unexpected error.");
            }
        }
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="187668d1-3730-4aaf-9b4c-bdf2fee86c4e", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }
}

@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
    MagikObjectUtils.createMethod("deco_test", "try()", deco_test_3468.class, "deco_test__try", 1, 1);
    }
}
###########
_method deco_test.try()
	_try
		_self.do()
	_when error
		_self.error()
	_endtry 
	_return _unset
_endmethod
$
###########
## jpn_method_test_try_when_when
@CodeType(value="Subsidiary")
public class deco_test_3468 {
    @CodeType(value="Method")
    public static Object deco_test__try_when_when(Object _self) {
        block10: {
            Object object;
            Object[] __env__ = new Object[1];
            EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
            EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
            DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
            CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
            DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
            try {
                try {
                    DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                    try {
                        Object[] objectArray = new Object[]{__env__[0]};
                        CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_3468.class, "proc___2", "", 3, 3, 0, 0, (Object[])objectArray);
                        ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "warning"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2);
                        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("do()", (Object)_self));
                        DynamicScope.destroyFrame();
                        DynamicScope.destroyFrame();
                        break block10;
                    }
                    catch (Throwable throwable) {
                        DynamicScope.destroyFrame();
                        throw throwable;
                    }
                }
                catch (Thrower.Throw throw_) {
                    Object object2;
                    object = object2 = Thrower.checkTag(throw_, callSite).peek();
                    DynamicScope.destroyFrame();
                }
            }
            catch (Throwable throwable) {
                DynamicScope.destroyFrame();
                throw throwable;
            }
            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "warning")))) {
                ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("warning()", (Object)_self));
            } else if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) {
                ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self));
            } else {
                throw new Error("Try block caught unexpected error.");
            }
        }
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_when_when")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="059e8467-dc47-45da-aff2-5fcf8a3e10c1", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___2(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }
}

@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "try_when_when()", deco_test_3468.class, "deco_test__try_when_when", 1, 1);
    }
}
###########
_method deco_test.try_when_when()
	_try
		_self.do()
	_when warning
		_self.warning()
	_when error
		_self.error()
	_endtry 
	_return _unset
_endmethod
$
###########
## jpn_method_test_try_with_condition
@CodeType(value="Subsidiary")
public class deco_test_3468 {
    @CodeType(value="Method")
    public static Object deco_test__try_with_condition(Object _self) {
        block8: {
            Object object;
            Object[] __env__ = new Object[1];
            EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
            EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
            DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
            CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
            DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
            try {
                try {
                    DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                    try {
                        Object[] objectArray = new Object[]{__env__[0]};
                        ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_3468.class, "proc___3", "", 3, 3, 0, 0, (Object[])objectArray));
                        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("do()", (Object)_self));
                        DynamicScope.destroyFrame();
                        DynamicScope.destroyFrame();
                        break block8;
                    }
                    catch (Throwable throwable) {
                        DynamicScope.destroyFrame();
                        throw throwable;
                    }
                }
                catch (Thrower.Throw throw_) {
                    Object object2;
                    object = object2 = Thrower.checkTag(throw_, callSite).peek();
                    DynamicScope.destroyFrame();
                }
            }
            catch (Throwable throwable) {
                DynamicScope.destroyFrame();
                throw throwable;
            }
            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) {
                ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrap("report_error()", (Object)object));
                ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self));
            } else {
                throw new Error("Try block caught unexpected error.");
            }
        }
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_with_condition")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="c40020a6-09fc-4351-972c-8bc0b36c5c2d", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___3(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }
}

@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
    	   MagikObjectUtils.createMethod("deco_test", "try_with_condition()", deco_test_3468.class, "deco_test__try_with_condition", 1, 1);
    }
}
###########
_method deco_test.try_with_condition()
	_try
		_self.do()
	_when error
		object.report_error()
		_self.error()
	_endtry 
	_return _unset
_endmethod
$
###########
## jpn_method_test_try_assign
@CodeType(value="Subsidiary")
public class deco_test_3468 {
    @CodeType(value="Method")
    public static Object deco_test__try_assign(Object _self) {
        Integer n;
        block8: {
            Object object;
            Object[] __env__ = new Object[1];
            EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
            EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
            DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
            CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
            DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
            try {
                try {
                    DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                    try {
                        Object[] objectArray = new Object[]{__env__[0]};
                        ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_3468.class, "proc___4", "", 3, 3, 0, 0, (Object[])objectArray));
                        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("do()", (Object)_self));
                        Integer n2 = 1;
                        DynamicScope.destroyFrame();
                        DynamicScope.destroyFrame();
                        n = n2;
                        break block8;
                    }
                    catch (Throwable throwable) {
                        DynamicScope.destroyFrame();
                        throw throwable;
                    }
                }
                catch (Thrower.Throw throw_) {
                    Object object2;
                    object = object2 = Thrower.checkTag(throw_, callSite).peek();
                    DynamicScope.destroyFrame();
                }
            }
            catch (Throwable throwable) {
                DynamicScope.destroyFrame();
                throw throwable;
            }
            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) {
                ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self));
                n = 2;
            } else {
                throw new Error("Try block caught unexpected error.");
            }
        }
        Integer a = n;
        ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("use()", (Object)_self, (Object)a));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_assign")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="14ed8aa0-7314-4ab4-83a4-6beccfc3c3af", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___4(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }
}

@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
    	   MagikObjectUtils.createMethod("deco_test", "try_assign()", deco_test_3468.class, "deco_test__try_assign", 1, 1);
    }
}
###########
_method deco_test.try_assign() 
    _local n
    _try
        _self.do()
         _local n2 << 1
        n << n2
    _when error
        _self.error()
        n << 2
    _endtry
     _local a << n
    _self.use(a)
    _return _unset
_endmethod
$
###########
## jpn_method_test_nested_try
@CodeType(value="Subsidiary")
public class deco_test_3468 {
    @CodeType(value="Method")
    public static Object deco_test__test_nested_try(Object _self) {
        block17: {
            Object object;
            Object[] __env__ = new Object[2];
            EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)1);
            EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)1);
            DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
            CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)1);
            DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
            try {
                try {
                    DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                    try {
                        block16: {
                            Object object2;
                            Object[] objectArray = new Object[]{__env__[1]};
                            ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_3468.class, "proc___", "", 3, 3, 0, 0, (Object[])objectArray));
                            ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try1()", (Object)_self));
                            EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
                            EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
                            DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
                            CallSite callSite2 = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
                            DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite2);
                            try {
                                try {
                                    DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                                    try {
                                        Object[] objectArray2 = new Object[]{__env__[0]};
                                        ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_3468.class, "proc___2", "", 3, 3, 0, 0, (Object[])objectArray2));
                                        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try2()", (Object)_self));
                                        DynamicScope.destroyFrame();
                                        DynamicScope.destroyFrame();
                                        break block16;
                                    }
                                    catch (Throwable throwable) {
                                        DynamicScope.destroyFrame();
                                        throw throwable;
                                    }
                                }
                                catch (Thrower.Throw throw_) {
                                    Object object3;
                                    object2 = object3 = Thrower.checkTag(throw_, callSite2).peek();
                                    DynamicScope.destroyFrame();
                                }
                            }
                            catch (Throwable throwable) {
                                DynamicScope.destroyFrame();
                                throw throwable;
                            }
                            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) {
                                ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrap("report_error()", (Object)object2));
                                ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error2()", (Object)_self));
                            } else {
                                throw new Error("Try block caught unexpected error.");
                            }
                        }
                        DynamicScope.destroyFrame();
                        DynamicScope.destroyFrame();
                        break block17;
                    }
                    catch (Throwable throwable) {
                        DynamicScope.destroyFrame();
                        throw throwable;
                    }
                }
                catch (Thrower.Throw throw_) {
                    Object object4;
                    object = object4 = Thrower.checkTag(throw_, callSite).peek();
                    DynamicScope.destroyFrame();
                }
            }
            catch (Throwable throwable) {
                DynamicScope.destroyFrame();
                throw throwable;
            }
            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) {
                ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrap("report_error()", (Object)object));
                ResultTuple cfr_ignored_5 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error1()", (Object)_self));
            } else {
                throw new Error("Try block caught unexpected error.");
            }
        }
        return ResultTuple.EMPTY_TUPLE;
    }

@Parent(method="deco_test__try_assign")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="14ed8aa0-7314-4ab4-83a4-6beccfc3c3af", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

@Parent(method="deco_test__try_assign")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="14ed8aa0-7314-4ab4-83a4-6beccfc3c3af", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___2(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }
}

@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
    	   MagikObjectUtils.createMethod("deco_test", "test_nested_try()", deco_test_3468.class, "deco_test__test_nested_try", 1, 1);
    }
}
###########
_method deco_test.test_nested_try() 
    _try
        _self.try1()
        _try
            _self.try2()
        _when error
            object2.report_error()
            _self.error2()
        _endtry
    _when error
        object.report_error()
        _self.error1()
    _endtry
    _return _unset
_endmethod
$
###########
## jpn_test_loop_try
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_4169 {
    @SourceHash(value=-362438866)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="__dynamic_frame__", type=Object.class, start=35, end=108, index=1), @EnvVar(name="__leave_catcher__", type=Object[].class, start=49, end=111, index=2), @EnvVar(name="_self", type=Object.class, start=13, end=127, index=3), @EnvVar(name="__leave_catcher__", type=Object[].class, start=126, end=127, index=2), @EnvVar(name="__return_catcher__", type=Object[].class, start=27, end=127, index=4)})
    public static Object deco_test__check_export_to_access(Object _self, Object possible_engine_names) {
        Boolean bl;
        Object[] __env__ = new Object[5];
        EnvAccessor.bootstrapReseter("resetEnv", (Object)_self, (Object[])__env__, (int)3);
        EnvAccessor.bootstrapStorer("storeEnv", (Object)new ReturnCatcher(), (Object[])__env__, (int)4);
        try {
            EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)1);
            EnvAccessor.bootstrapStorer("storeEnv", (Object)new LeaveCatcher(), (Object[])__env__, (int)2);
            try {
                EnvAccessor.bootstrapStorer("storeEnv", (Object)DynamicScope.getFrame(), (Object[])__env__, (int)1);
                ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrap("elements()", (MethodHandle)cfr_ldc_0(), (Object[])__env__, (Object)possible_engine_names));
                return Boolean.FALSE;
            }
            catch (LeaveCatcher.Leave leave) {
                ((LeaveCatcher)((Object)EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)2))).getLeaveResult(leave);
                ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrap("release_object()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "user", "engine")));
                bl = Boolean.TRUE;
            }
        }
        catch (ReturnCatcher.Return return_) {
            return ((ReturnCatcher)((Object)EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)4))).getReturnResult(return_);
        }
        return bl;
    }

    @Parent(method="deco_test__check_export_to_access")
    @Debugger(value="MagikDebug")
    @CodeType(value="LoopBody")
    @EnvVars(value={@EnvVar(name="01bd8b30-dd2d-4d8f-a560-0017b30034c3", type=Object.class, start=22, end=166, index=0), @EnvVar(name="01bd8b30-dd2d-4d8f-a560-0017b30034c3", type=Object.class, start=215, end=224, index=0)})
    public static Object __loopbody_(Object[] __env__, Object engine_name) {
        ResultTuple resultTuple;
        DynamicScope __iterator_frame__ = DynamicScope.interjectFrame((DynamicScope)((Object)EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)1)));
        try {
            block10: {
                Object object;
                EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
                EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
                DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
                CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
                DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
                try {
                    try {
                        DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                        try {
                            Object[] objectArray = new Object[]{__env__[0]};
                            ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "ole_unrecognised_server"), ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4169.class, "proc___", "", 3, 3, 0, 0, (Object[])objectArray));
                            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("leave?", (Object)EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)3)))) {
                                throw ((LeaveCatcher)((Object)EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)2))).makeLeave(ResultTuple.EMPTY_TUPLE);
                            }
                            DynamicScope.destroyFrame();
                            DynamicScope.destroyFrame();
                            break block10;
                        }
                        catch (Throwable throwable) {
                            DynamicScope.destroyFrame();
                            throw throwable;
                        }
                    }
                    catch (Thrower.Throw throw_) {
                        Object object2;
                        object = object2 = Thrower.checkTag(throw_, callSite).peek();
                        DynamicScope.destroyFrame();
                    }
                }
                catch (Throwable throwable) {
                    DynamicScope.destroyFrame();
                    throw throwable;
                }
                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "ole_unrecognised_server")))) {
                    throw ((ReturnCatcher)((Object)EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)4))).makeReturn(Boolean.FALSE);
                }
                throw new Error("Try block caught unexpected error.");
            }
            resultTuple = ResultTuple.EMPTY_TUPLE;
        }
        catch (Throwable throwable) {
            DynamicScope.interjectFrame(__iterator_frame__);
            throw throwable;
        }
        DynamicScope.interjectFrame(__iterator_frame__);
        return resultTuple;
    }

    @Parent(method="__loopbody_")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="01bd8b30-dd2d-4d8f-a560-0017b30034c3", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

    /*
     * Works around MethodHandle LDC.
     */
    static MethodHandle cfr_ldc_0() {
        try {
            return MethodHandles.lookup().findStatic(deco_test_4169.class, "__loopbody_", MethodType.fromMethodDescriptorString("([Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", null));
        }
        catch (NoSuchMethodException | IllegalAccessException except) {
            throw new IllegalArgumentException(except);
        }
    }
}

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_4168
implements ExecutableMagik {
    @Override
    @Debugger(value="MagikDebug")
    @CodeType(value="TopLevel")
    public Object execute() {
        return TupleBuilder.bootstrap("tb", MagikObjectUtils.createMethod("deco_test", "check_export_to_access()", deco_test_4169.class, "deco_test__check_export_to_access", 2, 2, false, false, true, 0));
    }
}
########
_private _method deco_test.check_export_to_access(possible_engine_names) 
    _local bl
    _for engine_name _over possible_engine_names.elements()
    _loop
        _try
            _if _self.leave?
            _then
                 _leave
            _endif
        _when ole_unrecognised_server
            _return _false
        _endtry
    
    _finally
        _return _false
    _endloop
    user:engine.release_object()
    bl << _true
    _return bl
_endmethod
$
########
## jpn_test_try_when_with_2_conditions
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_4565 {
    @SourceHash(value=539602358)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="4bec260d-2db6-4afa-81f7-5fa71560dcec", type=Object.class, start=15, end=142, index=0), @EnvVar(name="4bec260d-2db6-4afa-81f7-5fa71560dcec", type=Object.class, start=214, end=228, index=0)})
    public static Object deco_test__filter_search_123(Object _self) {
        block9: {
            Object object;
            Object[] __env__ = new Object[1];
            CallSite result_predicate = null;
            EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
            EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
            DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
            CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
            DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
            try {
                try {
                    DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                    try {
                        Object[] objectArray = new Object[]{__env__[0]};
                        CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4565.class, "proc___", "", 3, 3, 0, 0, (Object[])objectArray);
                        ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "invalid_map_trail_for_predicate"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "invalid_map_selection_for_predicate"), callSite2);
                        result_predicate = Invoker.bootstrap("predicate()", Invoker.bootstrapPrivate("$slot_get_predicate_component()", (Object)_self));
                        DynamicScope.destroyFrame();
                        DynamicScope.destroyFrame();
                        break block9;
                    }
                    catch (Throwable throwable) {
                        DynamicScope.destroyFrame();
                        throw throwable;
                    }
                }
                catch (Thrower.Throw throw_) {
                    Object object2;
                    object = object2 = Thrower.checkTag(throw_, callSite).peek();
                    DynamicScope.destroyFrame();
                }
            }
            catch (Throwable throwable) {
                DynamicScope.destroyFrame();
                throw throwable;
            }
            Object object3 = object;
            if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "invalid_map_trail_for_predicate")))) {
                object3 = object3;
                if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "invalid_map_selection_for_predicate")))) {
                    throw new Error("Try block caught unexpected error.");
                }
            }
            ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrap("show_alert()", (Object)Invoker.bootstrapPrivate("top_frame", (Object)_self), (Object)Invoker.bootstrap("report_contents_string", result_predicate)));
        }
        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("close()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__filter_search_123")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="4bec260d-2db6-4afa-81f7-5fa71560dcec", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }
}

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_4564
implements ExecutableMagik {
    @Override
    @Debugger(value="MagikDebug")
    @CodeType(value="TopLevel")
    public Object execute() {
        return TupleBuilder.bootstrap("tb", MagikObjectUtils.createMethod("deco_test", "filter_search_123()", deco_test_4565.class, "deco_test__filter_search_123", 1, 1));
    }
}

############
_method deco_test.filter_search_123() 
     _local result_predicate << _unset
    _try
        result_predicate << .predicate_component.predicate()
    _when invalid_map_trail_for_predicate, invalid_map_selection_for_predicate
        _self.top_frame.show_alert(result_predicate.report_contents_string)
    _endtry
    _self.close()
    _return _unset
_endmethod
$
############
## jpn_test_try2
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_4186 {
    @SourceHash(value=951505167)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="8f0ca6c1-8820-4c98-a5d8-9715f39b8d27", type=Object.class, start=23, end=138, index=0), @EnvVar(name="8f0ca6c1-8820-4c98-a5d8-9715f39b8d27", type=Object.class, start=172, end=186, index=0)})
    public static Object deco_test__test_try2(Object _self) {
        block7: {
            Object object;
            Object[] __env__ = new Object[1];
            ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
            EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
            EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
            DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
            CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
            DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
            try {
                try {
                    DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                    try {
                        Object[] objectArray = new Object[]{__env__[0]};
                        ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4186.class, "proc___", "", 3, 3, 0, 0, (Object[])objectArray));
                        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try1()", (Object)_self));
                        DynamicScope.destroyFrame();
                        DynamicScope.destroyFrame();
                        break block7;
                    }
                    catch (Throwable throwable) {
                        DynamicScope.destroyFrame();
                        throw throwable;
                    }
                }
                catch (Thrower.Throw throw_) {
                    Object object2;
                    object = object2 = Thrower.checkTag(throw_, callSite).peek();
                    DynamicScope.destroyFrame();
                }
            }
            catch (Throwable throwable) {
                DynamicScope.destroyFrame();
                throw throwable;
            }
            if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) {
                throw new Error("Try block caught unexpected error.");
            }
        }
        ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__test_try2")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="8f0ca6c1-8820-4c98-a5d8-9715f39b8d27", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

}

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_4185
implements ExecutableMagik {
    @Override
    @Debugger(value="MagikDebug")
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "test_try2()", deco_test_4186.class, "deco_test__test_try2", 1, 1);
    }
}

###########
_method deco_test.test_try2() 
    _self.before()
    _try
        _self.try1()
    _when error
        
    _endtry
    _self.after()
    _return _unset
_endmethod
$
###########
## jpn_test_try3
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_4186 {
    @SourceHash(value=2141917403)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="6d2de3c6-01e6-44d7-a736-6537d6ff5eb8", type=Object.class, start=23, end=138, index=0), @EnvVar(name="6d2de3c6-01e6-44d7-a736-6537d6ff5eb8", type=Object.class, start=185, end=199, index=0)})
    public static Object deco_test__test_try3(Object _self) {
        block8: {
            Object object;
            Object[] __env__ = new Object[1];
            ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
            EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
            EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
            DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
            CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
            DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
            try {
                try {
                    DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                    try {
                        Object[] objectArray = new Object[]{__env__[0]};
                        ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "invalid_map_trail_for_predicate"), ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4186.class, "proc___2", "", 3, 3, 0, 0, (Object[])objectArray));
                        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try1()", (Object)_self));
                        DynamicScope.destroyFrame();
                        DynamicScope.destroyFrame();
                        break block8;
                    }
                    catch (Throwable throwable) {
                        DynamicScope.destroyFrame();
                        throw throwable;
                    }
                }
                catch (Thrower.Throw throw_) {
                    Object object2;
                    object = object2 = Thrower.checkTag(throw_, callSite).peek();
                    DynamicScope.destroyFrame();
                }
            }
            catch (Throwable throwable) {
                DynamicScope.destroyFrame();
                throw throwable;
            }
            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "invalid_map_trail_for_predicate")))) {
                Object predicate_condition = object;
                ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try2()", (Object)_self, (Object)predicate_condition));
            } else {
                throw new Error("Try block caught unexpected error.");
            }
        }
        ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__test_try3")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="6d2de3c6-01e6-44d7-a736-6537d6ff5eb8", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___2(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

}

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_4185
implements ExecutableMagik {
    @Override
    @Debugger(value="MagikDebug")
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "test_try3()", deco_test_4186.class, "deco_test__test_try3", 1, 1);
    }
}

###########
_method deco_test.test_try3() 
    _self.before()
    _try _with predicate_condition
        _self.try1()
    _when invalid_map_trail_for_predicate
        _self.try2(predicate_condition)
    _endtry
    _self.after()
    _return _unset
_endmethod
$
###########
## jpn_test_try4
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_4186 {
    @SourceHash(value=-1547014097)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="4cb54187-19cf-49f8-b616-546bb9fa7f80", type=Object.class, start=23, end=152, index=0), @EnvVar(name="4cb54187-19cf-49f8-b616-546bb9fa7f80", type=Object.class, start=233, end=247, index=0)})
    public static Object deco_test__test_try4(Object _self) {
        block10: {
            Object object;
            Object[] __env__ = new Object[1];
            ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
            EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
            EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
            DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
            CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
            DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
            try {
                try {
                    DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                    try {
                        Object[] objectArray = new Object[]{__env__[0]};
                        CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4186.class, "proc___3", "", 3, 3, 0, 0, (Object[])objectArray);
                        ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "invalid_map_trail_for_predicate"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "invalid_map_selection_for_predicate"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "document_too_large"), callSite2);
                        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try1()", (Object)_self));
                        DynamicScope.destroyFrame();
                        DynamicScope.destroyFrame();
                        break block10;
                    }
                    catch (Throwable throwable) {
                        DynamicScope.destroyFrame();
                        throw throwable;
                    }
                }
                catch (Thrower.Throw throw_) {
                    Object object2;
                    object = object2 = Thrower.checkTag(throw_, callSite).peek();
                    DynamicScope.destroyFrame();
                }
            }
            catch (Throwable throwable) {
                DynamicScope.destroyFrame();
                throw throwable;
            }
            Object object3 = object;
            if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "invalid_map_trail_for_predicate")))) {
                object3 = object3;
                if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "invalid_map_selection_for_predicate")))) {
                    object3 = object3;
                    if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "document_too_large")))) {
                        throw new Error("Try block caught unexpected error.");
                    }
                }
            }
            Object predicate_condition = object3;
            ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try2()", (Object)_self, (Object)predicate_condition));
        }
        ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__test_try4")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="4cb54187-19cf-49f8-b616-546bb9fa7f80", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___3(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }
}

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_4185
implements ExecutableMagik {
    @Override
    @Debugger(value="MagikDebug")
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "test_try4()", deco_test_4186.class, "deco_test__test_try4", 1, 1);
    }
}

###########
_method deco_test.test_try4() 
    _self.before()
    _try _with predicate_condition
        _self.try1()
    _when invalid_map_trail_for_predicate, invalid_map_selection_for_predicate, document_too_large
        _self.try2(predicate_condition)
    _endtry
    _self.after()
    _return _unset
_endmethod
$
###########
## test_run_when_and_double_when
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_4185 {
    @SourceHash(value=-1887430396)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="4696d98a-8e3a-445b-9501-23716e341384", type=Object.class, start=13, end=167, index=0), @EnvVar(name="4696d98a-8e3a-445b-9501-23716e341384", type=Object.class, start=285, end=289, index=0)})
    public static Object explorer_export_plugin__test3_(Object _self) {
        block11: {
            Object object;
            Object[] __env__ = new Object[1];
            EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
            EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
            DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
            CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
            DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
            try {
                try {
                    DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                    try {
                        Object[] objectArray = new Object[]{__env__[0]};
                        CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4185.class, "proc___3", "", 3, 3, 0, 0, (Object[])objectArray);
                        ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "user_interrupt"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "warning"), callSite2);
                        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("export_filename()", (Object)_self, (Object)ConstantBuilder.symbolBootstrap("symbol", "excel"), (Object)ConstantBuilder.symbolBootstrap("symbol", "select_excel_file"), (Object)ConstantBuilder.stringBootstrap("string", "*.xls"), (Object)ConstantBuilder.symbolBootstrap("symbol", "int!export_to_excel_save_as()"), (Object)ConstantBuilder.symbolBootstrap("symbol", "exporting_to_excel")));
                        DynamicScope.destroyFrame();
                        DynamicScope.destroyFrame();
                        break block11;
                    }
                    catch (Throwable throwable) {
                        DynamicScope.destroyFrame();
                        throw throwable;
                    }
                }
                catch (Thrower.Throw throw_) {
                    Object object2;
                    object = object2 = Thrower.checkTag(throw_, callSite).peek();
                    DynamicScope.destroyFrame();
                }
            }
            catch (Throwable throwable) {
                DynamicScope.destroyFrame();
                throw throwable;
            }
            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "user_interrupt")))) {
                Boolean bl = Boolean.TRUE;
                ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrap("enabled?\\l\\l", (Object)Invoker.bootstrapPrivate("action()", (Object)_self, (Object)ConstantBuilder.symbolBootstrap("symbol", "export_to_excel")), (Object)bl));
            } else {
                Object object3 = object;
                if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) {
                    object3 = object3;
                    if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "warning")))) {
                        throw new Error("Try block caught unexpected error.");
                    }
                }
                ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrap("report_on()", (Object)object3, (Object)DynamicAccessor.bootstrapFetcher("!error_output!", "sw")));
            }
        }
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="explorer_export_plugin__test3_")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="4696d98a-8e3a-445b-9501-23716e341384", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___3(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }
}


@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_4184
implements ExecutableMagik {
    @Override
    @Debugger(value="MagikDebug")
    @CodeType(value="TopLevel")
    public Object execute() {
        return TupleBuilder.bootstrap("tb", MagikObjectUtils.createMethod("explorer_export_plugin", "test3", deco_test_4185.class, "explorer_export_plugin__test3_", 1, 1));
    }
}
#######
_method explorer_export_plugin.test3
    _try
        _self.export_filename(:excel, :select_excel_file, "*.xls", :|int!export_to_excel_save_as()|, :exporting_to_excel)
    _when user_interrupt
         _local bl << _true
        _self.action(:export_to_excel).enabled? << bl
    _when error, warning
        object3.report_on(sw:!error_output!)
    _endtry
    _return _unset
_endmethod
$
#######
