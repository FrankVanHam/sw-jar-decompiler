## jpn_method_definition_test_no_args
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_3458 {
    @CodeType(value="Method")
    public static Object deco_test__test_no_args(Object _self) {
        return ResultTuple.EMPTY_TUPLE;
    }
}

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "test_no_args()", deco_test_3458.class, "deco_test__test_no_args", 1, 1);
    }
}
###########
_method deco_test.test_no_args() 
    _return _unset
_endmethod
$
###########
## jpn_method_definition_test_no_parenthesis
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_3458 {
    @CodeType(value="Method")
    public static Object deco_test__test_no_parenthesis_(Object _self) {
        return ResultTuple.EMPTY_TUPLE;
    }
}

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "test_no_parenthesis", deco_test_3458.class, "deco_test__test_no_parenthesis_", 1, 1);
    }
}
###########
_method deco_test.test_no_parenthesis
    _return _unset
_endmethod
$
###########
## jpn_method_definition_test_args
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_3458 {
    @CodeType(value="Method")
    public static Object deco_test__test_args(Object _self, Object a, Object b) {
        return ResultTuple.EMPTY_TUPLE;
    }
}

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "test_args()", deco_test_3458.class, "deco_test__test_args", 3, 3);
    }
}
###########
_method deco_test.test_args(a, b)
    _return _unset
_endmethod
$
###########
## jpn_method_definition_test_args_asign(a,b)<<
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_3458 {
    @CodeType(value="Method")
    public static Object deco_test__test_args_asign()\l\l_(Object _self, Object c, Object a, Object b) {
        return ResultTuple.EMPTY_TUPLE;
    }
}

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "test_args_asign()<<", deco_test_3458.class, "deco_test__test_args_asign()\\l\\l_", 4, 4);
    }
}
###########
_method deco_test.test_args_asign(a, b)<<c
    _return _unset
_endmethod
$
###########
## jpn_method_definition_test_optional_args
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_3458 {
    @CodeType(value="Method")
    public static Object deco_test__test_optional_args(Object _self, Object a, Object b, Object c) {
        return ResultTuple.EMPTY_TUPLE;
    }
}

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "test_optional_args()", deco_test_3458.class, "deco_test__test_optional_args", 4, 2);
    }
}
###########
_method deco_test.test_optional_args(a, _optional b, c)
    _return _unset
_endmethod
$
###########
## jpn_method_definition_test_gather_args
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_3458 {
    @CodeType(value="Method")
    public static Object deco_test__test_gather_args(Object _self, Object a, Object b, Object c, Object ... extras) {
        return ResultTuple.EMPTY_TUPLE;
    }
}

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "test_gather_args()", deco_test_3458.class, "deco_test__test_gather_args", 5, 2);
    }
}
###########
_method deco_test.test_gather_args(a, _optional b, c, _gather extras)
    _return _unset
_endmethod
$
###########
## jpn_method_definition_[]
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_3458 {
    @CodeType(value="Method")
    public static Object deco_test__\b]_(Object _self, Object a) {
        return ResultTuple.EMPTY_TUPLE;
    }
}

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "[]", deco_test_3458.class, "deco_test__\\b]_", 2, 2);
    }
}
###########
_method deco_test[a]
    _return _unset
_endmethod
$
###########
## jpn_method_definition_[]<<
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_3458 {
    @CodeType(value="Method")
    public static Object deco_test__\b]\l\l_(Object _self, Object b, Object a) {
        return ResultTuple.EMPTY_TUPLE;
    }
}

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "[]<<", deco_test_3458.class, "deco_test__\\b]\\l\\l_", 3, 3);
    }
}
###########
_method deco_test[a]<< b
    _return _unset
_endmethod
$
###########
## jpn_method_definition_boot^<<
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_3458 {
    @CodeType(value="Method")
    public static Object deco_test__test_boot_becomes^\l\l_(Object _self, Object a) {
        return ResultTuple.EMPTY_TUPLE;
    }
}

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "test_boot_becomes^<<", deco_test_3458.class, "deco_test__test_boot_becomes^\\l\\l_", 2, 2);
    }
}
###########
_method deco_test.test_boot_becomes^<< a
	_return _unset
_endmethod
$
###########
## jpn_method_definition_boot()^<<
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_3458 {
    @CodeType(value="Method")
    public static Object deco_test__test_boot_par()^\l\l_(Object _self, Object a) {
        return ResultTuple.EMPTY_TUPLE;
    }
}

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "test_boot_par()^<<", deco_test_3458.class, "deco_test__test_boot_par()^\\l\\l_", 2, 2);
    }
}
###########
_method deco_test.test_boot_par()^<< a
	_return _unset
_endmethod
$
###########
## jpn_method_definition_boot[]^<<
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_3458 {
    @CodeType(value="Method")
    public static Object deco_test__\b]^\l\l_(Object _self, Object b, Object a) {
        return ResultTuple.EMPTY_TUPLE;
    }
}

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "[]^<<", deco_test_3458.class, "deco_test__\\b]^\\l\\l_", 3, 3);
    }
}
###########
_method deco_test[a]^<< b
	_return _unset
_endmethod
$
###########
## jpn_method_definition_private
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_3458 {
    @CodeType(value="Method")
    public static Object deco_test__private(Object _self) {
        return ResultTuple.EMPTY_TUPLE;
    }
}

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "private()", deco_test_3458.class, "deco_test__private", 1, 1, false, false, true, 0);
    }
}
###########
_private _method deco_test.private() 
    _return _unset
_endmethod
$
###########
## jpn_method_definition_abstract
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_3458 {
    @CodeType(value="Method")
    public static Object deco_test__abstract(Object _self) {
        return ResultTuple.EMPTY_TUPLE;
    }
}

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "abstract()", deco_test_3458.class, "deco_test__abstract", 1, 1, false, true, false, 0);
    }
}
###########
_abstract _method deco_test.abstract() 
    _return _unset
_endmethod
$
###########
## jpn[,]
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_40399 {
    @SourceHash(value=877752802)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object deco_test__\b,]_(Object _self, Object x, Object y) {
        return (ResultTuple)((Object)Invoker.tupleBootstrap("\\b,]", (Object)Invoker.bootstrapPrivate("$slot_get_entries()", (Object)_self), (Object)x, (Object)y));
    }
}

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_40398
implements ExecutableMagik {
    @Debugger(value="MagikDebug")
    @CodeType(value="EmptyConstructor")
    public deco_test_40398() {
    }

    @Override
    @Debugger(value="MagikDebug")
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "[,]", deco_test_40399.class, "deco_test__\\b,]_", 3, 3);
    }

    @Override
    public void preload() {
    }
}
##########
_method deco_test[x, y]
	_return .entries[x, y]
_endmethod
$
##########
## jpn[,]<<
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_40399 {
    @SourceHash(value=-846893568)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object deco_test__\b,]\l\l_(Object _self, Object value, Object x, Object y) {
        Object object = value;
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrap("\\b,]\\l\\l", (Object)Invoker.bootstrapPrivate("$slot_get_entries()", (Object)_self), (Object)object, (Object)x, (Object)y));
        return ResultTuple.EMPTY_TUPLE;
    }
}

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_40398
implements ExecutableMagik {
    @Debugger(value="MagikDebug")
    @CodeType(value="EmptyConstructor")
    public deco_test_40398() {
    }

    @Override
    @Debugger(value="MagikDebug")
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "[,]<<", deco_test_40399.class, "deco_test__\\b,]\\l\\l_", 4, 4);
    }

    @Override
    public void preload() {
    }
}
#########
_method deco_test[x, y]<< value
	.entries[x, y] << (object << value)
	_return _unset
_endmethod
$
#########
## jpn[,]^<<
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_40399 {
    @SourceHash(value=-846893568)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object deco_test__\b,]^\l\l_(Object _self, Object value, Object x, Object y) {
        Object object = value;
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrap("\\b,]^\\l\\l", (Object)Invoker.bootstrapPrivate("$slot_get_entries()", (Object)_self), (Object)object, (Object)x, (Object)y));
        return ResultTuple.EMPTY_TUPLE;
    }
}

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_40398
implements ExecutableMagik {
    @Debugger(value="MagikDebug")
    @CodeType(value="EmptyConstructor")
    public deco_test_40398() {
    }

    @Override
    @Debugger(value="MagikDebug")
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "[,]^<<", deco_test_40399.class, "deco_test__\\b,]^\\l\\l_", 4, 4);
    }

    @Override
    public void preload() {
    }
}
#########
_method deco_test[x, y]^<< value
	.entries[x, y] ^<< (object << value)
	_return _unset
_endmethod
$
#########
