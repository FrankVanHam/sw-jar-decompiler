_package deco
$

#remex(:jpn_base)

_pragma(classify_level=restricted, topic={jar_decompiler})
##
## base class for all java parser nodes (jpn)
##
def_slotted_exemplar(:jpn_base,
	{})
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_base.new(_gather p_args)
	##
	>> _clone.init(_scatter p_args)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_private _method jpn_base.init()
	##
	>> _self
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_base.parse_statement(p_parser)
	##
	>> _self.parse_expression(p_parser)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_base.parse_expression(p_parser)
	##
	>> p_parser.parse_expression_error(_self)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_base.is_class?
	##
	>> _false
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_base.is_constant?
	>> _false 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_base.is_parenthesis?
	## 
	>> _false 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_base.is_cast?
	>> _false 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_base.is_this?
	>> _false 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_base.is_declaration?
	## 
	>> _false
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_base.is_array_access?
	##
	>> _false 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_base.is_cast?
	##
	>> _false 
_endmethod
$
