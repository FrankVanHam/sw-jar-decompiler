_package deco
$

#remex(:dcn_dynamic_declaration)
$

_pragma(classify_level=restricted, topic={decompiler})
## a node for storing a dynamic value.
def_slotted_exemplar(:dcn_dynamic_declaration,
		     {
			     {:package, _unset, :readable},
			     {:name,    _unset, :readable}
		     }, :dcn_base)
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_dynamic_declaration.new(p_name, p_package)
	##
	>> _clone.init(p_name, p_package)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_dynamic_declaration.init(p_name, p_package)
	##
	.name << p_name
	.package << p_package
	>> _self 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_dynamic_declaration.decode_on( p_stream )
	p_stream.write( "_dynamic " )
	p_stream.write( .package, ":", .name)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_dynamic_declaration.is_dynamic_declaration?
	##
	>> _true 
_endmethod
$
