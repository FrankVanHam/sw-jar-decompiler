_package deco
$

_pragma(classify_level=restricted, topic={decompiler})
## node for a local.
def_slotted_exemplar(:dcn_multiple,
		     {
			     {:expressions, _unset, :readable}
		     }, :dcn_base )
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_multiple.new(p_expressions)
	##
	>> _clone.init(p_expressions)
_endmethod
$


_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_multiple.init(p_expressions)
	.expressions << p_expressions
	_if .expressions.includes?(_unset) _then 1.stop _endif 
	>> _self 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_multiple.decode_on(p_stream)
	##
	p_stream.write("(")
	_self.decode_list_on(p_stream, .expressions)
	p_stream.write(")")
_endmethod
$
