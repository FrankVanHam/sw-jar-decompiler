_package deco
$

#remex(:dcn_iter)
$

_pragma(classify_level=restricted, topic={decompiler})
## Node for an iterator loop
def_slotted_exemplar(:dcn_iter,
	{
		{:tag,          _unset, :readable},
		{:sender,       _unset, :readable},
		{:name,         _unset, :readable},
		{:body,         _unset, :readable},
		{:scatter?,     _unset, :readable},
		{:finally_body, _unset, :readable},
		{:args,         _unset, :readable},
		{:sender_args,  _unset, :readable}
	},
	:dcn_base)
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_iter.new(p_sender, p_name, p_scatter?, p_args, p_body, p_sender_args)
	>> _clone.init(p_sender, p_name, p_scatter?, p_args, p_body, p_sender_args)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_iter.init(p_sender, p_name, p_scatter?, p_args, p_body, p_sender_args)
	##
	#assert(p_sender _isnt _unset)
	assert(p_body _isnt _unset)
	.sender << p_sender
	.name << p_name
	.body << p_body
	.sender_args << p_sender_args
	.scatter?  << p_scatter?
	.args << p_args
	.finally_body << _unset 
	>> _self 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_iter.finally_body << p_body
	## 
	.finally_body << p_body
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_iter.assign_tag(p_string)
	##
	.tag << p_string
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_iter.accept_body_visitor(visitor)
	.body.accept_body_visitor(visitor)
	_if .finally_body _isnt _unset
	_then
		.finally_body.accept_body_visitor(visitor)
	_endif 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_iter.decode_on(p_stream)
	##
	p_stream.write("_for ")
	_local comma? << _false 
	_for i_index, i_arg _over .args.fast_keys_and_elements()
	_loop
		_if (comma?^<<_true) _then p_stream.write(", ") _endif
		_if .scatter? _andif i_index=.args.size
		_then
			p_stream.write("_scatter ")
		_endif 
		p_stream.write(i_arg)
	_endloop 
	p_stream.write(" _over ")

	_if .sender _isnt _unset
	_then 
		.sender.decode_on(p_stream)
		p_stream.write(".", .name.slice(1,.name.size-2))
	_else
		p_stream.write(.name)	
	_endif 
	p_stream.write("(")
	_self.decode_list_on(p_stream, .sender_args)
	p_stream.write(")")
	
	p_stream.newline()
	p_stream.write("_loop")
	_if .tag _isnt _unset
	_then
		p_stream.write(" @", .tag)
	_endif 
	p_stream.newline()
	p_stream.indent(4)
	.body.decode_on(p_stream)
	p_stream.newline()
	p_stream.unindent(4)

	_if .finally_body _isnt _unset
	_then
		p_stream.newline()
		p_stream.write("_finally")
		p_stream.newline()
		p_stream.indent(4)
		.finally_body.decode_on(p_stream)
		p_stream.newline()
		p_stream.unindent(4)
	_endif 
	p_stream.write("_endloop")
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_iter.is_iter?
	##
	>> _true
_endmethod
$
