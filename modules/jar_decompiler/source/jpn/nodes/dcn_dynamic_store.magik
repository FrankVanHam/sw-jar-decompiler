_package deco
$

#remex(:dcn_dynamic_store)
$

_pragma(classify_level=restricted, topic={decompiler})
## a node for storing a dynamic value.
def_slotted_exemplar(:dcn_dynamic_store,
		     {
			     {:package,    _unset, :readable},
			     {:name,       _unset, :readable},
			     {:value_node, _unset, :readable}
		     }, :dcn_base)
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_dynamic_store.new(p_name, p_package, p_value_node)
	##
	>> _clone.init(p_name, p_package, p_value_node)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_dynamic_store.init(p_name, p_package, p_value_node)
	##
	.name       << p_name
	.package    << p_package
	.value_node << p_value_node
	>> _self 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_dynamic_store.name
	##
	>> .name
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_dynamic_store.value
	>> .value_node
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_dynamic_store.is_dynamic_store?
	##
	>> _true
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_dynamic_store.decode_on( p_stream )
	p_stream.write( "_dynamic " )
	p_stream.write( .package, ":", .name)
	p_stream.write( " << " )
	.value_node.decode_on( p_stream )
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_dynamic_store.convert_to_package_declaration()
	##
	>> dcn_package.new(.value_node.args[1].string_value)
_endmethod
$
