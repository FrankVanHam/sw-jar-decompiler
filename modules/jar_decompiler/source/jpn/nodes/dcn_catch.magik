_package deco
$

#remex(:dcn_catch)
$

_pragma(classify_level=restricted, topic={decompiler})
## Node for a catch structure.
def_slotted_exemplar( :dcn_catch,
	{
		{:body, _unset, :readable},
		{:tag,  _unset, :readable}
	}, :dcn_base)
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_catch.new(p_body, _optional p_tag)
	##
	>> _clone.init(p_body, p_tag)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_catch.init(p_body, _optional p_tag)
	##
	.body << p_body
	.tag  << p_tag
	>> _self 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_catch.decode_on(p_stream)
	p_stream.write("_catch ")
	_if .tag _isnt _unset
	_then
		.tag.decode_on(p_stream)
	_endif 
	p_stream.newline()
	p_stream.indent(4)
	.body.decode_on(p_stream)
	p_stream.newline()
	p_stream.unindent(4)
	p_stream.write("_endcatch ")
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_catch.accept_body_visitor(p_visitor)
	.body.accept_body_visitor(p_visitor)
_endmethod
$
