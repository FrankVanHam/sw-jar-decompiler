_package deco
$

#remex(:dcn_file)

_pragma(classify_level=restricted, topic={jar_decompiler})
## Node for whatever was declared in the file.
def_slotted_exemplar(:dcn_file,
		      {
			      {:name, _unset, :readable},
			      {:body, _unset, :readable}
		      },
		      :dcn_base)
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method dcn_file.new(p_name)
	_return _clone.init(p_name)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method dcn_file.init(p_name)
	##
	.name << p_name
	.body << dcn_body.new()
	>> _self 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method dcn_file.add_statement(p_statement)
	## 
	.body.statements.add(p_statement)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method dcn_file.get_file_name(p_include_module?)
	
	_for i_stat _over .body.statements.fast_elements()
	_loop
		_if i_stat.is_dynamic_store? _andif
		    i_stat.name = "!source_file!"
		_then
			_local path << i_stat.value.string_value
			_return _self.get_file_name_from_source_file(path, p_include_module?)
			
		_elif i_stat.is_def_object?
		_then
			_return write_string(i_stat.target_name, ".magik")

		_elif i_stat.is_method?
		_then
			_return write_string(i_stat.exemplar_name, "_extras.magik")
		_endif
	_endloop
	_return write_string(.name, ".magik")
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_private _method dcn_file.get_file_name_from_source_file(p_file, p_include_module?)
	##
	_local file << p_file.copy()
	file << file.substitute_string("/","\").substitute_string("\\","\")

	_local index << file.lowercase.rindex_of_seq("source")
	_if index _isnt _unset
	_then
		_if p_include_module?
		_then
			_local sec_index << file.rindex_of(%\, index-2)
			index << _if sec_index _isnt _unset
				 _then >> sec_index+1
				 _else >> index
				 _endif 
		_endif 
		_return file.slice_to_end(index)
	_else
		index << file.rindex_of(%\)
		_if index _isnt _unset
		_then
			_return file.slice_to_end(index+1)
		_else
			_return file
		_endif
	_endif 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method dcn_file.empty?
	>> .body.statements.empty?
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method dcn_file.decode_on(p_stream)
	##
	_for i_statement _over .body.statements.fast_elements()
	_loop
		_if i_statement.is_no_op? _then _continue _endif
		_if i_statement.is_dynamic_store? _andif
		    i_statement.name = "!source_file!" _then _continue _endif
		
		i_statement.decode_on(p_stream)
		p_stream.newline()
		p_stream.write("$")
		p_stream.newline()
		p_stream.newline()
	_endloop
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method dcn_file.accept_body_visitor(p_visitor)
	##
	.body.accept_body_visitor(p_visitor)
_endmethod
$
