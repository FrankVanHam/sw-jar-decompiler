_package deco
$

#remex(:dcn_throw)
$

_pragma(classify_level=restricted, topic={decompiler})
## Node for a throw statement
def_slotted_exemplar( :dcn_throw,
	{
		{:value,   _unset, :readable},
		{:results, _unset, :readable}
	}, :dcn_base)
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_throw.new(value, results)
	
	_return _clone.init(value, results)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_throw.init(value, results)
	.value << value
	.results << results
	_return _self 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_throw.accept_body_visitor(visitor)
	.value.accept_body_visitor(visitor)
	_self.accept_body_visitor_in_list(visitor, .results)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_throw.decode_on( p_stream)
	p_stream.write("_throw ")
	.value.decode_on(p_stream)
	
	scatter? << _false 
	numres << .results.size
	_if numres > 0
	_then
		p_stream.write( " _with ")
		_self.decode_list_on(p_stream, .results)
	_endif 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_throw.is_throw?
	## 
	>> _true 
_endmethod
$
