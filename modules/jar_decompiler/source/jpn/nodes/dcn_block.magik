_package deco
$

#remex(:dcn_block)
$

_pragma(classify_level=restricted, topic={decompiler})
## Node for a block statement.
## note that the _block _endblock statement has no
## representative in the code_vector, so there is no token for
## it. 
def_slotted_exemplar(:dcn_block,
		      {
			      {:name, _unset, :readable},
			      {:body, _unset, :readable}
			      },
		      :dcn_base)
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_block.new(p_body, _optional p_name)
	_return _clone.init(p_body, p_name)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_block.init(p_block, _optional p_name)
	.body << p_block
	.name << p_name
	_return _self 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_block.accept_body_visitor(p_visitor)
	.body.accept_body_visitor(p_visitor)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_block.decode_on(p_stream)
	##
	p_stream.write( "_block")
	_if .name _isnt _unset
	_then
		p_stream.write(" @", .name)
	_endif 
	p_stream.newline()
	p_stream.indent(4)
	.body.decode_on(p_stream)
	p_stream.newline()
	p_stream.unindent(4)
	p_stream.write( "_endblock")
_endmethod
$


_pragma(classify_level=restricted, topic={decompiler})
_method dcn_block.is_block?
	## 
	>> _true
_endmethod
$
