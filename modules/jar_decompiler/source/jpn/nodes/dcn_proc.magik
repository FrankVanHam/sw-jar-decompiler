_package deco
$

#remex(:dcn_proc)
$

_pragma(classify_level=restricted, topic={decompiler})
## Represents a node for a decompiled proc from magik.
def_slotted_exemplar( :dcn_proc,
		      {
			      {:imports, _unset, :readable},
			      {:name,    _unset, :readable}
			      
		      }, :dcn_callable )
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_proc.new(p_class_name, p_method_name, p_args, p_scatter?, p_body, p_imports)
	##
	>> _clone.init(p_class_name, p_method_name, p_args, p_scatter?, p_body, p_imports )
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_proc.init(p_class_name, p_method_name, p_args, p_scatter?, p_body, p_imports )

	assert(p_body.is_class_of?(dcn_body))

	.imports << p_imports
	>> _super.init(p_class_name, p_method_name, p_args, p_scatter?, p_body)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_proc.method_name
	>> .name.default("no_name_given_in_bind")
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_proc.bind(p_name, p_nr_args, p_mandatory_args )
	##
	_if p_name.default("") <> ""
	_then
		.name << p_name
	_endif 
	.nr_mandatory_args << p_mandatory_args
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_proc.decode_on(p_stream)
	##
	## Write a formated output on the stream
	##
	p_stream.write( "_proc" )
	_if .name _isnt _unset
	_then
		p_stream.write(" @", .name)
	_endif 
	
	p_stream.write( "(" )
	_self.int!decode_args_on(p_stream, 1)
	p_stream.write( ")")
	p_stream.newline()
	p_stream.indent(4)
	_if .imports.empty?.not
	_then
		p_stream.write( "_import ")
		_self.write_list_on(p_stream, .imports)
		p_stream.newline()
	_endif 
	
	_self.decode_body_on(p_stream)
	p_stream.unindent(4)
	p_stream.newline()
	p_stream.write( "_endproc" )
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_proc.is_proc?
	##
	>> _true
_endmethod
$
