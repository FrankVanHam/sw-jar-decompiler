_package deco
$

#remex(:dcn_handling)
$

_pragma(classify_level=restricted, topic={decompiler})
## Node for a single handling statements. 
def_slotted_exemplar( :dcn_handling,
		       {
			       {:conditions, _unset},
			       {:proc_node,  _unset}
		       }, :dcn_base)
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_handling.new( conditions, proc_node )
	_return _clone.init(conditions, proc_node)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_handling.init(conditions, proc_node)
	.conditions << conditions
	.proc_node  << proc_node
	_return _self 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_handling.accept_body_visitor(visitor)
	_if .proc_node _isnt _unset
	_then 
		.proc_node.accept_body_visitor(visitor)
	_endif 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_handling.decode_on(p_stream)
	p_stream.write( "_handling " )
	comma? << _false 
	_for cond _over .conditions.fast_elements()
	_loop
		_if (comma? ^<< _true) _then p_stream.write( ", ") _endif
		p_stream.write( cond )
	_endloop
	_if .proc_node _isnt _unset
	_then 
		p_stream.write( " _with " )
		.proc_node.decode_on( p_stream )
	_endif 
_endmethod
$
