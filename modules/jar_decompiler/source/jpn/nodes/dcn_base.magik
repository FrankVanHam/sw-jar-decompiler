_package deco
$

#remex(:dcn_base)
$

_pragma(classify_level=restricted, topic={decompiler})
## Base class of all decompiled nodes.
def_slotted_exemplar(:dcn_base, {} )
$

_pragma(classify_level=restricted, topic={decompiler})
##
## Is this a compound statement
##
dcn_base.define_shared_constant(:compound?, _false, :private)
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.new(_gather p_args)
	>> _clone.init(_scatter p_args)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method dcn_base.remainder(p_nr)
	##
	>> dcn_remainder.new(p_nr)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.makereturn(p_parser, p_exp_node)
	##
	_local exp << p_parser.parse_expression(p_exp_node)
	>> dcn_return.new(exp)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.getreturnresult()
	##
	>> dcn_no_op.new()
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.makeleave(p_parser, _gather p_args)
	##
	>> dcn_unfinished_break.new(_self)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.getleaveresult(p_parser, p_leave)
	##
	>> dcn_leave_result.new(_self)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.getcontinueresult(p_parser, p_leave)
	##
	>> dcn_continue_result.new(_self)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.makecontinue(p_parser, _gather p_args)
	##
	>> dcn_unfinished_continue.new(_self)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.pop()
	##
	>> dcn_pop.new(_self)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.not
	## 
	>> dcn_not.new(_self)	
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.clone()
	##  
	>> _self 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.decode_on(p_stream)
	## Every subclass must be able to decode on a a stream.
	condition.raise(:error, :string, write_string("missing implementation for ", _self.class_name))
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.decode_expression_on(p_stream)
	##
	_if _self.compound?
	_then
		p_stream.write("(")
		_self.decode_on(p_stream)
		p_stream.write(")")
	_else
		_self.decode_on(p_stream)
	_endif 
_endmethod
$


_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_base.decode_pragma_on(p_stream)
	##
	_local finder << _self.method_finder
	_if finder _isnt _unset
	_then 
		finder.decode_pragma_on(p_stream)
	_endif 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_base.decode_comment_on(p_stream, p_tab?)
	## 
	_local finder << _self.method_finder
	_if finder _isnt _unset
	_then 
		finder.decode_comment_on(p_stream, p_tab?)
	_endif 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_base.method_finder
	##
	show("Unset method_finder ", _self.class_name)
	>> _unset 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_base.package_prefix(p_name)
	## 
	_local name << p_name.as_symbol()
	_for i_pack _over package.all_packages.fast_elements()
	_loop
		_local gl << i_pack.global_at(name)
		_if gl _isnt _unset
		_then
			_local pck << gl.package
			_if pck _isnt _unset
			_then
				_return write_string(pck.name, ":", p_name)
			_else
				_return p_name
			_endif
		_endif
	_endloop 
	_return _unset 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.accept_body_visitor(visitor)
	
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.is_type?()
	##
	>> _false 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.accept_body_visitor_in_list(p_visitor, p_vec)
	_for index, i_node _over p_vec.fast_keys_and_elements()
	_loop
		i_node.accept_body_visitor(p_visitor)
	_endloop
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.decode_statements_on(p_stream, p_statements)
	##
	_for i_stat _over p_statements.fast_elements()
	_loop
		p_stat.decode_on(p_stream)
		p_stream.newline()
	_endloop
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.decode_list_on(p_stream, p_vec)
	##
	## Decode a comma separated list of nodes on P_STREAM.
	#
	comma? << _false
	_for elem _over p_vec.fast_elements()
	_loop
		_if comma? ^<< _true
		_then
			p_stream.write( ", ")
		_endif
		elem.decode_expression_on(p_stream)
	_endloop
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.write_list_on(p_stream, p_vec)
	##
	comma? << _false
	_for elem _over p_vec.fast_elements()
	_loop
		_if comma? ^<< _true
		_then
			p_stream.write( ", ")
		_endif
		p_stream.write(elem)
	_endloop
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.is_pop?
	## 
	>> _false 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.is_null?
	>> _false 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.is_dynamic_store?
	##
	>> _false 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.is_return?
	##
	>> _false 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.is_local?
	## 
	>> _false
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.is_unfinished_try?
	##
	>> _false 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.is_constant?
	## 
	>> _false 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.is_unfinished_throw?
	##
	>> _false 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.is_unfinished_break?
	##
	>> _false 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.is_unfinished_continue?
	##
	>> _false 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.is_no_op?
	##
	>> _false 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.is_local?
	_return _false 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.is_local_assignment?
	_return _false 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.is_constant?
	_return _false 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.is_break?
	##
	>> _false 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.is_not?
	##
	>> _false 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.is_send?
	##
	>> _false 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.is_if?
	##
	>> _false 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.is_throw?
	##
	>> _false 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.is_call?
	##
	>> _false 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.is_proc?
	##
	>> _false 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.is_def_object?
	##
	>> _false 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.is_method?
	##
	>> _false 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.is_local_declaration?
	##
	>> _false
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.is_gathered?
	## 
	>> _false  
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.is_op?
	## 
	>> _false  
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.is_block?
	## 
	>> _false  
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.is_dynamic_declaration?
	##
	>> _false 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.is_vector?
	##
	>> _false 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.is_vector_access?
	##
	>> _false
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.is_leave_result?
	##
	>> _false
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.is_iter?
	##
	>> _false
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.is_continue?
	##
	>> _false
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.is_synchronized?
	##
	>> _false
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.is_loop?
	## 
	>> _false 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_base.is_remainder?
	## 
	>> _false 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method dcn_base.is_interrupts?
	## 
	>> _false  	
_endmethod
$
