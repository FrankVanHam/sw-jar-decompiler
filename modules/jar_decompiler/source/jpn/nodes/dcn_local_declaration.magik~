_package deco
$


#remex(:dcn_local_declaration)
$

_pragma(classify_level=restricted, topic={decompiler})
## node for a local.
def_slotted_exemplar(:dcn_local_declaration,
		     {
			     {:name, _unset, :readable},
			     {:type, _unset, :readable}
		     }, :dcn_base )
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_local_declaration.new(p_name, p_type)
	
	_return _clone.init(p_name, p_type)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_local_declaration.init(p_name, p_type)
	assert(p_name.is_class_of?(""))
	assert(p_type.is_class_of?(""))
	.name << p_name
	.type << p_type
	_return _self
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_local_declaration.is_type?(p_type)
	assert(p_type.is_class_of?(""))
	>> .type = p_type
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_local_declaration.decode_on(p_stream)
	p_stream.write("_local ", .name )
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_local_declaration.decode_none_declaring_on(p_stream)
	p_stream.write(.name)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_local_declaration.is_local_declaration?
	##
	>> _true 
_endmethod
$
