_package deco
$

#remex(:dcn_slot)
$

_pragma(classify_level=restricted, topic={jar_decompiler})
##
## Node to represent a slot
##
def_slotted_exemplar(:dcn_slot,
	{
		{:name, _unset}
	},
	:dcn_base)
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method dcn_slot.new(p_name)
	>> _clone.init(p_name)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method dcn_slot.init(p_name)
	.name << p_name
	>> _self 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method dcn_slot.decode_on(p_stream)
	p_stream.write(".", .name)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method dcn_slot.name
	>> .name
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method dcn_slot.is_type?(p_type)
	## 
	>> _false 
_endmethod
$

