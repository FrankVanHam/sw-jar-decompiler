_package deco
$

#remex(:dcn_lock)
$

_pragma(classify_level=restricted, topic={decompiler})
## node for a lock statement. This will typically be part of a
## dcn_protect node.
def_slotted_exemplar(:dcn_lock,
		     {
			     {:expression,_unset, :readable},
			     {:body,      _unset, :readable}
		     },
		     :dcn_base)
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_lock.new(p_exp, p_body)
	_return _clone.init(p_exp, p_body)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_lock.init(p_exp, p_body)
	.expression << p_exp
	.body << p_body
	_return _self
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_lock.accept_body_visitor(visitor)
	.expression.accept_body_visitor(visitor)
	.body.accept_body_visitor(visitor)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_lock.decode_on(p_stream)
	p_stream.write("_lock ")
	.expression.decode_expression_on(p_stream)
	p_stream.newline()
	p_stream.indent(4)
	.body.decode_on(p_stream)
	p_stream.newline()
	p_stream.unindent(4)
	p_stream.write("_endlock")
_endmethod
$
