_package deco
$

#remex(:dcn_local_assignment)
$

_pragma(classify_level=restricted, topic={decompiler})
## Node for a single assignment to a local.
def_slotted_exemplar(:dcn_local_assignment,
		     {
			     {:local_nodes, _unset},
			     {:expression,  _unset, :readable},
			     {:gather?,     _unset, :readable}
		     }, {:dcn_base})
$

_pragma(classify_level=restricted, topic={decompiler})
dcn_local_assignment.define_shared_constant(:compound?, _true , :private)
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_local_assignment.new(p_local, p_expression)
	_return _clone.init(p_local, p_expression)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_local_assignment.init(p_local, p_expression)
	
	.local_nodes << rope.new()
	_if p_local _isnt _unset
	_then
		.local_nodes.add(p_local)
	_endif
	.gather? << _false 
	.expression << p_expression
	_return _self
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_local_assignment.expression << p_exp
	##
	.expression << p_exp
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_local_assignment.single_local
	##
	## Return the only local or local declaration
	## Returns unset if there is more then one local, or no local
	##
	>> _if .local_nodes.size = 1
	   _then
		   _local n << .local_nodes.an_element()
		   >> _if n.is_local? _orif n.is_local_declaration? _orif n.is_vector_access?
		      _then
			      >> n
		      _endif 
	   _endif 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_local_assignment.single_name
	## 
	_local loc << _self.single_local
	>> _if loc _isnt _unset
	   _then >> loc.name
	   _else >> ""
	   _endif 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_local_assignment.reset()
	.local_nodes.empty()
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_local_assignment.set_gather(p_node)
	##
	.gather? << _true
	.local_nodes.add_first(p_node)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_local_assignment.append_local(p_node)
	##
	assert(p_node _isnt _unset)
	.local_nodes.add_first(p_node)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_local_assignment.accept_body_visitor(visitor)
	.expression.accept_body_visitor(visitor)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_local_assignment.name
	>> .local_nodes[1].name
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_local_assignment.is_type?(p_type)
	##
	>> .local_nodes[1].is_type?(p_type)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_local_assignment.unpop()
	##
	.expression << .expression.expression
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_local_assignment.is_declare?
	## 
	_local declare? << _false
	_for i_node _over .local_nodes.fast_elements()
	_loop
		_if i_node.is_local_declaration?
		_then
			declare? << _true
		_endif
	_endloop
	>> declare?
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_local_assignment.decode_on(p_stream)

	_if .local_nodes.empty?
	_then
		.expression.decode_expression_on( p_stream )
		_return 
	_endif

	_local declare? << _self.is_declare?
	
	_local gather? << .gather? _or .expression.is_gathered?

	_if gather?
	_then
		_if declare? _then p_stream.write( " _local " ) _endif 
		p_stream.write( "(" )
		_local comma? << _false 
		_for i_node _over .local_nodes.fast_elements()
		_loop
			_if comma?^<<_true _then p_stream.write(", ") _endif
			_if i_node _is .local_nodes.last
			_then
				p_stream.write( "_gather " )
			_endif 
			i_node.decode_none_declaring_on( p_stream )
		_endloop 
		p_stream.write( ")" ) 
	_else 
		par? << .local_nodes.size>1
		_if .local_nodes.empty?.not
		_then
			_if declare? _then p_stream.write( " _local " ) _endif 
			_if par? _then p_stream.write( "(" ) _endif
			_local comma? << _false 
			_for i_node _over .local_nodes.fast_elements()
			_loop
				_if comma?^<<_true _then p_stream.write(", ") _endif
				_if declare?
				_then 
					i_node.decode_none_declaring_on( p_stream )
				_else
					i_node.decode_on( p_stream )
				_endif 
			_endloop 
			_if par? _then p_stream.write( ")" ) _endif 
		_endif
	_endif 
	
	p_stream.write( " << " )
	.expression.decode_expression_on( p_stream )
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_local_assignment.is_local_assignment?
	_return _true
_endmethod
$

