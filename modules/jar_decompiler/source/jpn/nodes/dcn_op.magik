_package deco
$

#remex(:dcn_op)
$

_pragma(classify_level=restricted, topic={decompiler})
## node for an operator, either binary or unary.
def_slotted_exemplar(:dcn_op,
		     {
			     {:operator, _unset, :readable},
			     {:operand1, _unset, :readable},
			     {:operand2, _unset, :readable}
		     }, :dcn_base)
$

_pragma(classify_level=restricted, topic={decompiler})
## Set to false because self decodes to "(a op b)" and with the
## parenthesis this is a compound statement.
dcn_op.define_shared_constant(:compound?, _false , :private)
$

_pragma(classify_level=restricted, topic={decompiler})
dcn_op.define_shared_constant(
	:allowed_operators, equality_set.new_with("_not","+","-","/","*","**","_div","_mod","_and","_andif","_orif","_or","=","~=", "_cf","<","<=",">",">=","_xor","_is","_isnt"),
	:private )
$

_pragma(classify_level=restricted, topic={decompiler})
dcn_op.define_shared_constant(
	:not_operators, equality_hash_table.new_with(
				"=","~=",
				"~=","=",
				"<", ">=",
				"<=",">",
				">","<=",
				">=","<",
				"_is","_isnt",
				"_isnt","_is"),
	:private )
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_op.new(operator, oper1, _optional oper2)
	##
	_return _clone.init(operator, oper1, oper2)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_op.init(operator, oper1, oper2)
	##
	assert(oper1 _isnt _unset)
	assert(oper2 _isnt _unset)
	assert(_self.allowed_operators.includes?(operator))
	.operator << operator
	.operand1 << oper1
	.operand2 << oper2
	_return _self
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_op.operand1 << op
	##
	.operand1 << op
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_op.operand2 << op
	##
	.operand2 << op
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_op.new_orif(left)
	##
	_return _self.new(:orif, left, .operand1)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_op.not
	##
	## Return a copy that the inverse operator.
	##
	_local not_op << _self.not_operators[.operator]
	>> _if not_op _isnt _unset
	   _then
		   >> dcn_op.new(not_op, .operand1, .operand2)
	   _else
		   >> dcn_not.new(_self)
	   _endif 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_op.accept_body_visitor(visitor)
	##
	.operand1.accept_body_visitor(visitor)
	.operand2.accept_body_visitor(visitor)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_op.contains_not?
	_return .operator _is :not
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_op.decode_on(p_stream)
	p_stream.write( "(" )
	.operand1.decode_expression_on( p_stream )
	p_stream.write( " " )
	p_stream.write( .operator)
	p_stream.write( " " )
	.operand2.decode_expression_on( p_stream )
	p_stream.write( ")" )
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_op.show_on( p_stream )
	p_stream.write(_self.class_name, "(", .operand1, " ", .operator, " ", .operand2, ")" )
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_op.is_op?
	##
	>> _true 	
_endmethod
$
