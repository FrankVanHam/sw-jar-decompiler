_package deco
$

#remex(:dcn_callable)
$

_pragma(classify_level=restricted, topic={decompiler})
## The base for a magik method or a magik proc.
def_slotted_exemplar( :dcn_callable,
		      {
			      {:java_class_name,   _unset, :readable},
			      {:java_method_name,  _unset, :readable},
			      {:body,              _unset, :readable},
			      {:args,              _unset, :readable},
			      {:scatter?,          _unset, :readable},
			      {:nr_args,           _unset, :readable},
			      {:nr_mandatory_args, _unset, :readable}
		      }, :dcn_base )
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_callable.new(p_class_name, p_method_name, p_args, p_scatter?, p_body)
	_return _clone.init(p_class_name, p_method_name, p_args, p_scatter?, p_body)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_callable.init(p_class_name, p_method_name, p_args, p_scatter?, p_body)
	.java_class_name  << p_class_name
	.java_method_name << p_method_name
	.body     << p_body
	.args     << p_args
	.scatter? << p_scatter?
	.nr_args  << p_args.size
	.nr_mandatory_args << .nr_args
	>> _self 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_callable.match_java?(p_class_name, p_method_name)
	##
	>> .java_class_name = p_class_name _andif
		.java_method_name = p_method_name
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_abstract _method dcn_callable.bind()
	## 
	## 
	
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_callable.accept_body_visitor(p_visitor)
	
	.body.accept_body_visitor(p_visitor)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_callable.decode_body_on(p_stream)	
	_if _not .body.empty?
	_then
		p_stream.indent(4)
		.body.decode_on(p_stream)
		p_stream.unindent(4)
	_endif 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_callable.int!decode_args_on(p_stream, p_start_index)
	##
	_local comma? << _false
	_for i_idx, i_arg _over .args.fast_keys_and_elements()
	_loop
		_if i_idx >= p_start_index
		_then 
			_if (comma?^<<_true) _then p_stream.write(", ") _endif
			
			_if .nr_mandatory_args = i_idx
			_then
				p_stream.write("_optional ")
			_endif
			_if .scatter? _andif i_idx=.args.size
			_then
				p_stream.write("_gather ")
			_endif 
			
			p_stream.write(i_arg)
		_endif 
	_endloop 
_endmethod
$
