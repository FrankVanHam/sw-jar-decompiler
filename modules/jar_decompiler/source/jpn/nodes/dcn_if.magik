_package deco
$

#remex(:dcn_if)
$
_pragma(classify_level=restricted, topic={decompiler})
##
## Node for a if statement.
##
def_slotted_exemplar(:dcn_if,
		     {
			     # list of vectors {{condition, body}}
			     # If the last has no condition, that is the 'else' part.
			     #
			     {:input, _unset, :readable}
		     }, :dcn_base)
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_if.new(p_input)
	##
	>> _clone.init(p_input)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_if.init(p_input)
	##
	.input << rope.new_from(p_input)
	>> _self 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_if.convert_to_not_with_body(p_body)
	##
	## In-situ convert to an inverse condition with the give P_BODY
	#
	.input[1][1] << .input[1][1].not
	.input[1][2] << p_body
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_if.taxonomy_includes?
	##
	## Answer if this if statement includes the test "taxonomy_includes?()"
	#
	_local exp << _if _self.condition.is_not?
		      _then >> _self.condition.expression
		      _else >> _self.condition
		      _endif
	>> _if exp.is_send?
	   _then >> exp.name = "taxonomy_includes?()"
	   _else >> _false
	   _endif 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_if.break_tag
	##
	## Return the tag in the last break statements.
	#
	_local sts << _self.then.statements
	_if sts.empty?.not
	_then
		_local n << sts.last
		_if n.is_break?
		_then
			_return n.name
		_endif
	_endif 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_if.taxonomy_conditions
	_local cnds << rope.new()
	_for i_branch _over _self.self_and_nested()
	_loop
		cnds.add(i_branch.local_taxonomy_condition)
	_endloop
	>> cnds
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_if.local_taxonomy_condition
	>> _self.local_taxonomy_condition(_self.condition)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_if.local_taxonomy_condition(p_condition)
	_local exp << _if p_condition.is_not?
		      _then >> p_condition.expression
		      _else >> p_condition
		      _endif
	>> exp.args[1].string_value
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_if.contains_throw?
	_for i_branch _over _self.self_and_nested()
	_loop
		_if i_branch.contains_local_throw?
		_then
			_return _true
		_endif
	_endloop
	_return _false
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_if.contains_not?
	## 
	>> _self.condition.is_not?
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_if.contains_local_throw?
	_local sts << _self.then.statements
	_if sts.empty?.not
	_then
		_local n << sts.last
		_if n.is_throw?
		_then
			_return _true
		_endif
	_endif
	_return _false 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _iter _method dcn_if.self_and_nested()
	## 
	_local b << _self
	_loop
		_loopbody(b)
		_local sts << b.then.statements
		_if sts.empty?.not
		_then
			_local n << sts.last
			_if n.is_if?
			_then
				b << n
			_else
				_leave 
			_endif
		_else
			_leave 
		_endif
	_endloop 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_if.condition
	## 
	>> .input[1][1]
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_if.condition << p_condition
	##
	## In-situ set the if condition
	#
	.input[1][1] << p_condition
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_if.then
	## 
	>> .input[1][2]
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_if.just_if?
	##
	>> .input.size = 1
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_if.accept_body_visitor(p_visitor)
	_for i_tag, i_cond, i_body _over _self.condition_and_bodies()
	_loop
		i_body.accept_body_visitor(p_visitor)
	_endloop 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_if.decode_on(p_stream)
	_for i_tag, i_cond, i_body _over _self.condition_and_bodies()
	_loop
		_if i_tag = :if
		_then
			p_stream.write( "_if ")
			_if i_cond _isnt _unset
			_then 
				i_cond.decode_on(p_stream)
			_else
				p_stream.write( "()")
			_endif 
			p_stream.newline()
			_self.decode_body(i_body, "_then", p_stream)
		_elif i_tag = :elif
		_then
			p_stream.newline()
			p_stream.write( "_elif ")
			_if i_cond _isnt _unset
			_then 
				i_cond.decode_on(p_stream)
			_else
				p_stream.write( "()")
			_endif 
			p_stream.newline()
			_self.decode_body(i_body, "_then", p_stream)
		_else
			p_stream.newline()
			_self.decode_body(i_body, "_else", p_stream)
		_endif
	_endloop 
	p_stream.newline()
	p_stream.write("_endif")
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_iter _method dcn_if.condition_and_bodies()
	_for i_index, i_vec _over .input.fast_keys_and_elements()
	_loop
		_local (cond, body) << (_scatter i_vec)
		_local tag << _if i_index = 1
			      _then >> :if
			      _elif cond _isnt _unset
			      _then >> :elif
			      _else >> :else
			      _endif
		_loopbody(tag, cond, body)
	_endloop 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_if.decode_body(p_body, p_keyword, p_stream)
	p_stream.write(p_keyword)
	p_stream.indent(4)
	p_stream.newline()
	p_body.decode_on(p_stream)
	p_stream.unindent(4)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_if.is_if?
	##
	>> _true 
_endmethod
$
