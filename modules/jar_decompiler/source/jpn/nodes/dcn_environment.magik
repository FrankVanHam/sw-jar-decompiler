_package deco
$

#remex(:dcn_environment)

_pragma(classify_level=restricted, topic={jar_decompiler})
##
## Captures the information in the annotation and the dynamic
## setting and getting of the values in the __env__ value in
## the decompiled java code.
##
## It is a mix of information: The annotation gives the
## variable name (.var_names), but the java code sets and gets
## the variables in the __env__
##
def_slotted_exemplar(:dcn_environment,
	{
		{:var_names, _unset},
		{:cache,     _unset}
	})
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method dcn_environment.new()
	##
	>> _clone.init()
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_private _method dcn_environment.init()
	##
	.var_names << equality_property_list.new()
	.cache     << equality_property_list.new()
	 >> _self 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method dcn_environment.empty()
	##
	.var_names.empty()
	.cache.empty()
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method dcn_environment.set_var_name(p_index, p_value)
	##
	## Set the variable names (as read in the annotation).
	#
	.var_names[p_index] << p_value
	.cache.remove_key(p_index)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method dcn_environment.reset(p_index, p_var)
	.cache[p_index] << p_var
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method dcn_environment.store(p_index, p_exp)
	.cache[p_index] << p_exp
	>> .var_names[p_index]
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method dcn_environment.fetch(p_index)
	
	_local name << .var_names[p_index]
	_local loc << .cache[p_index]
	>> name, loc
_endmethod
$
