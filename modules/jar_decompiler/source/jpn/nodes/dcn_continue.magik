_package deco
$

#remex(:dcn_continue)
$

_pragma(classify_level=restricted, topic={decompiler})
## Node for a continue structure.
def_slotted_exemplar( :dcn_continue,
		       {
			       {:results, _unset, :writable},
			       {:tag,     _unset, :writable}
		       }, :dcn_base)
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_continue.new(_optional p_tag, _gather p_results)
	_return _clone.init(p_tag, _scatter p_results)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_continue.init(p_tag, _gather p_results)
	.tag << p_tag
	.results << p_results
	_return _self 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_continue.empty_results()
	.results << {}	
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_continue.decode_on( p_stream )
	_if .tag _isnt _unset 
	_then
		p_stream.write("_continue @", .tag)
	_else 
		p_stream.write("_continue")
	_endif
	_if _not .results.empty?
	_then
		p_stream.write( " _with ")
		_self.decode_list_on(p_stream, .results)
	_endif 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_continue.is_continue?
	##
	>> _true 
_endmethod
$
