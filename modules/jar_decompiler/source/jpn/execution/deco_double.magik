_package deco
$

_pragma(classify_level=restricted, topic={jar_decompiler})
def_slotted_exemplar(:deco_double, {}, :deco_execution_base)
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method deco_double.valueof(p_parser, p_node)
	_local val << p_parser.parse_expression(p_node)
	>> dcn_constant.new_number(val.string_value)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method deco_double.positive_infinity(p_parser)
	##
	>> dcn_constant.new_literal("float.infinity")
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method deco_double.negative_infinity(p_parser)
	##
	>> dcn_constant.new_literal("float.negative_infinity")
_endmethod
$
_pragma(classify_level=restricted, topic={jar_decompiler})
_method deco_double.nan(p_parser)
	##
	>> dcn_constant.new_literal("NaN")
_endmethod
$
