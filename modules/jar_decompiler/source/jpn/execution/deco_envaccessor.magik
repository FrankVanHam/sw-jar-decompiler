_package deco
$

#remex(:deco_envaccessor)


_pragma(classify_level=restricted, topic={jar_decompiler})
def_slotted_exemplar(:deco_envaccessor,
	{}, :deco_execution_base)
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method deco_envaccessor.bootstrapreseter(p_parser, p_action, p_var, p_env, p_index)
	##
	# Like:
	# EnvAccessor.bootstrapReseter("resetEnv", (Object)_self, (Object[])__env__, (int)1);
	#
	# in this example: the variable self is set at 1.
	#
	#
	_if p_action.string_value = "resetEnv"
	_then 
		_local var << p_parser.parse_expression(p_var)
		_local index << p_parser.parse_expression(p_index)
		
		p_parser.current_environment.reset(index.string_value, var)
	_endif 
	>> dcn_no_op.new()
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method deco_envaccessor.bootstrapstorer(p_parser, p_action, p_exp, p_env, p_index)
	##
	# Like:
	# EnvAccessor.bootstrapStorer("storeEnv", (Object)ConstantBuilder.stringBootstrap("string", "hoi"), (Object[])__env__, (int)1);
	#
	# in this example: the string "hoi" is set at index 1.
	#
	_if p_action.string_value = "storeEnv"
	_then
		_local index << p_parser.parse_expression(p_index)
		_local exp << p_parser.parse_expression(p_exp)
		
		_local name << p_parser.current_environment.store(index.string_value, exp)
		
		_if name _isnt _unset
		_then 
			_local left  << dcn_local.new(name)
			_local right << p_parser.parse_expression(p_exp)
			
			_return dcn_local_assignment.new(left, right)
		_else
			_return dcn_no_op.new()
		_endif 
	_endif 
	_return dcn_no_op.new()
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method deco_envaccessor.bootstrapfetcher(p_parser, p_action, p_env, p_index)
	##
	# Like:
	# EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)1)
	#
	# in this example: the value at index 1 is returned. Either the
	# name of the variable is returned or an actual stored value.
	#
	_if p_action.string_value = "fetchEnv"
	_then
		_local index << p_parser.parse_expression(p_index)
		_local (name, loc) << p_parser.current_environment.fetch(index.string_value)

		_if name _isnt _unset
		_then
			_return dcn_local.new(name)
		_else
			_return loc
		_endif
	_else 
		_return dcn_no_op.new()
	_endif 
_endmethod
$

