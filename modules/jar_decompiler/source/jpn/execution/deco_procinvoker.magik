_package deco
$

#remex(:deco_procinvoker)

def_slotted_exemplar(:deco_procinvoker, {}, :deco_execution_base)
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method deco_procinvoker.bootstrap(p_parser, p_brackets, p_value_node _gather p_arg_nodes)

	_local value << p_parser.parse_expression(p_value_node)
	_local args << p_parser.parse_args(p_arg_nodes)
	>> dcn_call.new(value, args)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method deco_procinvoker.tuplebootstrap(p_parser, p_brackets, p_value_node _gather p_arg_nodes)

	_local value << p_parser.parse_expression(p_value_node)
	_local args << p_parser.parse_args(p_arg_nodes)
	>> dcn_call.new(value, args)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method deco_procinvoker.naturalbootstrap(p_parser, p_brackets, p_value_node, _gather p_arg_nodes)
	##
	_local (value, env) << p_parser.parse_expression(p_value_node)
	_local args << p_parser.parse_args(p_arg_nodes)	
	>> dcn_call.new(value, args, env)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method deco_procinvoker.iternaturalbootstrap(p_parser, p_brackets, p_method_handler_node,
					      p_env, p_call_node, _gather p_arg_nodes)
	## 
	>> p_parser.parse_iter_proc(p_method_handler_node,
				    p_env, p_call_node, _scatter p_arg_nodes)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method deco_procinvoker.itertuplebootstrap(p_parser, p_brackets, p_method_handler_node,
					      p_env, p_call_node, _gather p_arg_nodes)
	## 
	>> p_parser.parse_iter_proc(p_method_handler_node,
				    p_env, p_call_node, _scatter p_arg_nodes)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method deco_procinvoker.iterbootstrap(p_parser, p_brackets, p_method_handler_node,
					      p_env, p_call_node, _gather p_arg_nodes)
	## 
	>> p_parser.parse_iter_proc(p_method_handler_node,
				    p_env, p_call_node, _scatter p_arg_nodes)
_endmethod
$
