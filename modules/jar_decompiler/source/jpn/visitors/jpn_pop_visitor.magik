_package deco
$

_pragma(classify_level=restricted, topic={jar_decompiler})
##
## Handles pop() and remainder() Java statements that
## manipulates the result of return values.
##
def_slotted_exemplar(:jpn_pop_visitor,{})
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_pop_visitor.new()
	>> _clone 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_pop_visitor.accept(p_body)
	##
	_local sts << p_body.statements
	_local result << _unset
	_local result_reset? << _false 
	_for i_index, i_node _over sts.fast_keys_and_elements()
	_loop
		_if _self.is_remainder?(i_node) _andif (result _isnt _unset)
		_then
			# A remainder statement means to ignore the previous results.
			_if result_reset?.not
			_then
				result.reset()
				result_reset? << _true
			_endif 
			sts[i_index] << dcn_no_op.new()
			
		_elif _self.is_remainder_assignment?(i_node) _andif (result _isnt _unset)
		_then
			#
			# Object[] c = resultTuple.remainder(2);
			#
			# translate to (... gather c) << (scatter resultTuple)
			#
			_if result_reset?.not
			_then
				result.reset()
				result_reset? << _true
			_endif
			result.set_gather(i_node.single_local)
			sts[i_index] << dcn_no_op.new()
			
		_elif _self.is_pop_assignment?(i_node) _andif (result _isnt _unset)
		_then
			#
			# Object b = resultTuple.pop();
			#
			# translates to (.., b) << (scatter resultTuple)
			#
			_if result_reset?.not
			_then
				result.reset()
				result_reset? << _true
			_endif
			result.append_local(i_node.single_local)
			sts[i_index] << dcn_no_op.new()
			
		_elif _self.is_result_tuple?(i_node)
		_then
			#
			# Set the target for the pop() and remainders
			#
			# This should be the last _elif in the chain
			#
			result << i_node
			result_reset? << _false
			
		_endif 
	_endloop

	_self.clear_all_pops(sts)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_private _method jpn_pop_visitor.clear_all_pops(p_sts)
	## 
	_for i_index, i_node _over p_sts.fast_keys_and_elements()
	_loop
		_if _self.is_pop_assignment?(i_node)
		_then
			i_node.unpop()
		_endif 
	_endloop 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_pop_visitor.is_remainder?(p_node)
	>> p_node.is_remainder?
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_pop_visitor.is_remainder_assignment?(p_node)
	##
	_if p_node.is_local_assignment?
	_then
		_local loc << p_node.single_local
		_if loc _isnt _unset
		_then
			_return p_node.expression.is_remainder?
		_else
			_return _false
		_endif 
	_else
		_return _false
	_endif 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_pop_visitor.is_pop_assignment?(p_node)
	##
	_if p_node.is_local_assignment?
	_then
		_local loc << p_node.single_local
		_if loc _isnt _unset
		_then
			_return p_node.expression.is_pop?
		_else
			_return _false
		_endif 
	_else
		_return _false
	_endif 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_pop_visitor.is_result_tuple?(p_node)
	##
	_if p_node.is_local_assignment?
	_then
		_local loc << p_node.single_local
		_if (loc _isnt _unset)
		_then
			_return loc.is_type?("ResultTuple") _orif loc.is_type?("Object")
		_else
			_return _false
		_endif 
	_else
		_return _false
	_endif 
_endmethod
$
