_package deco
$

#remex(:jpn_clean_unfinished_try_visitor)

_pragma(classify_level=restricted, topic={jar_decompiler})
##
## Any unfinished try will be converted to just the code in the try_block.
## Obviously this is the last resort after all other
## conversions have failed.
##
def_slotted_exemplar(:jpn_clean_unfinished_try_visitor,
	{})
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_clean_unfinished_try_visitor.new()
	>> _clone
_endmethod
$
_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_clean_unfinished_try_visitor.accept(p_body)
	##
	_local sts << p_body.statements
	_loop
		_local idx << _self.index_to_clean(sts)
		_if idx _is _unset _then _leave _endif

		_self.clean_index(sts, idx)
	_endloop
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_clean_unfinished_try_visitor.index_to_clean(p_sts)
	## 
	_for i_index, i_node _over p_sts.keys_and_elements()
	_loop
		_if _self.must_clean?(i_node)
		_then
			_return i_index
		_endif
	_endloop
	_return _unset 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_clean_unfinished_try_visitor.clean_index(p_sts, p_index)
	##
	_local try_node << p_sts[p_index]
	p_sts.remove_nth(p_index)
	p_sts.insert(p_index, try_node.try_body.statements)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_clean_unfinished_try_visitor.must_clean?(p_node)
	##
	_if p_node.is_unfinished_try?.not _then _return _false _endif
	_if p_node.catch_body _is _unset _then _return _false _endif

	_return _true
_endmethod
$
