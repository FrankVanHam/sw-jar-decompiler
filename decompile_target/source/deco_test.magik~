_package user
$

remex(:deco_test)
$

_pragma(classify_level=restricted, topic={jar_decompiler})
def_slotted_exemplar(:deco_test,
	{},
	:model)
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method deco_test.try_1_1_1()
	##
	_self.before()
	_try _with c1

		_self.try()

	_when error
		_self.error(c1)

	_when warning
		_self.error1(c1)

	_when directory_invalid_path
		_self.error2(c1)
	_endtry
	_self.after()		
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method deco_test.try_1_1_0()
	##
	_self.before()
	_try _with c1

		_self.try()

	_when error
		_self.error(c1)

	_when warning
		_self.error1(c1)
	_endtry
	_self.after()		
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method deco_test.try_1_0_0()
	##
	_self.before()
	_try _with c1

		_self.try()

	_when error
		_self.error(c1)
	_endtry
	_self.after()		
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method deco_test.try_2_2_2()
	##
	_self.before()
	_try _with c1

		_self.try()

	_when error, information
		_self.error(c1)

	_when warning, bad_user_bookmarks
		_self.error1(c1)

	_when directory_invalid_path, directory_not_selected
		_self.error2(c1)
	_endtry
	_self.after()		
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method deco_test.try_2_2_1()
	##
	_self.before()
	_try _with c1

		_self.try()

	_when error, information
		_self.error(c1)

	_when warning, bad_user_bookmarks
		_self.error1(c1)

	_when directory_invalid_path
		_self.error2(c1)
	_endtry
	_self.after()		
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method deco_test.try_2_2_0()
	##
	_self.before()
	_try _with c1

		_self.try()

	_when error, information
		_self.error(c1)

	_when warning, bad_user_bookmarks
		_self.error1(c1)
	_endtry 
	_self.after()		
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method deco_test.try_2_1_0()
	##
	_self.before()
	_try _with c1

		_self.try()

	_when error, information
		_self.error(c1)

	_when warning
		_self.error1(c1)
	_endtry 
	_self.after()		
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method deco_test.try_2_0_0()
	##
	_self.before()
	_try _with c1

		_self.try()

	_when error, information
		_self.error(c1)
	_endtry 
	_self.after()		
_endmethod
$
