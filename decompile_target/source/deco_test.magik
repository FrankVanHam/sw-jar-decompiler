_package user
$

def_slotted_exemplar(:deco_test,{})
$

_method deco_test.test_all_operators(a, b)
	c << a + b
	_self.use(c)
	c << a - b
	_self.use(c)
	c << a * b
	_self.use(c)
	c << a / b
	_self.use(c)
	c << a _div b
	_self.use(c)
	c << a _mod b
	_self.use(c)
	c << a ** b
	_self.use(c)
	c +<< b
	_self.use(c)
	c -<< b
	_self.use(c)
	c *<< b
	_self.use(c)
	c /<< b
	_self.use(c)
	c _div<< b
	_self.use(c)
	c _mod<< b
	_self.use(c)
	c **<< b
	
	_self.use(c)
_endmethod
$

_method deco_test.test_compare_operators(a, b)
	c << a < b
	_self.use(c)
	c << a <= b
	_self.use(c)
	c << a > b
	_self.use(c)
	c << a >= b
	_self.use(c)
	c << a = b
	_self.use(c)
	c << a ~= b
	_self.use(c)
	c << a <> b
	_self.use(c)
	c << a _is b
	_self.use(c)
	c << a = b
	_self.use(c)
	c << a _isnt b
	_self.use(c)
	c << a _cf b	
	_self.use(c)
_endmethod
$

_method deco_test.test_logical_operators(a, b)
	c << a _and  b
	_self.use(c)
	c << a _andif b
	_self.use(c)
	c << a _or b
	_self.use(c)
	c << a _orif b
	_self.use(c)
	c << a _xor b
	_self.use(c)
	c _and<<  b
	_self.use(c)
	c _or<< b
	_self.use(c)
	c _xor<< b
	_self.use(c)
_endmethod
$

_method deco_test.test_unary_operators(a, b)
	c << _not b
	_self.use(c)
	c << ~ b	
	_self.use(c)
_endmethod
$

_method deco_test.test_operator(a, b)
	c << a + b
	_self.use(c)
_endmethod
$


_method deco_test.test_operator_and_constant(a, b)
	c << a + b + 10
	_self.use(c)
_endmethod
$

_method deco_test.test_operator_and_method(a, b)
	c << a + _self.value + b
	_self.use(c)
_endmethod
$

_method deco_test.test_method_operator(a, b)
	_self.use(a + b)
_endmethod
$

_method deco_test.test_if_operator(a, b)
	_if (a + b) > 10
	_then
		_self.do_a()
	_else
		_self.do_b()
	_endif 
_endmethod
$

_method deco_test.test_return_operator(a, b)
	_return (a + b)
_endmethod
$

