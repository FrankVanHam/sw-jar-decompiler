_package deco
$

_pragma(classify_level=restricted, topic={jar_decompiler})
def_slotted_exemplar(:jpn_assign_in_branch_visitor,{})
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_assign_in_branch_visitor.new()
	>> _clone 
_endmethod
$


_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_assign_in_branch_visitor.accept(p_body)
	##
	_loop
		_local did? << _self.try_accept(p_body)
		_if did?.not _then _leave _endif 
	_endloop 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_assign_in_branch_visitor.try_accept(p_body)
	##
	_local sts << p_body.statements
#	_global x
#	x << sts
#	3232.stop
	_for i_index, i_node _over sts.fast_keys_and_elements()
	_loop
		_if i_index+1 <= sts.size
		_then
			n1 << sts[i_index+0]
			n2 << sts[i_index+1]
			_if _self.merge_assign_and_branch?(n1,n2)
			_then
				sts[i_index+0] << dcn_no_op.new()
				sts[i_index+1] << _self.merge_assign_and_branch(n1,n2)
				_return _true
			_endif
		_endif
	_endloop
	_return _false 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_assign_in_branch_visitor.merge_assign_and_branch?(n1,n2)
	##
	_if n1.is_class_of?(dcn_local_assignment).not _then _return _false, :no_local_assignment1 _endif
	_if n2.is_class_of?(dcn_branch).not _then _return _false, :no_branch _endif

	_local a_local << n1.only_local()
	_if a_local _is _unset _then _return _false, :no_single_local_1 _endif
	_local exp1 << n1.expression
	_local local_name << a_local.name

	_if local_name.matches?("callSite*").not _then _return _false, :no_call_site _endif 
	
	_local c_loc << n2.if_condition
	_if c_loc.is_class_of?(dcn_local).not _then _return _false, :condition_should_be_local _endif
	_if c_loc.name <> local_name _then _return _false, :condition_should_be_known_name _endif

	_return _true 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_assign_in_branch_visitor.merge_assign_and_branch(n1,n2)
	n2.if_condition << n1.expression
	>> n2
_endmethod
$
