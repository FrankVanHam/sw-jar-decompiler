_package deco
$

_pragma(classify_level=restricted, topic={jar_decompiler})
def_slotted_exemplar(:jpn_cleanup_visitor,{})
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_cleanup_visitor.new()
	>> _clone 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_cleanup_visitor.accept(p_body)
	##
	_local sts << p_body.statements
	_for i_index, i_node _over sts.fast_keys_and_elements()
	_loop
		_if i_node.is_kind_of?(dcn_pop) 
		_then sts[i_index] << dcn_no_op.new() _endif 
#		_if i_node.is_kind_of?(dcn_remainder) _orif
#		    i_node.is_kind_of?(dcn_pop) 
#		_then sts[i_index] << dcn_no_op.new() _endif 
	_endloop 
_endmethod
$
