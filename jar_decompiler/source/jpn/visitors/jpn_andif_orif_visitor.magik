_package deco
$

_pragma(classify_level=restricted, topic={jar_decompiler})
##
## Finds hidden andif and orif constructions.
##
def_slotted_exemplar(:jpn_andif_orif_visitor,{})
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_andif_orif_visitor.new()
	>> _clone 
_endmethod
$


_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_andif_orif_visitor.accept(p_body)
	## 
	_loop
		_local did? << _self.try_accept(p_body)
		_if did?.not _then _leave _endif
	_endloop
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_andif_orif_visitor.try_accept(p_body)
	##
	_for sts, idx1, idx2, i_node _over p_body.pair_of_nodes()
	_loop
		n1 << sts[idx1]
		n2 << sts[idx2]
		_if _self.is_andif?(n1, n2)
		_then
			sts[idx1] << dcn_no_op.new()
			sts[idx2] << _self.convert_to_andif(n1,n2)
			_return _true
			
		_elif _self.is_andif_andif?(n1, n2)
		_then
			sts[idx1] << dcn_no_op.new()
			sts[idx2] << _self.convert_to_andif_andif(n1,n2)
			_return _true
			
		_elif _self.is_orif?(n1, n2)
		_then
			sts[idx1] << dcn_no_op.new()
			sts[idx2] << _self.convert_to_orif(n1,n2)
			_return _true
			
		_elif _self.is_orif_orif?(n1, n2)
		_then
			sts[idx1] << dcn_no_op.new()
			sts[idx2] << _self.convert_to_orif_orif(n1,n2)
			_return _true
			
		_elif _self.is_andif_orif?(n1, n2)
		_then
			sts[idx1] << dcn_no_op.new()
			sts[idx2] << _self.convert_to_andif_orif(n1,n2)
			_return _true
			
		_elif _self.merge_assign_and_branch?(n1,n2)
		_then 
			sts[idx1] << dcn_no_op.new()
			sts[idx2] << _self.merge_assign_and_branch(n1,n2)
			_return _true	
		_endif 
	_endloop
	_return _false 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_andif_orif_visitor.is_andif_orif?(n1, n2)
	##
	## are these two statements n1 and n2 implementing:
	## (A andif B) orif C
	##
	_if n1.is_local_assignment?.not _then _return _false, :no_local_assignment1 _endif
	_if n2.is_if?.not _then _return _false, :no_branch _endif

	_local a_local << n1.single_local
	_if a_local _is _unset _then _return _false, :no_single_local_1 _endif
	
	_local local_name << a_local.name
	_if n2.just_if?.not _then _return _false, :not_just_only_if _endif
	
	_local c_loc << n2.condition
	_if c_loc.is_op?.not _then _return _false, :not_operator _endif
	_if c_loc.operator <> "_and" _then _return _false, :no_and _endif
	_if c_loc.operand1.is_local?.not _then _return _false, :no_left_local _endif
	_if c_loc.operand2.is_not?.not _then _return _false, :no_right_not _endif

	_if c_loc.operand2.expression.is_local_assignment?.not _then _return _false, :no_right_not_assignment _endif
	_if c_loc.operand2.expression.single_name <> local_name _then _return _false, :no_right_assign_callsite _endif

	_local ass << n2.then.statements
	_if ass.size <> 1 _then _return _false, :not_1_assignment _endif
	
	_local ass_assign << ass[1]
	_if ass_assign.is_local_assignment?.not _then _return _false, :no_assignment_ass _endif
	_if ass_assign.single_name <> local_name _then _return _false, :no_right_branch_callsite _endif
	
	_return _true 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_andif_orif_visitor.convert_to_andif_orif(n1, n2)
	##
	exp2 << n2.condition.operand2.expression.expression
	exp3 << n2.then.statements[1].expression
	n1.expression << dcn_op.new("_andif", n1.expression,
				    dcn_op.new("_orif", exp2, exp3))
	>> n1
_endmethod
$


_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_andif_orif_visitor.is_andif?(n1, n2)
	##
	## are these two statements n1 and n2 implementing:
	## A andif B.
	##
	_if n1.is_local_assignment?.not _then _return _false, :no_local_assignment1 _endif
	_if n2.is_if?.not _then _return _false, :no_branch _endif
		
	_local local_name << n1.single_name
	_if n2.just_if?.not _then _return _false, :not_just_only_if _endif
	
	_local c_loc << n2.condition
	_if c_loc.is_local?.not _then _return _false, :condition_should_be_local _endif
	_if c_loc.name <> local_name _then _return _false, :condition_should_be_known_name _endif
	
	_local stats << n2.then.statements
	_if stats.size <> 1 _then _return _false, :branch_body_size_should_be_1 _endif
	
	_local ass << stats[1]
	_if ass.is_local_assignment?.not _then _return _false, :branch_body_is_assign _endif
	
	_local b_local << ass.single_local
	_if b_local _is _unset _then _return _false, :branch_body_is_no_local_assign _endif
	_if b_local.name <> local_name _then _return _false, :branch_body_local_name_incorrect _endif
	_local exp2 << ass.expression
	_return _true 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_andif_orif_visitor.convert_to_andif(n1, n2)
	##
	_local a_local << n1.single_local
	_local exp1 << n1.expression
	_local exp2 << n2.then.statements[1].expression

	n1.expression << dcn_op.new("_andif", exp1, exp2)
	>> n1
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_andif_orif_visitor.is_andif_andif?(n1, n2)
	##
	## are these two statements n1 and n2 implementing:
	## (A andif B) andif C.
	##
	_if n1.is_local_declaration?.not _then _return _false, :no_local_assign1 _endif
	_if n2.is_if?.not _then _return _false, :no_branch _endif
	
	_local local_name << n1.name
	_if n2.just_if?.not _then _return _false, :not_just_only_if _endif
	
	_local c_loc << n2.condition
	_if c_loc.is_op?.not _then _return _false, :condition_should_be_op _endif
	_if c_loc.operand2.is_local_assignment?.not _then _return _false, :right_operator_isnt_assignment _endif
	
	_local ass << c_loc.operand2
	_if ass.is_local_assignment?.not _then _return _false, :branch_body_no_is_assign _endif
	_if ass.single_name <> local_name _then _return _false, :branch_body_local_name_incorrect _endif

	_local stats << n2.then.statements
	_if stats.size <> 1 _then _return _false, :branch_body_size_should_be_1 _endif
	 ass << stats[1]
	_if ass.is_local_assignment?.not _then _return _false, :branch_body_is_assign _endif
	_if ass.single_name <> local_name _then _return _false, :branch_body_local_name_incorrect _endif
	
	_return _true 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_andif_orif_visitor.convert_to_andif_andif(n1, n2)

	_local ass << n2.then.statements[1].expression
	
	_local cnd << n2.condition
	cnd.operand2 << cnd.operand2.expression

	cnd << dcn_op.new("_andif", cnd, ass)
	
	>> dcn_local_assignment.new(n1, cnd)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_andif_orif_visitor.is_orif_orif?(n1, n2)
	##
	## are these two statements n1 and n2 implementing:
	## (A orif B) andif C.
	##
	_if n1.is_local_declaration?.not _then _return _false, :no_local_assign1 _endif
	_if n2.is_if?.not _then _return _false, :no_branch _endif
	
	_local local_name << n1.name	
	_if n2.just_if?.not _then _return _false, :not_just_only_if _endif
	
	_local c_loc << n2.condition
	_if c_loc.is_not?.not _then _return _false, :condition_should_be_not _endif
	_if c_loc.expression.is_op?.not _then _return _false, :condition_should_be_op _endif
	_if c_loc.expression.operand2.is_local_assignment?.not _then _return _false, :right_operator_isnt_assignment _endif
	
	_local ass << c_loc.expression.operand2
	_if ass.is_local_assignment?.not _then _return _false, :branch_body_no_is_assign _endif
	_if ass.single_name <> local_name _then _return _false, :branch_body_local_name_incorrect _endif
	
	_local stats << n2.then.statements
	_if stats.size <> 1 _then _return _false, :branch_body_size_should_be_1 _endif
	 ass << stats[1]
	_if ass.is_local_assignment?.not _then _return _false, :branch_body_is_assign _endif
	_if ass.single_name <> local_name _then _return _false, :branch_body_local_name_incorrect _endif
	
	_return _true 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_andif_orif_visitor.convert_to_orif_orif(n1, n2)

	_local ass << n2.then.statements[1].expression

	_local cnd << n2.condition.expression # not(cnd)
	cnd.operand2 << cnd.operand2.expression

	cnd << dcn_op.new("_orif", cnd, ass)
	
	>> dcn_local_assignment.new(n1, cnd)
_endmethod
$


_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_andif_orif_visitor.is_orif?(n1, n2)
	##
	## are these two statements n1 and n2 implementing:
	## (A orif B).
	##
	_if n1.is_local_assignment?.not _then _return _false, :no_local_assignment1 _endif
	_if n2.is_if?.not _then _return _false, :no_branch _endif
	
	_local local_name << n1.single_name
	_if n2.just_if?.not _then _return _false, :not_just_only_if _endif
	
	_local c_loc << n2.condition
	_if c_loc.is_not?.not _then _return _false, :should_be_not _endif
	c_loc << c_loc.not
	_if c_loc.is_local?.not _then _return _false, :condition_should_be_local _endif
	_if c_loc.name <> local_name _then _return _false, :condition_should_be_known_name _endif
	
	_local stats << n2.then.statements
	_if stats.size <> 1 _then _return _false, :branch_body_size_should_be_1 _endif
	
	_local ass << stats[1]
	_if ass.is_local_assignment?.not _then _return _false, :branch_body_is_assign _endif
	_if ass.single_name <> local_name _then _return _false, :branch_body_local_name_incorrect _endif
	
	_return _true 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_andif_orif_visitor.convert_to_orif(n1, n2)
	##
	_local a_local << n1.single_local
	_local exp1 << n1.expression
	_local exp2 << n2.then.statements[1].expression

	n1.expression << dcn_op.new("_orif", exp1, exp2)
	>> n1
_endmethod
$


_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_andif_orif_visitor.merge_assign_and_branch?(n1,n2)
	##
	_if n1.is_local_assignment?.not _then _return _false, :no_local_assignment1 _endif
	_if n2.is_if?.not _then _return _false, :no_branch _endif

	_local local_name << n1.single_name
	_if local_name.matches?("callSite*").not _then _return _false, :no_call_site _endif 
	
	_local c_loc << n2.condition
	_local loc << _if c_loc.is_local?
		      _then >> c_loc
		      _elif c_loc.is_not? _andif c_loc.expression.is_local?
		      _then >> c_loc.expression
		      _endif 
	_if loc _is _unset _then _return _false, :condition_should_be_local _endif
	_if loc.name <> local_name _then _return _false, :condition_should_be_known_name _endif
	
	_return _true 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_andif_orif_visitor.merge_assign_and_branch(n1,n2)
	_if n2.condition.is_not?
	_then
		n2.condition << dcn_not.new(n1.expression)
	_else
		n2.condition << n1.expression
	_endif 
	>> n2
_endmethod
$
