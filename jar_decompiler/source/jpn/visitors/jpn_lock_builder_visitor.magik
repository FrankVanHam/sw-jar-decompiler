_package deco
$

#remex(:jpn_lock_builder_visitor)

_pragma(classify_level=restricted, topic={jar_decompiler})
##
##InterruptInfrastructure.checkAndProcessInterrupts();
##        synchronized (callSite) {
##            try {
##                ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("do()", (Object)_self));
##            }
##            catch (Throwable throwable) {
##                // MONITOREXIT @DISABLED, blocks:[1, 2] lbl10 : MonitorExitStatement: MONITOREXIT : var1_1
##                InterruptInfrastructure.checkAndProcessInterrupts();
##                throw throwable;
##            }
##        }
##        InterruptInfrastructure.checkAndProcessInterrupts();
##
def_slotted_exemplar(:jpn_lock_builder_visitor,
	{})
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_lock_builder_visitor.new()
	>> _clone.init()
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_private _method jpn_lock_builder_visitor.init()
	>> _self 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_lock_builder_visitor.accept(p_body)
	##
	_local sts << p_body.statements
	_local prev << _unset
#	_if sts[1].is_class_of?(dcn_no_op).not
#	_then 
#		_global x
#		x << sts
#		2.stop
#	_endif 
	_for i_index, i_node _over sts.fast_keys_and_elements()
	_loop
		_if _self.should_convert?(i_node)
		_then
			sts[i_index] << _self.convert(i_node)
		_endif 
	_endloop 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_lock_builder_visitor.should_convert?(p_node)
	##
	_if p_node.is_class_of?(dcn_synchronized).not _then _return _false, :dcn_sync _endif
	_if p_node.body _is _unset _then _return _false, :no_body _endif
	_if p_node.body.statements.empty? _then _return _false, :empty_finally _endif
	_if p_node.body.statements[1].is_unfinished_try?.not _then _return _false, :dcn_interrupts _endif
	
	>> _true 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_lock_builder_visitor.convert(p_sync_node)
	##
	_local sync_exp << p_sync_node.exp
	_local body << p_sync_node.body
	
	>> dcn_lock.new(sync_exp, body)
_endmethod
$
