_package deco
$

#remex(:jpn_try_visitor)

_pragma(classify_level=restricted, topic={jar_decompiler})
##
## create a Magik _try _handling _handling _endtry statement
##
## The Java code is complex, nested and different for different situations.
#
# The nesting structure is encapsulated in nested tblock objects.
#
##
def_slotted_exemplar(:jpn_try_visitor,
	{
		{:ordered_tags,  _unset},

		# conditions, keyed on tag
		{:conditions,    _unset},

		# when statements, keyed on tag
		{:whens,         _unset},

		# blocks, keys on tag
		{:tagged_blocks, _unset},
		
		{:blocks_used,   _unset},
		{:try_condition, _unset}
	})
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_try_visitor.new()
	>> _clone
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_try_visitor.accept(p_body)
	##
	_local sts << p_body.statements
	_for i_index, i_node _over sts.fast_keys_and_elements()
	_loop
		(ok?, tblock) << _self.convert?(i_node)
		_if ok?
		_then
			sts[i_index] << _self.convert(i_node, tblock)
		_endif
	_endloop 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_try_visitor.convert?(p_node)
	##
	_local tblock << tblock_factory.new().create(p_node)
	>> tblock _isnt _unset, tblock 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_try_visitor.convert(p_node, p_tblock)
	##
	_self.seed_slots(p_tblock)
	_self.process_blocks(p_tblock)
	
	_local highest_level_block << _self.find_highest_level_block(p_tblock)
	
	_if (p_tblock _isnt highest_level_block)
	_then
		# the highest used block is not this block, so wait for the
		# visitor to find that block
		_return p_node
	_endif 
	
	_local try_block     << _self.find_try_block(p_tblock)
	_local filtered_tags << _self.filtered_tags()
	_local conditions    << _self.create_conditions_and_bodies(filtered_tags)
	_local statements    << _self.construct_statements(conditions, try_block)
	
	_if highest_level_block.is_try?
	_then
		# If the highest block is the try block, then there is
		# remaining statements to be added
		_local after_sts << highest_level_block.after_try_statements
		statements.add_all_last(after_sts)
		highest_level_block.try_body << dcn_body.new(statements)		
		_return p_node
	_elif p_tblock _is highest_level_block
	_then
		# If the highest block is the parameter, then the block can be
		# replaced with my new statements.
		_return dcn_body.new(statements)
	_endif
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_private _method jpn_try_visitor.construct_statements(p_conditions, p_try_block)
	## 
	_local sts << rope.new()
	sts.add_all_last(_self.before_try_statements(p_try_block))
	
	_local try_sts << _self.try_statements(p_try_block)
	_local try_node << dcn_try.new(.try_condition, dcn_body.new(try_sts), p_conditions)
	
	sts.add(try_node)
	>> sts
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_private _method jpn_try_visitor.process_blocks(p_tblock)
	##
	_for i_tblock _over _self.all_blocks(p_tblock)
	_loop
		.ordered_tags.add_first(rope.new())
		_if i_tblock.taxonomy_branches?
		_then
			_for i_index, i_branch _over i_tblock.all_taxonomy_branches()
			_loop
				_if i_branch.contains_throw? _andif i_branch.contains_not?
				_then
					_self.process_throwing_branch(i_branch, i_tblock, i_index)
				_elif i_branch.break_tag _isnt _unset
				_then
					_self.process_breaking_branch(i_branch, i_tblock, i_index)
				_else
					_self.process_no_throw_branch(i_branch, i_tblock, i_index)
				_endif 
			_endloop
		_else
			_local (when_sts, cnd) << _self.process_when_statements(i_tblock.when_statements)
			.whens[i_tblock.tag] << when_sts
			_if cnd _isnt _unset _then .try_condition << cnd _endif
		_endif 
	_endloop
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_private _method jpn_try_visitor.process_no_throw_branch(p_branch, p_tblock, i_index)
	## 
	.blocks_used.add(p_tblock)
	_local c << 0
	_for i_tag, i_cond, i_body _over p_branch.condition_and_bodies()
	_loop
		c+<<1
		_if i_tag _is :if _orif i_tag _is :elif
		_then
			_local tag << write_string("in block",c)
			_local cond << dcn_if.local_taxonomy_condition(i_cond)
			.conditions[tag] << rope.new_with(cond)

			_local (when_sts, cnd) << _self.process_when_statements(i_body.statements)
			.whens[tag] << when_sts
			_if cnd _isnt _unset _then .try_condition << cnd _endif
			
			.ordered_tags.first.add(tag)
		_else
			_if i_body.statements.size >= 2
			_then 
				_local sub_branch << i_body.statements[2]
				_local tag << write_string("in block",c)
				
				.conditions[tag] << rope.new_from(sub_branch.taxonomy_conditions)
				
				_local leftover_sts << i_body.statements.slice_to_end(2+1)
				_local (when_sts, cnd) << _self.process_when_statements(leftover_sts)
				.whens[tag] << when_sts
				_if cnd _isnt _unset _then .try_condition << cnd _endif
				
				.ordered_tags.first.add(tag)
			_endif 
		_endif
	_endloop 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_private _method jpn_try_visitor.process_breaking_branch(p_branch, p_tblock, i_index)
	##
	_if .tagged_blocks[p_branch.break_tag] _isnt _unset
	_then 
		_local jump_block << .tagged_blocks[p_branch.break_tag].parent
		_if jump_block _isnt _unset
		_then 
			.blocks_used.add(jump_block)
			.conditions[jump_block.tag].add_all_last(p_branch.taxonomy_conditions)
			
			.ordered_tags.first.add(jump_block.tag)
		_endif
	_endif 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_private _method jpn_try_visitor.process_throwing_branch(p_branch, p_tblock, i_index)
	##
	_local break << _self.break(p_tblock, i_index+1)
	_if break _is _unset 
	_then
		_if p_tblock.has_try?.not _andif
		    _self.last_statement?(p_tblock, i_index)
		_then
			
			_local jump_block << .tagged_blocks[p_tblock.tag].parent
			.blocks_used.add(jump_block)
			.conditions[jump_block.tag].add_all_last(p_branch.taxonomy_conditions)
			.ordered_tags.first.add(jump_block.tag)
		_else
			.blocks_used.add(p_tblock)
			.conditions["in block"] << rope.new_from(p_branch.taxonomy_conditions)

			_local leftover_sts << p_tblock.statements.slice_to_end(i_index+1)
			_local (when_sts, cnd) << _self.process_when_statements(leftover_sts)
			.whens["in block"] << when_sts
			_if cnd _isnt _unset _then .try_condition << cnd _endif
			
			.ordered_tags.first.add("in block")
		_endif 
	_else
		_local jump_block << .tagged_blocks[break.name].parent
		.blocks_used.add(jump_block)
		.conditions[jump_block.tag].add_all_last(p_branch.taxonomy_conditions)
		
		.ordered_tags.first.add(jump_block.tag)
	_endif 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_private _method jpn_try_visitor.seed_slots(p_tblock)
	##
	.ordered_tags   << rope.new()
	.conditions     << equality_hash_table.new()
	.whens          << equality_hash_table.new()
	.tagged_blocks  << equality_hash_table.new()
	_for i_tblock _over _self.all_blocks(p_tblock)
	_loop
		_local tag << i_tblock.tag
		.tagged_blocks[tag] << i_tblock
		.conditions[tag]    << rope.new()
		.whens[tag]         << _unset 
	_endloop
	.blocks_used << set.new()
	.try_condition << _unset 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_private _method jpn_try_visitor.filtered_tags()
	##
	_local filtered_ordered_tags << rope.new()
	_for i_tags _over .ordered_tags.elements()
	_loop
		_for i_tag _over i_tags.fast_elements()
		_loop 
			_if filtered_ordered_tags.includes_by_equality?(i_tag).not
			_then
				filtered_ordered_tags.add(i_tag)
			_endif
		_endloop 
	_endloop
	>> filtered_ordered_tags
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_private _method jpn_try_visitor.find_highest_level_block(p_tblock)
	##
	_for i_tblock _over _self.all_blocks(p_tblock)
	_loop
		_if .blocks_used.includes?(i_tblock)
		_then
			_return i_tblock
		_endif
	_endloop
	_return _unset 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_private _method jpn_try_visitor.find_try_block(p_tblock)
	##
	_for i_tblock _over _self.all_blocks(p_tblock)
	_loop
		_if i_tblock.has_try?
		_then
			_return i_tblock
		_endif
	_endloop
	_return _unset 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_private _method jpn_try_visitor.create_conditions_and_bodies(p_filtered_ordered_tags)
	##
	_local inp << rope.new()
	_for i_tag _over p_filtered_ordered_tags.fast_elements()
	_loop 
		_local cnds << .conditions[i_tag]
		_local sts  << .whens[i_tag]
		_if cnds.empty?.not
		_then
			inp.add({cnds, dcn_body.new(sts)})
		_endif
	_endloop
	>> inp
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_private _method jpn_try_visitor.process_when_statements(p_sts)
	##
	_local sts << p_sts.copy()

	_if sts.empty?.not
	_then 
		_local last << sts.last
		_if last.is_break?
		_then
			sts.remove_last()
		_endif
	_endif
	_if sts.empty?.not
	_then 
		_local first << sts.first
		_if first.is_local_assignment?
		_then
			_local loc << first.single_local
			_if loc _isnt _unset
			_then
				_if first.expression.is_local? _andif
				    first.expression.name.matches?("object*")
				_then
					try_condition << loc.name
					sts.remove_first()
				_endif
			_endif 
		_endif
	_endif
	>> sts, try_condition
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_try_visitor.before_try_statements(p_tblock)
	##
	_local sts << p_tblock.before_try_statements.copy()
	
	# clear the condition declaration, always on index=1:
	# Java: Object object;
	#
	sts[1] << dcn_no_op.new()

	# clear the starting sys!install_handlers
	_local handler_index << _unset 
	_for i_index, i_node _over sts.fast_keys_and_elements()
	_loop
		_if i_node.is_class_of?(dcn_call) _andif
		    i_node.name = "sys!install_handlers"
		_then
			handler_index << i_index
		_endif 
	_endloop

	_if handler_index _isnt _unset
	_then
		_for i _over range(2, handler_index)
		_loop
			sts[i] << dcn_no_op.new()
		_endloop 
	_endif 
	
	# Clear the try preparation
	#                EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
	#                EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
	#                DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
	#                CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
	#                DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
	
	_for i _over range(1,5)
	_loop
		sts[sts.size-i+1] << dcn_no_op.new()
	_endloop
	>> sts
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_try_visitor.try_statements(p_tblock)

	_local sts << p_tblock.nested_try_statements.copy()
	_local idx << 1
	_for i_idx, i_stat _over sts.fast_keys_and_elements()
	_loop
		_if i_stat.is_class_of?( dcn_call)
		_then
			idx << i_idx+1
			_leave
		_endif
	_endloop
	
	_local actual_sts << sts.slice(idx, sts.size-1)
	>> actual_sts
_endmethod
$


_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_try_visitor.last_statement?(p_tblock, p_index)
	>> p_tblock.statements.size = p_index
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_try_visitor.break(p_tblock, p_index)
	_local sts << p_tblock.statements
	_if p_index <= sts.size
	_then
		_if sts[p_index].is_break?
		_then
			_return sts[p_index]
		_endif 
	_endif
	_return _unset 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_private _iter _method jpn_try_visitor.all_blocks(p_tblock)
	_local tb << p_tblock
	_loop 
		_loopbody(tb)
		tb << tb.child
		_if tb _is _unset _then _leave _endif 
	_endloop 
_endmethod
$
