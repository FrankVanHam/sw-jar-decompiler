_package deco
$

#remex(:jpn_parser)

_pragma(classify_level=restricted, topic={jar_decompiler})
##
## Parser for Java parser nodes (JPN) that create Decompiler
## nodes (DCN).
## The DCN nodes are one step closer to Magik, but
## need some postprocessing afterwards.
##
def_slotted_exemplar(:jpn_parser,
	{
		{:in_loopbody?,       _unset},
		{:current_java_class, _unset},
		{:jar_node,           _unset}
	})
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_parser.new()
	##
	>> _clone.init()
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_private _method jpn_parser.init()
	##
	.in_loopbody? << _false 
	>> _self
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_parser.parse_file(p_file_node)
	##
	## Parse a jar file.
	#
	.jar_node << dcn_jar.new()
	_for i_node _over p_file_node.content.fast_elements()
	_loop
		# during parsing, the result is added to .jar_node.
		_self.parse_statement(i_node)
	_endloop
	>> .jar_node
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_parser.parse_sender(p_jnode)
	##
	_return _self.parse_expression(p_jnode)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_parser.parse_statement(p_jnode)
	##
	>> p_jnode.parse_statement(_self)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_parser.parse_expression(p_jnode)
	##
	>> p_jnode.parse_expression(_self)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_parser.parse_expression_error(p_jnode)
	##
	## Fallback method invoked from node when it can not be handled specifically
	## 
	condition.raise(:deco_unexpected_node, :node, p_jnode)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_parser.parse_method_invocation(p_jnode)
	##
	_if p_jnode.sender.is_this?.not
	_then
		(exec, meth) << _self.executer_and_method_from_node(p_jnode)
		_return exec.perform(meth, _self, _scatter p_jnode.args)
	_else
		_return deco_invoker.boot_method(_self, p_jnode.name, p_jnode.sender, _scatter p_jnode.args)
	_endif
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_parser.parse_dotted(p_jnode)
	##
	(exec, meth) << _self.executer_and_method_from_string(p_jnode.string_value)
	_return exec.perform(meth, _self)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_parser.parse_package(p_jnode)
	# return no_op node, as package has no part in Magik
	>> dcn_no_op.new()	
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_parser.parse_import(p_jnode)
	# return no_op node, as package has no part in Magik
	>> dcn_no_op.new()
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_parser.parse_declaration(p_jnode)
	##
	>> dcn_local_declaration.new(p_jnode.name, p_jnode.type.name)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_parser.parse_branch(p_jnode)
	##
	_local inp << rope.new()
	_for i_vec _over p_jnode.input.fast_elements()
	_loop
		_local (cond, body) << (_scatter i_vec)
		_local cond_node << _if cond _isnt _unset
				    _then >> _self.parse_expression(cond)
				    _endif
		_local body_node << _self.parse_body(body)
		inp.add({cond_node, body_node})
	_endloop 
	>> dcn_branch.new(inp)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_parser.parse_new(p_jnode)
	##
	_if p_jnode.type = "Boolean"
	_then
		_return _self.parse_expression(p_jnode.args[1])
	_elif p_jnode.type = "Object" _andif
	      p_jnode.array?
	_then
		_local args << _self.parse_args(p_jnode.args)
		_return dcn_vector.new(args)
	_else
		_local args << _self.parse_args(p_jnode.args)
		_return dcn_new.new(p_jnode.type, args, p_jnode.array?)
	_endif 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_parser.parse_args(p_args)
	##
	_local args << rope.new_for(p_args.size)
	_for i_node _over p_args.fast_elements()
	_loop
		args.add(_self.parse_expression(i_node))
	_endloop
	>> args
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_parser.parse_constant(p_jnode)
	##
	>> _if p_jnode.string_value = "_self"
	   _then
		   >> dcn_self.new()
	   _elif p_jnode.string_value = "null"
	   _then
		   >> dcn_constant.new_literal("null")
	   _else
		   >> _if p_jnode.is_string?
		      _then
			      >> dcn_constant.new_string(p_jnode.string_value)
		      _elif p_jnode.is_number?
		      _then
			      >> dcn_constant.new_number(p_jnode.string_value)
		      _else
			      condition.raise(:deco_unexpected_node, :node, p_jnode)
		      _endif
	   _endif
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_parser.parse_assignment(p_jnode)
	##
	_local left  << _self.parse_variable(p_jnode.left)
	_local right << _self.parse_expression(p_jnode.right)
	>> dcn_local_assignment.new(left, right)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_parser.parse_variable(p_jnode)
	##
	>> _if p_jnode.is_declaration?
	   _then
		   >> dcn_local_declaration.new(p_jnode.name, p_jnode.type.name)
	   _elif p_jnode.is_array_access?
	   _then
		   >> _self.parse_array_access(p_jnode)
	   _else 
		   >> dcn_local.new(p_jnode.name)
	   _endif 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_parser.parse_return_statement(p_jnode)
	##
	## A return in a loopbody is actual a continue.
	##
	_local exp << _self.parse_expression(p_jnode.expression)
	>> _if .in_loopbody?
	   _then
		    >> dcn_continue.new(_unset, exp)
	   _else 
		   >> dcn_return.new(exp)
	   _endif 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_parser.parse_soft_return_statement(p_jnode)
	##
	_local exp << _self.parse_expression(p_jnode.expression)
	>> dcn_soft_return.new(exp)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_parser.parse_class(p_class_node)
	##
	# reset the metadata in the environments.
	deco_envaccessor.reset()
	
	.jar_node.add_java_class(p_class_node)
	_if p_class_node.implementation = "ExecutableMagik"
	_then
		_self.parse_execution_class(p_class_node)
	_else
		_self.parse_implementation_class(p_class_node)
	_endif
	>> dcn_no_op.new()
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_parser.parse_implementation_class(p_class_node)
	##
	## Parse the implementation class that holds the actual methods
	## for the classes.
	#
	_local class_name << p_class_node.name
	_local super_name << p_class_node.implementation
	
	.current_java_class << p_class_node
	
	_for i_meth _over p_class_node.methods.fast_elements()
	_loop
		_if i_meth.type = "Method" 
		_then 
			_local m_node << _self.parse_method(class_name, i_meth)
			.jar_node.add_method(m_node)
		_endif
	_endloop
	
	.current_java_class << _unset 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_parser.parse_execution_class(p_class_node)
	##
	## Parse the class that dictates what comes in the Magik
	## sourcecode. The execution_class will refer to the
	## implementation_class for the actual implementation.
	#
	_local class_name << p_class_node.name
	_local super_name << p_class_node.implementation

	.current_java_class << p_class_node
	
	_local file << .jar_node.create_file(class_name)
	_for i_meth _over p_class_node.methods.fast_elements()
	_loop
		_if i_meth.type = "TopLevel"
		_then
			_self.parse_execution_method(file, class_name, i_meth)
		_endif
	_endloop
	
	.current_java_class << _unset 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_private _method jpn_parser.parse_execution_method(p_file, p_class_name, p_meth)
	## 
	_local m_node << _self.parse_method(p_class_name, p_meth)
	_for i_statement _over m_node.body.statements.fast_elements()
	_loop
		p_file.add_statement(i_statement)
	_endloop 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_parser.parse_loopbody_method(p_class_name, p_meth_node)
	## 
	_local old << .in_loopbody? ^<< _true
	_protect 
		_return _self.parse_method(p_class_name, p_meth_node)
	_protection 
		.in_loopbody? << old
	_endprotect 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_parser.parse_method(p_class_name, p_meth_node)
	##
	_local (params, scatter?) << _self.parse_method_parameters(p_meth_node)
	_local iter? << _self.is_iter?(p_meth_node)
	
	_local env << deco_envaccessor.save()
	
	_self.apply_annotations(p_meth_node)
	_local body << _self.parse_body(p_meth_node.body)
	
	deco_envaccessor.restore(env)
	
	_local type << p_meth_node.type
	>> dcn_method.new(p_class_name, p_meth_node.name, params, scatter?, body, type, iter? )
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_private _method jpn_parser.parse_method_parameters(p_meth_node)
	##
	## Parse the methods parameters. This is done carefully as some parameters
	## are for Java and some are from Magik.
	#
	# strip all upto the self "Object _self" argument
	_local idx << _unset
	_if .in_loopbody?
	_then
		#public static Object __loopbody_(Object[] __env__, Object i_var) {}
		idx << 1
	_elif p_meth_node.parameters.empty?.not
	_then
		_if _self.is_iter?(p_meth_node)
		_then
			# public static Object deco_test__fast_elements(MethodHandle __loopbody__, Object[] __loopenv__, Object _self) {}
			idx << 3
			iter? << _true 
		_else
			#public static Object deco_test__fast_elements(Object _self, Object p_var) {}
			idx << 1
		_endif
	_endif
	
	_local 	java_args << _if idx _isnt _unset
			     _then >> p_meth_node.parameters.slice_to_end(idx+1)
			     _else >> p_meth_node.parameters.copy()
			     _endif 

	_local scatter? << _if java_args.empty?.not
			   _then >> java_args.last.varargs?
			   _else >> _false
			   _endif
	_local args << java_args.map(_proc(x) >> x.name _endproc)
	>> args, scatter?
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_private _method jpn_parser.is_iter?(p_meth_node)
	# The method is an iter if the first parameter is specific type
	# and name.
	#
	# public static Object deco_test__fast_elements(MethodHandle __loopbody__, Object[] __loopenv__, Object _self) {}
	
	>> _if p_meth_node.parameters.empty?.not
	   _then
		   _local first << p_meth_node.parameters.first
		   >> first.type.name = "MethodHandle" _andif
			   first.name = "__loopbody__"
	   _else
		   >> _false 
	   _endif  
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_parser.parse_proc(p_class_name, p_meth_node, p_env?)
	##
	_local (params, scatter?) << _self.parse_proc_parameters(p_meth_node, p_env?)
	
	_local env << deco_envaccessor.save()
	
	_self.apply_annotations(p_meth_node)
	_local imports << _self.extract_import(p_meth_node)
	_local body << _self.parse_body(p_meth_node.body)
	
	deco_envaccessor.restore(env)
	
	_local type << p_meth_node.type
	_local m_node << dcn_proc.new(p_class_name, p_meth_node.name, params, scatter?, body, imports )
	>> m_node
_endmethod
$


_pragma(classify_level=restricted, topic={jar_decompiler})
_private _method jpn_parser.parse_proc_parameters(p_meth_node, p_env?)
	##
	_local java_params << p_meth_node.parameters.copy()
	_if java_params.empty?.not _then java_params.remove_first() _endif
	_if p_env? _andif java_params.empty?.not _then java_params.remove_first() _endif
	
	_local scatter? << _if java_params.empty?.not
			   _then >> java_params.last.varargs?
			   _else >> _false
			   _endif
	_local args << java_params.map(_proc(x) >> x.name _endproc)
	>> args, scatter?
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_parser.extract_import(p_meth_node)
	##
	_local anno << p_meth_node.annotations.select(
			       predicate.using(
				       _proc(x)
					       >> x.name="EnvVars" _endproc
					 )).an_element()
	_if anno _isnt _unset
	_then
		_local values << rope.new()
		_for i_anno _over anno.value.fast_elements()
		_loop
			_local value << i_anno.property(:name).string_value
			
			_if value.includes?(%-).not
			_then
				values.add(value)
			_endif
		_endloop
		_return values
	_else
		_return {}
	_endif
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_parser.apply_annotations(p_meth_node)
	##
	_local anno << p_meth_node.annotations.select(
			       predicate.using(
				       _proc(x) >> x.name="EnvVars" _endproc
					 )).an_element()
	_if anno _isnt _unset
	_then
		_for i_anno _over anno.value.fast_elements()
		_loop
			_local name  << i_anno.property(:name).string_value
			_local index << i_anno.property(:index).string_value

			deco_envaccessor.set_var_name(index, name)
		_endloop 
	_endif 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_parser.parse_body(p_body_jnode)
	##
	_local statements << rope.new()
	_for i_jnode _over p_body_jnode.statements.fast_elements()
	_loop
		statements.add(_self.parse_statement(i_jnode))
	_endloop
	>> dcn_body.new(statements)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_parser.parse_break(p_jnode)
	##
	>> dcn_break.new(p_jnode.name)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_parser.parse_continue(p_jnode)
	##
	>> dcn_continue.new(p_jnode.name)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_parser.parse_throw(p_jnode)
	##
	_local exp << _self.parse_expression(p_jnode.expression)
	>> _if exp.is_class_of?(dcn_unfinished_throw)
	   _then
		   >> _if exp.arg _isnt _unset
		      _then 
			      >> dcn_throw.new(exp.expression, {exp.arg})
		      _else
			      >> dcn_throw.new(exp.expression, {})
		      _endif 
	   _else
		   >> dcn_throw.new(exp, {})
	   _endif 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_parser.parse_array_access(p_jnode)
	##
	_local args << _self.parse_args(p_jnode.args)
	>> dcn_array_access.new(p_jnode.name, args)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_parser.parse_operation(p_jnode)
	##
	_local left << _self.parse_expression(p_jnode.left)
	_local right << _self.parse_expression(p_jnode.right)

	_local op_map << equality_hash_table.new_with(
				 "==", "=",
				 "!=", "~=",
				 "||", "_or",
				 "&&", "_and")
	_local op << op_map[p_jnode.operation].default("crash!")

	_if right.is_class_of?(dcn_constant) _andif (right.string_value = "null")
	_then
		right << dcn_constant.new_literal("_unset")
		_local op_map << equality_hash_table.new_with(
					 "==", "_is",
					 "!=", "_isnt")
		op << op_map[p_jnode.operation].default("crash!")
	_endif 
	>> dcn_op.new(op, left, right)
_endmethod
$


_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_parser.parse_not(p_jnode)
	##
	_local exp << _self.parse_expression(p_jnode.expression)
	>> dcn_not.new(exp)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_parser.parse_negated(p_jnode)
	##
	_local exp << _self.parse_expression(p_jnode.expression)
	>> dcn_negated.new(exp)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_parser.parse_try(p_jnode)
	##
	_local args << p_jnode.exceptions.map(_proc(x) >> x.name _endproc)
	>> dcn_unfinished_try.new(_self.parse_body(p_jnode.try_body),
				  _self.parse_body(p_jnode.catch_body),
				  args,
				  _self.parse_body(p_jnode.finally_body))
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_parser.parse_synchronized(p_jnode)
	_local exp << _self.parse_expression(p_jnode.expression)
	_local body << _self.parse_body(p_jnode.body)
	>> dcn_synchronized.new(exp, body)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_parser.parse_block(p_jnode)
	##
	>> dcn_block.new(_self.parse_body(p_jnode.body), p_jnode.name)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_parser.parse_loop(p_jnode)
	##
	_local exp << _if p_jnode.while _isnt _unset
		      _then >> _self.parse_expression(p_jnode.while)
		      _endif 
	>> dcn_loop.new(_self.parse_body(p_jnode.body), exp, p_jnode.tag)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_parser.parse_cast(p_jnode)
	##
	>> _self.parse_expression(p_jnode.expression)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_parser.parse_parenthesis(p_jnode)
	##
	>> _self.parse_expression(p_jnode.expression)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_parser.parse_iter(p_method, p_handle, p_env, p_sender, _gather p_args)
	##
	_local sender << _self.parse_sender(p_sender)
	_local args << _self.parse_args(p_args)
	
	# (MethodHandle)cfr_ldc_0(), ref=cfr_ldc_0
	_local ref << p_handle.expression.name
	_local ref_method << .current_java_class.find_method(ref)

	_local java_loopbody_method << _self.find_loopbody_method(ref_method)
	_local loopbody_method << _self.parse_loopbody_method(.current_java_class.name, java_loopbody_method)
	
#	_local sts << loopbody_method.body.statements
#	_local iter_node << sts.select(predicate.using(_proc(x) >> x.is_unfinished_try? _endproc)).an_element()	       
#	_local iter_body << iter_node.try_body.copy()
#	iter_body.statements.remove_last()
	
	>> dcn_iter.new(sender, p_method.string_value,
			loopbody_method.scatter?, loopbody_method.args,
			loopbody_method.body, args)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_parser.find_loopbody_method(p_method)
	##
	#static MethodHandle cfr_ldc_0() {
	#        try {
	#            return MethodHandles.lookup().findStatic(deco_test_3293.class, "__loopbody_", 

	_local loopbody_name << p_method.body.statements[1].try_body.statements[1].expression.args[2].string_value
	_return .current_java_class.find_method(loopbody_name)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_parser.publish_method(p_class_name, p_java_method_name, p_exemplar_name, p_method_name, p_nr_args, p_nmandatory_args, p_abstract?, p_private?)
	##
	>> .jar_node.publish_method(p_class_name, p_java_method_name, p_exemplar_name, p_method_name, p_nr_args, p_nmandatory_args, p_abstract?, p_private?)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_parser.publish_proc(p_class_name, p_java_method_name, p_proc_name, p_nr_args, p_nr_mandatory_args , p_env?)
	##
	_local java_class << .jar_node.find_class(p_class_name)
	_local java_proc_method << java_class.find_method(p_java_method_name)
	_local proc_method << _self.parse_proc(java_class.name, java_proc_method, p_env?)
	proc_method.bind(p_proc_name, p_nr_args, p_nr_mandatory_args)
	>> proc_method
	#>> .jar_node.publish_proc(p_class_name, p_java_method_name, p_proc_name, p_nr_args, p_nmandatory_args )
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_parser.executer_and_method_from_string(p_string)

	_local (exec_name, exec_meth_name) <<  (_scatter p_string.split_by(%.))
	_return _self.executer_and_method(exec_name, exec_meth_name)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_parser.executer_and_method_from_node(p_jnode)
	##
	_local exec << _self.executer_from_node(p_jnode)

	_local exec_meth_name << p_jnode.name
	_local exec_meth << write_string(exec_meth_name.lowercase,"()").as_symbol()
	_if exec.method(exec_meth) _is _unset _then condition.raise(:error, :string, write_string("No method ", exec_meth, " for parser execution on ", exec.class_name)) _endif

	>> exec, exec_meth
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_parser.executer_from_node(p_jnode)
	##
	_return _self.parse_sender(p_jnode.sender)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_parser.parse_executer(p_jnode)
	_local exec_name << p_jnode.name
	_local global_ex_name << write_string(:deco_ + exec_name.lowercase).as_symbol()
	_local ex << !current_package!.all_packages[:deco][global_ex_name]
	_if ex _is _unset _then condition.raise(:error, :string, write_string("No global for parser execution: ", global_ex_name)) _endif
	_return ex
_endmethod
$


_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_parser.executer_and_method(exec_name, exec_meth_name)
	_local global_ex_name << write_string(:deco_ + exec_name.lowercase).as_symbol()
	_local ex << !current_package!.all_packages[:deco][global_ex_name]
	_if ex _is _unset _then condition.raise(:error, :string, write_string("No global for parser execution: ", global_ex_name)) _endif

	_local exec_meth << write_string(exec_meth_name.lowercase,"()").as_symbol()
	_if ex.method(exec_meth) _is _unset _then condition.raise(:error, :string, write_string("No method ", exec_meth, " for parser execution on ", global_ex_name)) _endif
	>> ex, exec_meth
_endmethod
$
