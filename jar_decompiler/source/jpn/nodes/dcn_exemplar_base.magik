##
## File            : $File: (dcn_exemplar_base.magik) $
## SCM             : $URL$
##
## Copyright       : Realworld Systems
##                   e-mail  : support@realworld-systems.com
##                   address : Venusstraat 17, 4105 JH Culemborg, The Netherlands
##                   tel     : +31(0)345 614406
##                   fax     : +31(0)345 614319
##
## Contains        : 
##
##
## Date written    : 2012-01-28
## Date changed    : $Date$
## Revision        : $Rev$

_package deco
$

remex(:dcn_exemplar_base)
$


_pragma(classify_level=restricted, topic={decompiler})
## Base class for any exemplar decompilation
def_slotted_exemplar(:dcn_exemplar_base,
	{
		{:exemplar, _unset}
	}, :dcn_decompile_result)
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_exemplar_base.new(ex)
	_return _clone.init(ex)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_exemplar_base.init(ex)
	.exemplar << ex
	_return _super.init()
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_exemplar_base.comment
	_return .compiler_info.comment_for_exemplar(.exemplar)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_exemplar_base.level_topics_and_usages
	level << .compiler_info.pragma_level_for_exemplar(.exemplar)
	topics << .compiler_info.pragma_topics_for_exemplar(.exemplar)
	usages << .compiler_info.pragma_usages_for_exemplar(.exemplar)
	
	_return level, topics, usages
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_exemplar_base.decode_comment_on(a_stream)
	comment << _self.comment
	_if comment _isnt _unset
	_then
		a_stream.write( comment )
		a_stream.newline()
	_endif
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_abstract _method dcn_exemplar_base.decode_class_on(a_stream)
	## Subclasses will implement the core exemplar/mixin
_endmethod
$


_pragma(classify_level=restricted, topic={decompiler})
_method dcn_exemplar_base.decode_on(a_stream)
	##
	## Write a formated output on the stream
	##
	_self.decode_pragma_on(a_stream)
	_self.decode_comment_on(a_stream)
	_self.decode_class_on(a_stream)
_endmethod
$
