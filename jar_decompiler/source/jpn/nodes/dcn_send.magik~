_package deco
$

#remex(:dcn_send)
$

_pragma(classify_level=restricted, topic={decompiler})
## Node for sending a method
def_slotted_exemplar(:dcn_send,
		     {
			     {:name,         _unset, :readable},
			     {:sender,       _unset, :readable},
			     {:allresults?,  _unset, :readable},
			     {:operator,     _unset},
			     {:args,         _unset, :readable},
			     {:top_of_stack, _unset}
		     }, {:dcn_base})
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_send.init(p_sender, p_method, p_args)
	##
	assert(p_sender.is_kind_of?(dcn_base))
	assert(p_method _isnt _unset)
	assert(p_args.includes?(_unset).not)
	.name << p_method
	.sender << p_sender
	.allresults? << _false 
	.args << p_args
	>> _self 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_send.decode_on(p_stream)
	##
	_if .allresults?
	_then
		p_stream.write(" _allresults ")
	_endif 
	.sender.decode_on(p_stream)
	_local (meth, first, second, set?, boot?) << _self.name_split()
	
	_local args << rope.new_from(.args)
	_local set << _if set?
		      _then >> args.remove_first()
		      _endif 
	
	p_stream.write(meth, first)
	_self.decode_list_on(p_stream, args)
	p_stream.write(second)
	_if set?
	_then
		_if boot?
		_then 
			p_stream.write(" ^<< ")
		_else
			p_stream.write(" << ")
		_endif 
		set.decode_on(p_stream)
	_endif 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method dcn_send.remainder(p_nr)
	##
	>> dcn_remainder.new(p_nr)
_endmethod
$


_pragma(classify_level=restricted, topic={decompiler})
_method dcn_send.asallresults()
	##
	.allresults? << _true
	>> _self 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_send.name_split()
	##
	>> _if .name.matches?("\\\\b*]")
	   _then
		   >> "", "[", "]", _false, _false
		   
	   _elif .name.matches?("\\\\b*]\\\\l\\\\l")
	   _then
		   >> "", "[", "]", _true, _false
		   
	   _elif .name.matches?("\\\\b*]^\\\\l\\\\l")
	   _then
		   >> "", "[", "]", _true, _true
		   
	   _elif .name.matches?("*()^\\\\l\\\\l")
	   _then
		   >> write_string(".", .name.slice(1, .name.size-9)), "(", ")", _true, _true
		   
	   _elif .name.matches?("*()\\\\l\\\\l")
	   _then
		   >> write_string(".", .name.slice(1, .name.size-8)), "(", ")", _true, _false
 
	   _elif .name.matches?("*^\\\\l\\\\l")
	   _then
		   >> write_string(".", .name.slice(1, .name.size-7)), "", "", _true, _true 
	   _elif .name.matches?("*\\\\l\\\\l")
	   _then
		   >> write_string(".", .name.slice(1, .name.size-6)), "", "", _true, _false

	   _elif .name.matches?("*()")
	   _then
		   >> write_string(".", .name.slice(1, .name.size-2)), "(", ")", _false, _false 
	   _else
		   >> write_string(".", .name), "", "", _false , _false 
	   _endif 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_send.matches?(p_name, p_test)
	##
	>> p_name.substitute_character(%\, %_).matches?(p_test.substitute_character(%\, %_))
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_send.is_send?
	##
	>> _true 
_endmethod
$
