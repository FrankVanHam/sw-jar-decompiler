_package deco
$

#remex(:dcn_return)
$

_pragma(classify_level=restricted, topic={jar_decompiler})
## Node for the return statement
def_slotted_exemplar(:dcn_return,
		     {
			     {:expression, _unset, :readable}
		     }, :dcn_base)
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method dcn_return.new(p_expression)
	##
	>> _clone.init(p_expression)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_private _method dcn_return.init(p_expression)
	.expression << p_expression
	>> _self 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method dcn_return.decode_on(p_stream)
	## 
	p_stream.write("_return ")
	.expression.decode_on(p_stream)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_return.is_return?
	_return _true
_endmethod
$
