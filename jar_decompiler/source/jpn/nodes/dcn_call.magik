_package deco
$

#remex(:dcn_call)
$

_pragma(classify_level=restricted, topic={decompiler})
## Node for a call, a procedure invocation.
def_slotted_exemplar(:dcn_call,
		     {
			     {:value_node, _unset},
			     {:env, _unset, :readable},
			     {:args, _unset, :readable}
		     }, :dcn_base)
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_call.new(p_value_node, p_args, _optional p_env)
	_return _clone.init(p_value_node, p_args, p_env)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_call.init(p_value_node, p_args, _optional p_env)
	.value_node << p_value_node
	.env << p_env
	.args << p_args
	_return _self 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_call.name
	## 
	>> .value_node.name
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_call.decode_on(p_stream)
	##
	.value_node.decode_on(p_stream)
	p_stream.write("(")
	_local comma? << _false 
	_for i_arg _over .args.fast_elements()
	_loop
		_if comma?^<< _true _then p_stream.write(", ") _endif 
		i_arg.decode_on(p_stream)
	_endloop 
	p_stream.write(")")
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_call.accept_body_visitor(p_visitor)
	.value_node.accept_body_visitor(p_visitor)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_call.is_call?
	## 
	>> _true 	
_endmethod
$


#
#_pragma(classify_level=restricted, topic={decompiler})
#_method dcn_call.accept_body_visitor(visitor)
#	.proc.accept_body_visitor(visitor)
#	_return _super.accept_body_visitor(visitor)
#_endmethod
#$
#
#_pragma(classify_level=restricted, topic={decompiler})
#_method dcn_call.handler_conditions
#	_return .args
#_endmethod
#$
#
#
#
#_pragma(classify_level=restricted, topic={decompiler})
#_method dcn_call.decode_as_vector_on(p_stream,  thing)
#	p_stream.write( "{ ")
#	_self.decode_args_on(p_stream, .args, .token.scatter?, .token.numargs)
#	p_stream.write( " }")
#_endmethod
#$
#
#_pragma(classify_level=restricted, topic={decompiler})
#_method dcn_call.decode_as_binary_operator_on(p_stream, bin)
#	p_stream.write( "( ")
#	.args[1].decode_on(p_stream)
#	p_stream.write( bin.ident )
#	.args[2].decode_on(p_stream)
#	p_stream.write( " )")
#_endmethod
#$
#
#_pragma(classify_level=restricted, topic={decompiler})
#_method dcn_call.decode_as_global_on(p_stream, name)
#	p_stream.write(name)
#	p_stream.write( "( ")
#	_self.decode_args_on(p_stream, .args, .token.scatter?, .token.numargs)
#	p_stream.write( " )")
#_endmethod
#$
#

