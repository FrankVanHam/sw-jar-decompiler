_package deco
$

#remex(:dcn_break)
$

_pragma(classify_level=restricted, topic={decompiler})
## Node a _leave statement.
def_slotted_exemplar( :dcn_break,
		       {
			       {:name, _unset, :readable}
		       }, :dcn_base)
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_break.new(_optional p_name)
	_return _clone.init(p_name)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_break.init(p_name)
	.name << p_name
	_return _self 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_break.decode_on(p_stream)
	##
	_if .name _isnt _unset
	_then 
		p_stream.write(" _leave @", .name)
	_else
		p_stream.write(" _leave")
	_endif 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_break.is_break?
	##
	>> _true 
_endmethod
$
