_package deco
$

#remex(:dcn_shared_thing)
$

_pragma(classify_level=restricted, topic={decompiler})
## Is the node for def_shared_constant statements
def_slotted_exemplar( :dcn_shared_thing,
		      {
			      {:exemplar, _unset, :readable},
			      {:action,   _unset, :readable},
			      {:args,     _unset, :readable}
		      }, :dcn_base )
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_shared_thing.init(p_exemplar, p_action, p_args)
	##
	assert(p_exemplar.is_class_of?(symbol))
	assert(p_args.empty?.not)
	.exemplar << p_exemplar
	.action   << p_action
	.args     << p_args
	>> _self 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_shared_thing.decode_on(p_stream)
	##
	_self.decode_pragma_on(p_stream)
	_self.decode_comment_on(p_stream, _false)
	p_stream.write(.exemplar)

	# strip the ) of the .action
	_local action_str << .action.slice(1, .action.size-1)
	p_stream.write(".", action_str )
	_self.decode_list_on(p_stream, .args)
	p_stream.write(")")
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_shared_thing.method_finder
	##
	_local id1 << .args.first.string_value
	_local id2 << _self.package_prefix(.exemplar)
	>> _if id1 _isnt _unset _and id2 _isnt _unset 
	   _then 
		   >> dcn_method_finder.new_method(id1, id2)
	   _endif 
_endmethod
$
