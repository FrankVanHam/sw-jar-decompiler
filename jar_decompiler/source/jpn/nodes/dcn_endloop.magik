##
## File            : $File: (dcn_endloop.magik) $
## SCM             : $URL$
##
## Copyright       : Realworld Systems
##                   e-mail  : support@realworld-systems.com
##                   address : Venusstraat 17, 4105 JH Culemborg, The Netherlands
##                   tel     : +31(0)345 614406
##                   fax     : +31(0)345 614319
##
## Contains        : 
##
##
## Date written    : 2012-04-06
## Date changed    : $Date$
## Revision        : $Rev$

_package deco
$

remex(:dcn_endloop)
$


_pragma(classify_level=restricted, topic={decompiler})
## Node for an endloop execution. In magik for every _loop is
## an _endloop, but in the compiled vector there can be
## multiple endloops for other exits from the loop.
def_slotted_exemplar( :dcn_endloop,
		       {{:token, _unset}}, :dcn_base)
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_endloop.new(token)
	_return _clone.init(token)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_endloop.init(token)
	.token << token
	_return _self 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_endloop.decode_on( a_stream, _optional parent, statements )
	
	condition.raise(:cannot_decompile_optimized_loop)
	a_stream.write("_endloop")
_endmethod
$

