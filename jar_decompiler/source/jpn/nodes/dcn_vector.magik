_package deco
$

#remex(:dcn_vector)
$

_pragma(classify_level=restricted, topic={decompiler})
## Node for a vector statement
def_slotted_exemplar( :dcn_vector,
	{
		{:values,_unset, :readable}
	}, :dcn_base)
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_vector.new(values)
	
	_return _clone.init(values)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_vector.init(values)
	.values << values
	_return _self 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_vector.accept_body_visitor(p_visitor)
	_self.accept_body_visitor_in_list(p_visitor, .values)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_vector.decode_on(p_stream)
	p_stream.write("{")
	_self.decode_list_on(p_stream, .values)
	p_stream.write("}")
_endmethod
$


_pragma(classify_level=restricted, topic={decompiler})
_method dcn_vector.is_vector?
	##
	>> _true
_endmethod
$
