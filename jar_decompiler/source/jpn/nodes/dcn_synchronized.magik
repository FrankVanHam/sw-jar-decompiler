_package deco
$


#remex(:dcn_synchronized)
$

_pragma(classify_level=restricted, topic={decompiler})
## a node for storing a dynamic value.
def_slotted_exemplar(:dcn_synchronized,
		     {
			     {:exp,    _unset, :readable},
			     {:body,   _unset, :readable}
		     }, :dcn_base)
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_synchronized.new(p_expression, p_body)
	##
	>> _clone.init(p_expression, p_body)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_synchronized.init(p_expression, p_body)
	##
	.exp << p_expression
	.body << p_body
	>> _self 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_synchronized.decode_on( p_stream )
	p_stream.write("synchronized()")
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_synchronized.is_synchronized?
	##
	>> _true 
_endmethod
$
