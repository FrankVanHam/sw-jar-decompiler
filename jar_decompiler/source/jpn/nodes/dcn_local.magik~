_package deco
$

#remex(:dcn_local)
$

_pragma(classify_level=restricted, topic={decompiler})
## node for a local.
def_slotted_exemplar(:dcn_local,
		     {
			     {:name, _unset, :readable}
		     }, :dcn_base )
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_local.new(name)
	
	_return _clone.init(name)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_local.init(name)
	.name << name
	_return _self
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_local.is_type?(p_type)
	>> _false 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method dcn_local.remainder(p_nr)
	##
	>> dcn_remainder.new(p_nr)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_local.decode_on(p_stream)
	p_stream.write( .name )
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_local.show_on( a_stream)
	a_stream.write( _self.class_name, "(", .name, ")" )
_endmethod
$
