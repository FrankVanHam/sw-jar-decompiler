
_package deco
$

remex(:dcn_magikc_method)
$

_pragma(classify_level=restricted, topic={decompiler})
## Represents a node for decompiled method from a magikc file.
def_slotted_exemplar( :dcn_magikc_method,
		      {
			      {:exemplar, _unset},
			      {:private?, _unset},
			      {:abstract?, _unset},
			      {:prgma, _unset}
		      }, :dcn_callable )
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_magikc_method.new( exemplar, prc, private?, abstract?, prgma,
			       statements, locals, literals )
	##
	## Return a new filled method node.
	_return _clone.init( exemplar, prc, private?, abstract?, prgma,
			     statements, locals, literals )
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_magikc_method.init( exemplar, prc, private?, abstract?, prgma,
					 statements, locals, literals )
	.exemplar << exemplar
	.private? << private?
	.abstract? << abstract?
	.prgma << prgma
	_return _super.init(prc,
			    statements, locals, literals) 
_endmethod
$


_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_magikc_method.exemplar_name
	_return .exemplar.deco_name
_endmethod
$



_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_magikc_method.private?
	_return .private?
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_magikc_method.abstract?
	_return .abstract?
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_magikc_method.comment
	strings << .prgma.comments(_unset)
	out << internal_text_output_stream.new()
	_for str _over strings.fast_elements()
	_loop
		out.write(tab_char, "##", str)
		out.newline()
	_endloop
	_return out.string
_endmethod
$


_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_magikc_method.level_topics_and_usages
	
	level << .prgma.deco_level
	topics << .prgma.deco_topics.default({})
	usages << .prgma.deco_usages.default({})
	
	_return level, topics, usages
_endmethod
$
