_package deco
$

#remex(:dcn_soft_return)
$
_pragma(classify_level=restricted, topic={decompiler})
def_slotted_exemplar(:dcn_soft_return,
		     {
			     {:expression, _unset, :readable}
		     }, :dcn_base )
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_soft_return.new(p_expression)
	>> _clone.init(p_expression)	
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_soft_return.init(p_expression)
	.expression << p_expression
	>> _self 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_soft_return.decode_on(p_stream)
	p_stream.write(">> ")
	.expression.decode_expression_on(p_stream)
_endmethod
$


_pragma(classify_level=restricted, topic={decompiler})
_method dcn_soft_return.accept_body_visitor(p_visitor)
	.expression.accept_body_visitor(p_visitor) 
_endmethod
$
