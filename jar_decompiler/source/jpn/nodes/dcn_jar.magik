_package deco
$

#remex(:dcn_jar)
$

_pragma(classify_level=restricted, topic={jar_decompiler})
## Node for whatever was declared in the file.
def_slotted_exemplar(:dcn_jar,
		      {
			      {:files,        _unset, :readable},
			      {:java_classes, _unset, :readable},
			      {:bodies,       _unset, :readable},
			      {:methods,      _unset, :readable},
			      {:procs,        _unset, :readable}
		      },
		      :dcn_base)
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method dcn_jar.new()
	_return _clone.init( )
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_private _method dcn_jar.init()
	.bodies       << hash_table.new()
	.methods      << rope.new()
	.procs        << rope.new()
	.java_classes << rope.new()
	.files        << rope.new()
	_return _self 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method dcn_jar.create_file(p_name)
	##
	_local file << dcn_file.new(p_name)
	.files.add(file)
	>> file 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method dcn_jar.add_java_class(p_class)
	.java_classes.add(p_class)
	.bodies[p_class] << dcn_body.new()
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method dcn_jar.add_method(p_method_node)
	##
	.methods.add(p_method_node)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method dcn_jar.find_class(p_class_name)
	##
	_for i_class _over .java_classes.fast_elements()
	_loop
		_if i_class.matches?(p_class_name)
		_then
			_return i_class
		_endif
	_endloop 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method dcn_jar.publish_method(p_class_name, p_java_method_name, p_exemplar_name, p_method_name, p_nr_args, p_nr_mandatory_args, p_abstract?, p_private?)
	##
	## Return the method matches by P_CLASS_NAME,
	## P_JAVA_METHOD_NAME, bound to the given specs.
	
	_local meth << _self.match(.methods, p_class_name, p_java_method_name)
	_if meth _isnt _unset
	_then
		meth.bind(p_exemplar_name, p_method_name, p_nr_args, p_nr_mandatory_args, p_abstract?, p_private?)
	_else
		condition.raise(:error, :string, "cannot find method to bind")
	_endif
	>> meth
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method dcn_jar.publish_proc(p_class_name, p_java_method_name, p_proc_name, p_nr_args, p_nr_mandatory_args)
	##
	## Return the proc matches by P_CLASS_NAME,
	## P_JAVA_METHOD_NAME bound to the given specs.

	_local prc << _self.match(.procs, p_class_name, p_java_method_name)
	_if prc _isnt _unset
	_then
		prc.bind(p_proc_name, p_nr_args, p_nr_mandatory_args)
	_else
		condition.raise(:error, :string, "cannot find method to bind")
	_endif
	>> prc
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_private _method dcn_jar.match(p_list, p_class_name, p_java_method_name)
	##
	## Return the node matches by P_CLASS_NAME,
	## P_JAVA_METHOD_NAME.
	_for i_method _over p_list.fast_elements()
	_loop
		_if i_method.match_java?(p_class_name, p_java_method_name)
		_then
			_return i_method
		_endif
	_endloop
	_return _unset
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method dcn_jar.decode_on(p_stream)
	##
	_for i_file _over .files.fast_elements()
	_loop
		i_file.decode_on(p_stream)
	_endloop 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method dcn_jar.accept_body_visitor(p_visitor)
	##
	_for i_file _over .files.fast_elements()
	_loop
		i_file.accept_body_visitor(p_visitor)
	_endloop 
_endmethod
$
