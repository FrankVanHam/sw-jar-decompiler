##
## File            : $File: (dcn_combi_assign.magik) $
## SCM             : $URL$
##
## Copyright       : Realworld Systems
##                   e-mail  : support@realworld-systems.com
##                   address : Venusstraat 17, 4105 JH Culemborg, The Netherlands
##                   tel     : +31(0)345 614406
##                   fax     : +31(0)345 614319
##
## Contains        : 
##
##
## Date written    : 2012-04-06
## Date changed    : $Date$
## Revision        : $Rev$

_package deco
$

remex(:dcn_combi_assign)
$

_pragma(classify_level=restricted, topic={decompiler})
## Node for combined assignment.
## (a,b) << (1, 2)
##
def_slotted_exemplar(:dcn_combi_assign,
	{{:assignments, _unset}},
	{:dcn_base, :dcn_assign_mixin})
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_combi_assign.new(assignments)
	_return _clone.init(assignments)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_combi_assign.init(assignments)
	.assignments << rope.deco_check_type(assignments)
	_return _self
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_combi_assign.accept_node_visitor(visitor)
	_self.accept_node_visitor_in_vector(visitor, .assignments)
	_return _super.accept_node_visitor(visitor)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_combi_assign.accept_body_visitor(visitor)
	_self.accept_body_visitor_in_vector(visitor, .assignments)
	_return _super.accept_body_visitor(visitor)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_combi_assign.is_assign?
	_return _true 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_combi_assign.decode_on(a_stream, _optional parent, statements)
	_if .assignments.size = 1
	_then
		.assignments[1].decode_on(a_stream)
	_else
		a_stream.write( "(" )
		_for i_node _over .assignments.fast_elements()
		_loop
			i_node.decode_lhs_on( a_stream )
			_if i_node _isnt .assignments.last
			_then
				a_stream.write( ", ")
			_endif 
		_endloop
		a_stream.write( ") << (" )
		_for i_node _over .assignments.fast_elements()
		_loop
			_if i_node.has_rhs?
			_then
				i_node.decode_rhs_on( a_stream )
				_if i_node _isnt .assignments.last
				_then
					a_stream.write( ", ")
				_endif
			_endif 
		_endloop
		a_stream.write( ")" )
	_endif 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_combi_assign.result_count
	_return 0
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_combi_assign.has_results?
	_return _false 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_combi_assign.is_single_assign?
	_return .assignments.size = 1
_endmethod
$
