_package deco
$

#remex(:dcn_scatter)
$

_pragma(classify_level=restricted, topic={decompiler})
##
## node for a scattering results
##
def_slotted_exemplar(:dcn_scatter,
		     {
			     {:expression, _unset, :readable}
		     }, :dcn_base )
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_scatter.new(p_expression)
	>> _clone.init(p_expression)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_scatter.init(p_expression)
	.expression << p_expression
	>> _self 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_scatter.pop()
	##
	>> _self 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_scatter.decode_on(p_stream)
	_local par? << _true 
	_if par? _then p_stream.write("(") _endif 
	p_stream.write(" _scatter ")
	.expression.decode_on(p_stream)
	_if par? _then p_stream.write(")") _endif 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_scatter.remainder()
	##
	>> dcn_gathered.new(_self)
_endmethod
$
