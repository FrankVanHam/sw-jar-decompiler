_package deco
$

#remex(:dcn_try)
$

_pragma(classify_level=restricted, topic={decompiler})
## Node for a try structure.
def_slotted_exemplar( :dcn_try,
	{
		{:condition, _unset, :readable},
		{:body,      _unset, :readable},
		{:whens,     _unset, :readable},
		{:results,   _unset, :readable}
	}, :dcn_base)
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_try.new(p_condition, p_body, p_whens)
	_return _clone.init(p_condition, p_body, p_whens)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_try.init(p_condition, p_body, p_whens)
	assert(p_body _isnt _unset)
	.condition << p_condition
	.body      << p_body
	.whens     << p_whens
	_return _self
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _iter _method dcn_try.whens_and_body()
	##
	_for i_vec _over .whens.fast_elements()
	_loop
		_loopbody(_scatter i_vec)
	_endloop 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_try.accept_body_visitor(visitor)
	.body.accept_body_visitor(visitor)
	
	_for i_cond, i_body _over _self.whens_and_body()
	_loop
		i_body.accept_body_visitor(visitor)
	_endloop 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_try.decode_on(p_stream)
	p_stream.write( "_try ")
	_if .condition _isnt _unset
	_then
		p_stream.write( "_with ", .condition)
	_endif 
	p_stream.newline()
	p_stream.indent(4)
	.body.decode_on(p_stream)
	p_stream.newline()
	p_stream.unindent(4)
	
	_for i_cond, i_body _over _self.whens_and_body()
	_loop
		p_stream.write( "_when ")
		_self.write_list_on(p_stream, i_cond)
		p_stream.newline()
		p_stream.indent(4)
		i_body.decode_on(p_stream)
		p_stream.newline()
		p_stream.unindent(4)
	_endloop 
	p_stream.write( "_endtry")
_endmethod
$
