##
## File            : $File: (sw.magik) $
## SCM             : $URL$
##
## Copyright       : Realworld Systems
##                   e-mail  : support@realworld-systems.com
##                   address : Venusstraat 17, 4105 JH Culemborg, The Netherlands
##                   tel     : +31(0)345 614406
##                   fax     : +31(0)345 614319
##
## Contains        : 
##
##
## Date written    : 2012-04-05
## Date changed    : $Date$
## Revision        : $Rev$

_package sw
$


_pragma(classify_level=restricted, topic={decompiler})
_method object.deco_decode_as_constant_on(a_stream, const)
	a_stream.write(_self.deco_name )
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method number_mixin.deco_decode_as_constant_on(a_stream, const)
	_self.write_on(a_stream)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method complex.deco_decode_as_constant_on(a_stream, const)
	_return _super(complex_number_mixin).deco_decode_as_constant_on(a_stream, const)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method complex_float.deco_decode_as_constant_on(a_stream, const)
	_return _super(complex_number_mixin).deco_decode_as_constant_on(a_stream, const)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method rational.deco_decode_as_constant_on(a_stream, const)
	_return _super(simple_number_mixin).deco_decode_as_constant_on(a_stream, const)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method integer.deco_decode_as_constant_on(a_stream, const)
	_return _super(integral_number_mixin).deco_decode_as_constant_on(a_stream, const)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method bignum.deco_decode_as_constant_on(a_stream, const)
	_return _super(integral_number_mixin).deco_decode_as_constant_on(a_stream, const)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method float.deco_decode_as_constant_on(a_stream, const)
	_if _self = float.infinity
	_then
		a_stream.write( "(1.0/0)" )
	_elif _self = float.minus_infinity
	_then
		a_stream.write( "(-1.0/0)" )
	_else
		_super(simple_number_mixin).deco_decode_as_constant_on(a_stream, const)
	_endif 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method global_variable.deco_decode_as_constant_on(a_stream, const)
	const.decode_as_global_on(a_stream, _self)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method symbol.deco_decode_as_constant_on(a_stream, const)
	_self.show_on(a_stream)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method value_holder.deco_decode_as_constant_on(a_stream, const)
	_self.value.deco_decode_as_constant_on(a_stream, const)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method unset.deco_decode_as_constant_on(a_stream, const)
	a_stream.write("_unset")
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method true.deco_decode_as_constant_on(a_stream, const)
	a_stream.write("_true")
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method false.deco_decode_as_constant_on(a_stream, const)
	a_stream.write("_false")
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method maybe.deco_decode_as_constant_on(a_stream, const)
	a_stream.write("_maybe")
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method character.deco_decode_as_constant_on(a_stream, const)
	_self.show_on(a_stream)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method simple_vector.deco_decode_as_constant_on(a_stream, const)
	const.decode_as_vector_on(a_stream, _self)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method char16_vector.deco_decode_as_constant_on(a_stream, const)
	const.decode_as_string_on(a_stream, _self)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method binary_operator.deco_decode_as_call_on(a_stream, call)
	_return call.decode_as_binary_operator_on(a_stream, _self)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method global_variable.deco_decode_as_call_on(a_stream, call)
	_return call.decode_as_global_on(a_stream, .key )
_endmethod
$
