##
## File            : $File: (dcn_local_declaration.magik) $
## SCM             : $URL$
##
## Copyright       : Realworld Systems
##                   e-mail  : support@realworld-systems.com
##                   address : Venusstraat 17, 4105 JH Culemborg, The Netherlands
##                   tel     : +31(0)345 614406
##                   fax     : +31(0)345 614319
##
## Contains        : 
##
##
## Date written    : 2012-04-02
## Date changed    : $Date$
## Revision        : $Rev$

_package deco
$


#remex(:dcn_local_declaration)
$

_pragma(classify_level=restricted, topic={decompiler})
## node for a local.
def_slotted_exemplar(:dcn_local_declaration,
		     {
			     {:name, _unset, :readable},
			     {:type, _unset, :readable}
		     }, :dcn_base )
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_local_declaration.new(p_name, p_type)
	
	_return _clone.init(p_name, p_type)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_local_declaration.init(p_name, p_type)
	assert(p_name.is_class_of?(""))
	assert(p_type.is_class_of?(""))
	.name << p_name
	.type << p_type
	_return _self
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_local_declaration.is_type?(p_type)
	assert(p_type.is_class_of?(""))
	>> .type = p_type
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_local_declaration.decode_on(p_stream)
	p_stream.write("_local ", .name )
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_local_declaration.decode_none_declaring_on(p_stream)
	p_stream.write(.name)
_endmethod
$
