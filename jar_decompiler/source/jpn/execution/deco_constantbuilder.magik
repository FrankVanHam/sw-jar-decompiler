_package deco
$

_pragma(classify_level=restricted, topic={jar_decompiler})
def_slotted_exemplar(:deco_constantbuilder, {}, :deco_execution_base)
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method deco_constantbuilder.stringbootstrap(p_parser, p_type_node, p_value_node)
	##
	_local type << p_type_node.string_value
	_local str_value << p_value_node.string_value

	>> _if type = "symbol"
	   _then
		   >> dcn_constant.new_symbol(str_value)
	   _elif type = "string"
	   _then
		   >> dcn_constant.new_string(str_value)
	   _else
		   condition.raise(:deco_unexpected_node, :node, p_type_node)
	   _endif
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method deco_constantbuilder.maybebootstrap(p_parser, p_name_node)
	##
	>> dcn_constant.new_literal("_maybe")
_endmethod
$


_pragma(classify_level=restricted, topic={jar_decompiler})
_method deco_constantbuilder.symbolbootstrap(p_parser, p_type_node, p_value_node)
	##
	_local type << p_type_node.string_value
	_local str_value << p_value_node.string_value

	>> _if type = "symbol"
	   _then
		   >> dcn_constant.new_symbol(str_value)
	   _else
		   condition.raise(:deco_unexpected_node, :node, p_type_node)
	   _endif
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method deco_constantbuilder.globalaccessorbootstrap(p_parser, p_type, p_package, p_name)
	## 
	>> dcn_global.new(p_name.string_value, p_package.string_value, _true)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method deco_constantbuilder.procwithemptyenvbootstrap(_gather p_args)
	## delegate to magikobjectutils who is better fit to create
	## methods and procs.
	>> deco_magikobjectutils.createproc(_scatter p_args)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method deco_constantbuilder.procbootstrap(_gather p_args)
	##
	>> deco_magikobjectutils.createprocwithenv(_scatter p_args)
_endmethod
$
