_package deco
$

#remex(:deco_tuplebuilder)

_pragma(classify_level=restricted, topic={jar_decompiler})
def_slotted_exemplar(:deco_tuplebuilder, {}, :deco_execution_base)
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method deco_tuplebuilder.bootstrap(p_parser, p_thing, _gather p_expression_nodes)
	##
	_local exprs << _self.expressions(p_parser, _scatter p_expression_nodes)
	>> _if exprs.size = 1
	   _then 
		   >> exprs[1]
	   _else
		   >> dcn_multiple.new(exprs)
	   _endif 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method deco_tuplebuilder.expressions(p_parser, _gather p_expression_nodes)
	## 
	_local exprs << rope.new_for(p_expression_nodes.size)
	_for i_exp _over p_expression_nodes.fast_elements()
	_loop
		_local exp << p_parser.parse_expression(i_exp)
		_if exp _isnt _unset
		_then 
			exprs.add(exp)
		_endif
	_endloop
	>> exprs
_endmethod
$

