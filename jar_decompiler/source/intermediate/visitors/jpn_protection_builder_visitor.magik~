_package deco
$

#remex(:jpn_protection_builder_visitor)

_pragma(classify_level=restricted, topic={jar_decompiler})
##
#        try {
#            ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("do()", (Object)_self));
#        }
#        finally {
#            InterruptInfrastructure.disableInterrupts();
#            try {
#                ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("safe()", (Object)_self));
#            }
#            finally {
#                InterruptInfrastructure.enableInterrupts();
#            }
#        }
#        return ResultTuple.EMPTY_TUPLE;
#    }
##
def_slotted_exemplar(:jpn_protection_builder_visitor,
	{})
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_protection_builder_visitor.new()
	>> _clone.init()
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_private _method jpn_protection_builder_visitor.init()
	>> _self 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_protection_builder_visitor.accept(p_body)
	##
	_local sts << p_body.statements
	_local prev << _unset
#	_if sts[1].is_class_of?(dcn_no_op).not
#	_then 
#		_global x
#		x << sts
#		2.stop
#	_endif #
	_for i_index, i_node _over sts.fast_keys_and_elements()
	_loop
		_if _self.should_convert?(i_node)
		_then
			sts[i_index] << _self.convert(i_node)
		_endif 
	_endloop 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_protection_builder_visitor.should_convert?(p_node)
	##
	_if p_node.is_class_of?(dcn_unfinished_try).not _then _return _false, :dcn_unfinished_try _endif
	_if p_node.finally_body _is _unset _then _return _false, :no_finally _endif
	_if p_node.finally_body.statements.empty? _is _unset _then _return _false, :empty_finally _endif
	_if p_node.finally_body.statements[1].is_class_of?(dcn_interrupts).not _then _return _false, :dcn_interrupts _endif
	
	>> _true 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_protection_builder_visitor.convert(p_try_node)
	##
	
	_local protect_body << p_try_node.try_body.copy()
	_local protection_body << p_try_node.finally_body.statements[2].try_body.copy()
	>> dcn_protect.new(protect_body, protection_body)
_endmethod
$


