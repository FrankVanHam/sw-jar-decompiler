_package deco
$

_pragma(classify_level=restricted, topic={jar_decompiler})
def_slotted_exemplar(:jpn_loop_while_visitor,{})
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_loop_while_visitor.new()
	>> _clone 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_loop_while_visitor.accept(p_body)
	##
	_local sts << p_body.statements
	_for i_index, i_node _over sts.fast_keys_and_elements()
	_loop
		_if i_node.is_class_of?(dcn_loop)
		_then
			_if _self.is_while?(i_node)
			_then
				_self.convert(i_node)
			_endif
		_endif 			
	_endloop 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_loop_while_visitor.is_while?(p_loop_node)
	##
	>> p_loop_node.while _isnt _unset _andif
		p_loop_node.while.is_class_of?(dcn_not)
_endmethod
$


_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_loop_while_visitor.convert(p_loop_node)
	##
	_local branch << dcn_branch.new({{p_loop_node.while.expression, dcn_break.new()}})
	p_loop_node.body.statements.add(branch)
_endmethod
$
