_package deco
$

#remex(:jpn_iter_visitor)

_pragma(classify_level=restricted, topic={jar_decompiler})
def_slotted_exemplar(:jpn_iter_visitor,
	{
		{:file, _unset}
	})
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_iter_visitor.new(p_file)
	>> _clone.init(p_file)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_private _method jpn_iter_visitor.init(p_file)
	.file << p_file
	>> _self 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_iter_visitor.accept(p_body)
	##
	_local sts << p_body.statements
	_for i_index, i_node _over sts.fast_keys_and_elements()
	_loop
		(ok?, idx) << _self.finally_iter?(i_node)
		_if ok?
		_then
			sts[i_index] << _self.convert_to_finally_iter(i_node, idx)
		_endif
	_endloop 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_private _method jpn_iter_visitor.iter?(p_node)
	>> p_node.is_kind_of?(dcn_local_assignment) _andif
		p_node.expression.is_kind_of?(dcn_iter)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_iter_visitor.finally_iter?(p_node)
	##
	_if p_node.is_class_of?(dcn_unfinished_try).not _then _return _false, :not_unfinised_try _endif
	_if p_node.args _is _unset _then _return _false, :no_args _endif
	_if p_node.args.size<1 _then _return _false, :no_args_size _endif
	_if p_node.args[1] <> "leave" _then _return _false, :no_leave _endif

	_for i_index, i_stat _over p_node.try_body.statements.fast_keys_and_elements()
	_loop
		_if _self.iter?(i_stat)
		_then
			_return _true, i_index
		_endif
	_endloop 
	>> _false 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_iter_visitor.convert_to_finally_iter(p_node, p_index)
	##
	_local assignment_node << p_node.try_body.statements[p_index]
	_local try_node << assignment_node.expression
	
	_local finally_statements << p_node.try_body.statements.slice_to_end(p_index+1)
		
	_if finally_statements.empty?.not
	_then
		_local finally_body << dcn_body.new(finally_statements)
		try_node.finally_body << finally_body
	_endif
	>> assignment_node
_endmethod
$
