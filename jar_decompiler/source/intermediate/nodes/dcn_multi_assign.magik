##
## File            : $File: (dcn_multi_assign.magik) $
## SCM             : $URL$
##
## Copyright       : Realworld Systems
##                   e-mail  : support@realworld-systems.com
##                   address : Venusstraat 17, 4105 JH Culemborg, The Netherlands
##                   tel     : +31(0)345 614406
##                   fax     : +31(0)345 614319
##
## Contains        : 
##
##
## Date written    : 2012-04-06
## Date changed    : $Date$
## Revision        : $Rev$

_package deco
$

remex(:dcn_multi_assign)
$

_pragma(classify_level=restricted, topic={decompiler})
## Node for a construct where multiple receivers are assigned
## by a single node.
## (a,b,c) << self.give_me()
##
def_slotted_exemplar(:dcn_multi_assign,
		     {{:node, _unset},
		      {:top_of_stack, _unset},
		      {:num_receivers, _unset},
		      {:receivers,_unset, :readable}},
		     {:dcn_base, :dcn_assign_mixin})
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_multi_assign.new(node, num_receivers, top_of_stack)
	_return _clone.init(node, num_receivers, top_of_stack)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_multi_assign.init(node, num_receivers, top_of_stack)
	.node << node
	.top_of_stack << top_of_stack
	.num_receivers << num_receivers
	.receivers << rope.new()
	_return _self
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_multi_assign.accept_node_visitor(visitor)
	.node << .node.accept_node_visitor(visitor)
	_self.accept_node_visitor_in_vector(visitor, .receivers)
	_return _super.accept_node_visitor(visitor)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_multi_assign.accept_body_visitor(visitor)
	.node.accept_body_visitor(visitor)
	_self.accept_body_visitor_in_vector(visitor, .receivers)
	_return _super.accept_body_visitor(visitor)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_multi_assign.is_assign?
	_return _true 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_multi_assign.top_of_stack_during_decompile
	_return .top_of_stack
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_multi_assign.add_receiver( dcn_node )
	.receivers.add_first( dcn_node )
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_multi_assign.has_rhs?
	_return _true 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_multi_assign.complete?
	_return .receivers.size = .num_receivers
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_multi_assign.decode_on(a_stream, _optional parent, statements)
	a_stream.write( "(" )
	_self.decode_lhs_on(a_stream)
	a_stream.write( ") << " )
	a_stream.write( "(" )
	_self.decode_rhs_on(a_stream)
	a_stream.write( ")" )
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_multi_assign.decode_lhs_on(a_stream)
	_for index, elem _over .receivers.fast_keys_and_elements()
	_loop
		_if index = .receivers.size
		_then
			_if .node.scattered?
			_then
				a_stream.write( " _gather " )
			_endif
		_endif 
		elem.decode_receiver_on(a_stream)
		_if index <> .receivers.size _then a_stream.write(", ") _endif 
	_endloop
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_multi_assign.decode_rhs_on(a_stream)
	.node.decode_on( a_stream )
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_multi_assign.is_single_assign?
	_return _false
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_multi_assign.has_results?
	_return _false 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_multi_assign.result_count
	_return 0
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_multi_assign.expression
	_return _unset
_endmethod
$

