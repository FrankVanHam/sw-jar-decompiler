##
## File            : $File: (dcn_loopbody.magik) $
## SCM             : $URL$
##
## Copyright       : Realworld Systems
##                   e-mail  : support@realworld-systems.com
##                   address : Venusstraat 17, 4105 JH Culemborg, The Netherlands
##                   tel     : +31(0)345 614406
##                   fax     : +31(0)345 614319
##
## Contains        : 
##
##
## Date written    : 2012-04-06
## Date changed    : $Date$
## Revision        : $Rev$

_package deco
$

remex(:dcn_loopbody)
$

_pragma(classify_level=restricted, topic={decompiler})
## Node for a _loopbody statement in a iter method or iter
## procedure. 
def_slotted_exemplar(:dcn_loopbody,
		     {{:token, _unset},
		      {:args,_unset, :readable}},
		     :dcn_base)
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_loopbody.new(token, args)
	_return _clone.init(token, args)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_loopbody.init(token, args)
	.token << token
	.args << rope.deco_check_type(args)
	_return _self
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_loopbody.accept_node_visitor(visitor)
	_self.accept_node_visitor_in_vector(visitor, .args)
	_return _super.accept_node_visitor(visitor)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_loopbody.accept_body_visitor(visitor)
	_self.accept_body_visitor_in_vector(visitor, .args)
	_return _super.accept_body_visitor(visitor)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_loopbody.has_results?
	numres << .token.numres
	_if numres = -1
	_then
		_return _true
	_else
		_return numres > 0
	_endif 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_loopbody.result_count
	numres << .token.numres
	_if numres = -1
	_then
		_return 1
	_else
		_return numres
	_endif 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_loopbody.decode_on(a_stream, _optional parent, statements)
	a_stream.write( "_loopbody (")
	_self.decode_node_list_on(a_stream, .args)
	a_stream.write( ")")
	a_stream.newline()
_endmethod
$


