##
## File            : $File: (dcn_result.magik) $
## SCM             : $URL$
##
## Copyright       : Realworld Systems
##                   e-mail  : support@realworld-systems.com
##                   address : Venusstraat 17, 4105 JH Culemborg, The Netherlands
##                   tel     : +31(0)345 614406
##                   fax     : +31(0)345 614319
##
## Contains        : 
##
##
## Date written    : 2012-04-01
## Date changed    : $Date$
## Revision        : $Rev$

_package deco
$

remex(:dcn_result)
$


_pragma(classify_level=restricted, topic={decompiler})
## Represents the result of an invocation. Note that self is
## not required to decode, self will just indicate how the
## receiver should be prepared to receive the results.
def_slotted_exemplar(:dcn_result,
	{
		{:token, _unset}
	}, :dcn_base)
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_result.new(token)
	_return _clone.init(token)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_result.init(token)
	.token << token
	_return _self
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_result.scattered?
	_return .token.numres = -1
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_result.has_results?
	_if _self.scattered?
	_then
		_return _true
	_else
		_return _self.result_count <> 0
	_endif
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_result.result_count
	res << .token.numres
	_if res = -1
	_then
		_return 1
	_endif 
	_return res
_endmethod
$

