_package deco
$
#remex(:dcn_global_declaration)

_pragma(classify_level=restricted, topic={decompiler})
def_slotted_exemplar(:dcn_global_declaration,
		     {
			     {:package, _unset, :readable},
			     {:name, _unset, :readable},
			     {:value, _unset, :readable}
		     }, :dcn_base )
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_global_declaration.new(p_name, p_package, p_value)
	>> _clone.init(p_name, p_package, p_value)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_global_declaration.init(p_name, p_package, p_value)
	.name << p_name
	.package << p_package
	.value << p_value
	>> _self 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_global_declaration.decode_on(p_stream)
	##
	p_stream.write("_global _constant ", .name, " << " )
	.value.decode_on(p_stream)
_endmethod
$
