##
## File            : $File: (dcn_try.magik) $
## SCM             : $URL$
##
## Copyright       : Realworld Systems
##                   e-mail  : support@realworld-systems.com
##                   address : Venusstraat 17, 4105 JH Culemborg, The Netherlands
##                   tel     : +31(0)345 614406
##                   fax     : +31(0)345 614319
##
## Contains        : 
##
##
## Date written    : 2012-04-06
## Date changed    : $Date$
## Revision        : $Rev$

_package deco
$

#remex(:dcn_try)
$

_pragma(classify_level=restricted, topic={decompiler})
## Node for a try structure.
def_slotted_exemplar( :dcn_try,
	{
		{:condition, _unset, :readable},
		{:body,_unset, :readable},
		{:whens, _unset, :readable},
		{:results, _unset, :readable}
	}, :dcn_base)
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_try.new(condition, body, whens)
	_return _clone.init(condition, body, whens)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_try.init(condition, body, whens)
	.condition << condition
	.body << body
	.whens << whens
	_return _self
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _iter _method dcn_try.whens_and_body()
	##
	_for i_vec _over .whens.fast_elements()
	_loop
		_loopbody(_scatter i_vec)
	_endloop 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_try.accept_body_visitor(visitor)
	_if .body _isnt _unset
	_then 
		.body.accept_body_visitor(visitor)
	_endif
	_for i_cond, i_body _over _self.whens_and_body()
	_loop
		i_body.accept_body_visitor(visitor)
	_endloop 
_endmethod
$


#_pragma(classify_level=restricted, topic={decompiler})
#_method dcn_try.accept_node_visitor(visitor)
#	_if .condition _isnt _unset
#	_then 
#		.condition << .condition.accept_node_visitor(visitor)
#	_endif 
#	_self.accept_node_visitor_in_vector(visitor, .body)
#	_for prop _over .whens.fast_elements()
#	_loop
#		_self.accept_node_visitor_in_vector(visitor, prop[:statements])
#		_self.accept_node_visitor_in_vector(visitor, prop[:results])
#	_endloop 
#	_self.accept_node_visitor_in_vector(visitor, .results)
#	_return _super.accept_node_visitor(visitor)
#_endmethod
#$
#

#
#_pragma(classify_level=restricted, topic={decompiler})
#_method dcn_try.result_count
#	_return .results.size
#_endmethod
#$
#
#_pragma(classify_level=restricted, topic={decompiler})
#_method dcn_try.decode_list_on(a_stream, list)
#	_for index, elem _over list.fast_keys_and_elements()
#	_loop
#		a_stream.write(elem)
#		_if index <> list.size _then a_stream.write(", ") _endif 
#	_endloop
#_endmethod
#$
#
_pragma(classify_level=restricted, topic={decompiler})
_method dcn_try.decode_on(p_stream)
	p_stream.write( "_try ")
	_if .condition _isnt _unset
	_then
		p_stream.write( "_with ", .condition)
	_endif 
	p_stream.newline()
	p_stream.indent(4)
	.body.decode_on(p_stream)
	p_stream.newline()
	p_stream.unindent(4)
#	_if .results.empty?.not
#	_then
#		p_stream.write(">> ")
#		_self.decode_node_list_on(p_stream, .results)
#		p_stream.newline()
#	_endif
	_for i_cond, i_body _over _self.whens_and_body()
	_loop
		p_stream.write( "_when ")
		_self.decode_list_on(p_stream, i_cond)
		p_stream.newline()
		p_stream.indent(4)
		i_body.decode_on(p_stream)
		p_stream.newline()
		p_stream.unindent(4)
	_endloop 
	p_stream.write( "_endtry")
_endmethod
$
