##
## File            : $File: (dcn_mixin.magik) $
## SCM             : $URL$
##
## Copyright       : Realworld Systems
##                   e-mail  : support@realworld-systems.com
##                   address : Venusstraat 17, 4105 JH Culemborg, The Netherlands
##                   tel     : +31(0)345 614406
##                   fax     : +31(0)345 614319
##
## Contains        : 
##
##
## Date written    : 2012-01-28
## Date changed    : $Date$
## Revision        : $Rev$

_package deco
$

remex(:dcn_mixin)
$


_pragma(classify_level=restricted, topic={decompiler})
## Node for decompiling a mixin
def_slotted_exemplar(:dcn_mixin,
	{}, :dcn_exemplar_base )
$


_pragma(classify_level=restricted, topic={decompiler})
_private _iter _method dcn_mixin.parents()
	_for i_name _over .exemplar.define_method_target.metadata[:behaviour_sources].keys()
	_loop
		_loopbody( i_name ) 
	_endloop
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_mixin.decode_parents_on(a_stream)
	comma? << _false 
	_for i_name _over _self.parents()
	_loop
		_if (comma? ^<< _true) _then a_stream.write(", ") _endif 
		a_stream.write( ":", i_name )
	_endloop
_endmethod
$


_pragma(classify_level=restricted, topic={decompiler})
_method dcn_mixin.decode_class_on(a_stream)
	##
	## Write a formated output on the stream
	##
	a_stream.write( "def_mixin( :", .exemplar.deco_name, ",")
	a_stream.newline()
	a_stream.indent()
	a_stream.write("{")
	_self.decode_parents_on(a_stream)
	a_stream.write("})")
	a_stream.unindent()
	a_stream.newline()
_endmethod
$
