##
## File            : $File: (dcn_block.magik) $
## SCM             : $URL$
##
## Copyright       : Realworld Systems
##                   e-mail  : support@realworld-systems.com
##                   address : Venusstraat 17, 4105 JH Culemborg, The Netherlands
##                   tel     : +31(0)345 614406
##                   fax     : +31(0)345 614319
##
## Contains        : 
##
##
## Date written    : 2012-04-06
## Date changed    : $Date$
## Revision        : $Rev$

_package deco
$

remex(:dcn_block)
$

_pragma(classify_level=restricted, topic={decompiler})
## Node for a block statement.
## note that the _block _endblock statement has no
## representative in the code_vector, so there is no token for
## it. 
def_slotted_exemplar(:dcn_block,
		      {{:statements, _unset}},
		      :dcn_base)
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_block.new(statements)
	_return _clone.init( statements)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_block.init(statements)
	.statements << rope.deco_check_type(statements)
	_return _self 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_block.accept_node_visitor(visitor)
	_self.accept_node_visitor_in_vector(visitor, .statements)
	_return _super.accept_node_visitor(visitor)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_block.accept_body_visitor(visitor)
	_self.accept_body_visitor_in_vector(visitor, .statements)
	
	visitor.visit(_self, .statements)
	_super.accept_body_visitor(visitor)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_block.decode_on(a_stream, _optional parent, statements)
	a_stream.write( "_block")
	a_stream.newline()
	a_stream.indent()
	_self.decode_statements_on(a_stream, .statements)
	a_stream.unindent()
	a_stream.write( "_endblock")
	a_stream.newline()
_endmethod
$
