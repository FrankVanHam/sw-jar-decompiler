##
## File            : $File: (dcn_lock.magik) $
## SCM             : $URL$
##
## Copyright       : Realworld Systems
##                   e-mail  : support@realworld-systems.com
##                   address : Venusstraat 17, 4105 JH Culemborg, The Netherlands
##                   tel     : +31(0)345 614406
##                   fax     : +31(0)345 614319
##
## Contains        : 
##
##
## Date written    : 2012-04-06
## Date changed    : $Date$
## Revision        : $Rev$

_package deco
$

remex(:dcn_lock)
$

_pragma(classify_level=restricted, topic={decompiler})
## node for a lock statement. This will typically be part of a
## dcn_protect node.
def_slotted_exemplar(:dcn_lock,
		     {{:expression,_unset, :readable}},
		     :dcn_base)
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_lock.new(expression)
	_return _clone.init(expression)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_lock.init(expression)
	.expression << expression
	_return _self
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_lock.is_lock?
	_return _true
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_lock.accept_node_visitor(visitor)
	.expression << .expression.accept_node_visitor(visitor)
	_return _super.accept_node_visitor(visitor)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_lock.accept_body_visitor(visitor)
	.expression.accept_body_visitor(visitor)
	_return _super.accept_body_visitor(visitor)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_lock.decode_on(a_stream, _optional parent, statements)
	
_endmethod
$
