##
## File            : $File: (dcn_local.magik) $
## SCM             : $URL$
##
## Copyright       : Realworld Systems
##                   e-mail  : support@realworld-systems.com
##                   address : Venusstraat 17, 4105 JH Culemborg, The Netherlands
##                   tel     : +31(0)345 614406
##                   fax     : +31(0)345 614319
##
## Contains        : 
##
##
## Date written    : 2012-04-02
## Date changed    : $Date$
## Revision        : $Rev$

_package deco
$


#remex(:dcn_local)
$

_pragma(classify_level=restricted, topic={decompiler})
## node for a local.
def_slotted_exemplar(:dcn_local,
		     {
			     {:index,_unset, :readable},
			     {:name, _unset, :readable},
			     {:object_type, _unset, :readable},
			     {:type, _unset, :readable},
			     {:must_declare_local?, _unset, :readable},
			     {:declared?, _unset, :readable}
		     }, :dcn_base )
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_local.new(index, name, _optional type, p_object_type)
	
	_return _clone.init(index, name, type, p_object_type)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_local.init(index, name, type, p_object_type)
	.index << index
	.name << name
	.must_declare_local? << _false
	.type << type.default(:local)
	.object_type << p_object_type
	.declared? << _false 
	assert(.type _is :local _orif .type _is :parameter)
	_return _self
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_local.ignore?
	##
	>> .name.matches?("cfr_ignored*")
_endmethod
$


_pragma(classify_level=restricted, topic={decompiler})
_method dcn_local.is_local?
	_return _true  
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_local.make_name_local()
	.name << write_string("p", .name)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_local.declare()
	_if _not _self.parameter?
	_then 
		.declared? << _true 
	_endif 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_local.force_declare_local()
	_if _not _self.parameter?
	_then 
		.must_declare_local? << _true
	_endif 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_local.parameter?
	_return .type _is :parameter
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_local.is_test_for_true?
	_return _true
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_local.result_count
	_return 1
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_local.scattered?
	_return _false 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_local.pop()
	##
	>> dcn_pop.new(_self)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method dcn_local.remainder(p_nr)
	##
	>> dcn_remainder.new(p_nr)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_local.decode_on( a_stream, _optional parent, statements)
	a_stream.write( .name )
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_local.show_on( a_stream)
	a_stream.write( _self.class_name, "(", .name, ")" )
_endmethod
$
