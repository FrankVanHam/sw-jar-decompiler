##
## File            : $File: (dcn_loop.magik) $
## SCM             : $URL$
##
## Copyright       : Realworld Systems
##                   e-mail  : support@realworld-systems.com
##                   address : Venusstraat 17, 4105 JH Culemborg, The Netherlands
##                   tel     : +31(0)345 614406
##                   fax     : +31(0)345 614319
##
## Contains        : 
##
##
## Date written    : 2012-04-06
## Date changed    : $Date$
## Revision        : $Rev$

_package deco
$


remex(:dcn_loop)
$

_pragma(classify_level=restricted, topic={decompiler})
## Node for a loop structure. Note that their is no matching
## token in the code_vector for a loop. the loop is constructed
## from a backwards jump at some point. that is the reason why
## there is no token object.
def_slotted_exemplar(:dcn_loop,
		      {{:tag, _unset},
		       {:statements, _unset},
		       {:results, _unset}},
		      :dcn_base)
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_loop.new(tag, statements, results)
	_return _clone.init(tag, statements, results)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_loop.init(tag, statements, results )
	assert(results _isnt _unset )
	.tag << tag
	.statements << rope.deco_check_type(statements)
	.results << rope.deco_check_type(results)
	_return _self 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_loop.accept_node_visitor(visitor)
	_self.accept_node_visitor_in_vector(visitor, .statements)
	_self.accept_node_visitor_in_vector(visitor, .results)
	_return _super.accept_node_visitor(visitor)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_loop.accept_body_visitor(visitor)
	_self.accept_body_visitor_in_vector(visitor, .statements)
	_self.accept_body_visitor_in_vector(visitor, .results)
	
	visitor.visit(_self, .statements)
	_super.accept_body_visitor(visitor)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_loop.decode_on(a_stream, _optional parent, statements)
	a_stream.write( "_loop")
	_if .tag _isnt _unset
	_then
		a_stream.write( " @", .tag)
	_endif 
	a_stream.newline()
	a_stream.indent()
	_self.decode_statements_on(a_stream, .statements)
	a_stream.unindent()
	a_stream.write( "_endloop")
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_loop.result_count
	_return .results.size
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_loop.has_results?
	_return .results.empty?.not 
_endmethod
$
