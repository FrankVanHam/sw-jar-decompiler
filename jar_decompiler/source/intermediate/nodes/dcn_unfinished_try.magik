##
## File            : $File: (dcn_block.magik) $
## SCM             : $URL$
##
## Copyright       : Realworld Systems
##                   e-mail  : support@realworld-systems.com
##                   address : Venusstraat 17, 4105 JH Culemborg, The Netherlands
##                   tel     : +31(0)345 614406
##                   fax     : +31(0)345 614319
##
## Contains        : 
##
##
## Date written    : 2012-04-06
## Date changed    : $Date$
## Revision        : $Rev$

_package deco
$

#remex(:dcn_unfinished_try)
$

_pragma(classify_level=restricted, topic={decompiler})
## Node for a unfinished try statement.
def_slotted_exemplar(:dcn_unfinished_try,
		      {
			      {:try_body,   _unset, :readable},
			      {:args,       _unset, :readable},
			      {:catch_body, _unset, :readable}
			      },
		      :dcn_base)
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_unfinished_try.new(p_try_body, p_catch_body, p_args)
	_return _clone.init(p_try_body, p_catch_body, p_args)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_unfinished_try.init(p_try_body, p_catch_body, p_args)
	.try_body << p_try_body
	.catch_body << p_catch_body
	.args << p_args
	_return _self 
_endmethod
$

#_pragma(classify_level=restricted, topic={decompiler})
#_method dcn_unfinished_try.accept_node_visitor(visitor)
#	_self.accept_node_visitor_in_vector(visitor, .statements)
#	_return _super.accept_node_visitor(visitor)
#_endmethod
#$
#
_pragma(classify_level=restricted, topic={decompiler})
_method dcn_unfinished_try.accept_body_visitor(visitor)
	.try_body.accept_body_visitor(visitor)
	_if .catch_body _isnt _unset
	_then
		.catch_body.accept_body_visitor(visitor)
	_endif 
_endmethod
$


_pragma(classify_level=restricted, topic={decompiler})
_method dcn_unfinished_try.decode_on(a_stream, _optional parent, statements)
	a_stream.write( "_unfinished_try")
	a_stream.newline()
	a_stream.indent(4)
	.try_body.decode_on(a_stream)
	a_stream.newline()
	a_stream.unindent(4)
	a_stream.write( "_catch")
	_if .catch_body _isnt _unset
	_then 
		a_stream.newline()
		a_stream.indent(4)
		.catch_body.decode_on(a_stream)
		a_stream.newline()
		a_stream.unindent(4)
	_endif 
	a_stream.write( "_endunfinished_try")
_endmethod
$
