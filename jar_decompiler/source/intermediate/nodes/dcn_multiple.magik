_package deco
$

_pragma(classify_level=restricted, topic={decompiler})
## node for a local.
def_slotted_exemplar(:dcn_multiple,
		     {
			     {:expressions, _unset, :readable}
		     }, :dcn_base )
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_multiple.new(p_expressions)
	##
	>> _clone.init(p_expressions)
_endmethod
$


_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_multiple.init(p_expressions)
	.expressions << p_expressions
	>> _self 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_multiple.decode_on(p_stream)
	##
	p_stream.write("(")
	_local c? << _false 
	_for i_exp _over .expressions.fast_elements()
	_loop
		_if (c? ^<<_true) _then p_stream.write(", ") _endif
		i_exp.decode_on(p_stream)
	_endloop
	p_stream.write(")")
_endmethod
$
