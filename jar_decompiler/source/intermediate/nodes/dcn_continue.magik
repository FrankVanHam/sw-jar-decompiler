##
## File            : $File: (dcn_continue.magik) $
## SCM             : $URL$
##
## Copyright       : Realworld Systems
##                   e-mail  : support@realworld-systems.com
##                   address : Venusstraat 17, 4105 JH Culemborg, The Netherlands
##                   tel     : +31(0)345 614406
##                   fax     : +31(0)345 614319
##
## Contains        : 
##
##
## Date written    : 2012-04-06
## Date changed    : $Date$
## Revision        : $Rev$

_package deco
$


remex(:dcn_continue)
$

_pragma(classify_level=restricted, topic={decompiler})
## Node for a continue structure.
def_slotted_exemplar( :dcn_continue,
		       {
			       {:token, _unset},
			       {:tag, _unset},
			       {:results, _unset}
		       }, :dcn_base)
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_continue.new(token, tag, results)
	_return _clone.init(token, tag, results)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_continue.init(token, tag, results )
	.token << token
	.tag << tag
	.results << rope.deco_check_type(results)
	_return _self 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_continue.accept_node_visitor(visitor)
	_self.accept_node_visitor_in_vector(visitor, .results)
	_return _super.accept_node_visitor(visitor)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_continue.accept_body_visitor(visitor)
	_self.accept_body_visitor_in_vector(visitor, .results)
	_return _super.accept_body_visitor(visitor)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_continue.decode_on( a_stream, _optional parent, statements )
	_if .tag _isnt _unset 
	_then
		a_stream.write("_continue @", .tag)
	_else 
		a_stream.write("_continue")
	_endif
	_if _not .results.empty?
	_then
		a_stream.write( " _with ")
		_self.decode_node_list_on(a_stream, .results)
	_endif 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_continue.has_results?
	 _return .results.empty?.not
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_continue.is_continue?
	_return _true 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_continue.result_count
	 _return .results.size
_endmethod
$
