##
## File            : $File: (dcn_send_scatter.magik) $
## SCM             : $URL$
##
## Copyright       : Realworld Systems
##                   e-mail  : support@realworld-systems.com
##                   address : Venusstraat 17, 4105 JH Culemborg, The Netherlands
##                   tel     : +31(0)345 614406
##                   fax     : +31(0)345 614319
##
## Contains        : 
##
##
## Date written    : 2012-04-06
## Date changed    : $Date$
## Revision        : $Rev$

_package deco
$

remex(:dcn_send_scatter)
$

_pragma(classify_level=restricted, topic={decompiler})
## Node for a scattered send.
def_slotted_exemplar(:dcn_send_scatter,
		     {
			     {:split, _unset},
			     {:numres, _unset},
			     {:operand, _unset},
			     {:implicit?, _unset}
		     }, :dcn_base)
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_send_scatter.new(numres, operand, _optional implicit?)
	_return _clone.init(numres, operand, implicit?)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_send_scatter.init(numres, operand, implicit?)
	.numres << numres
	.operand << operand
	.split << _unset
	.implicit? << implicit?.default(_false)
	_return _self
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_send_scatter.is_send_scatter?
	_return _true 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_send_scatter.accept_node_visitor(visitor)
	.operand << .operand.accept_node_visitor(visitor)
	_return _super.accept_node_visitor(visitor)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_send_scatter.accept_body_visitor(visitor)
	.operand.accept_body_visitor(visitor)
	_return _super.accept_body_visitor(visitor)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_send_scatter.set_take(num)
	assert(.numres = 0)
	.numres << num
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_send_scatter.scattered?
	_return .numres = 0
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_send_scatter.result_count
	_return _if .numres <> 0
		_then
			>> .numres
		_elif .split _isnt _unset
		_then 
			>> .split + 1
		_else
			>> 0
		_endif 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_send_scatter.set_split(num)
	assert( .numres = 0)
	.split << num
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_send_scatter.decode_scattered_on( a_stream )
	_self.decode_on( a_stream )
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_send_scatter.decode_on( a_stream, _optional parent, statements )
	_if .implicit?
	_then
		.operand.decode_base_on( a_stream )
#		.operand.decode_as_receiver_on( a_stream )
	_else 
		a_stream.write( " _scatter " )
		.operand.decode_on( a_stream )
	_endif 
_endmethod
$
