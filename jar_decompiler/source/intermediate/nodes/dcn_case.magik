##
## File            : $File: (dcn_case.magik) $
## SCM             : $URL$
##
## Copyright       : Realworld Systems
##                   e-mail  : support@realworld-systems.com
##                   address : Venusstraat 17, 4105 JH Culemborg, The Netherlands
##                   tel     : +31(0)345 614406
##                   fax     : +31(0)345 614319
##
## Contains        : 
##
##
## Date written    : 2012-04-05
## Date changed    : $Date$
## Revision        : $Rev$

_package deco
$

remex(:dcn_case)
$

_pragma(classify_level=restricted, topic={decompiler})
## Node to represent _if _elif _else _endif structure.
def_slotted_exemplar(:dcn_case,
		     {
			     {:branches, _unset}
		    }, :dcn_base)
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_case.new()
	_return _clone.init()
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_case.init()
	.branches << rope.new()
	_return _self
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_case.accept_node_visitor(visitor)
	_self.accept_node_visitor_in_vector(visitor, .branches)
	_return _super.accept_node_visitor(visitor)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_case.accept_body_visitor(visitor)
	_self.accept_body_visitor_in_vector(visitor, .branches)
	_return _super.accept_body_visitor(visitor)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_case.results
	_if .branches.empty?.not
	_then 
		_return .branches[1].results
	_else
		_return {}
	_endif 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_case.result_count
	_if .branches.empty?.not
	_then 
		_return .branches[1].result_count
	_else
		_return 0
	_endif 
_endmethod
$


_pragma(classify_level=restricted, topic={decompiler})
_method dcn_case.add( branch )
	.branches.add(branch)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_case.add_to_case(c)
	_for br _over .branches.fast_elements()
	_loop
		c.add(br)
	_endloop
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_case.is_case_or_branch?
	_return _true
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_case.is_hidden_case?
	_return _false
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_iter _method dcn_case.branches()
	_for b _over .branches.fast_elements()
	_loop
		_loopbody(b)
	_endloop 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_case.decode_on(a_stream, _optional parent, statements )
	_for i_index, i_branch _over .branches.fast_keys_and_elements()
	_loop
		_if i_index = 1
		_then 
			a_stream.write( "_if ")
		_else
			a_stream.write( "_elif ")
		_endif 
		i_branch.decode_test_on(a_stream)
		a_stream.newline()
		i_branch.decode_then(a_stream)
		
		_if i_index _is .branches.size
		_then
			i_branch.decode_else(a_stream)
		_endif 	
	_endloop
	a_stream.write( "_endif ")
	a_stream.newline()
_endmethod
$
