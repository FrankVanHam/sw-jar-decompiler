##
## File            : $File: (dcn_slotted_exemplar.magik) $
## SCM             : $URL$
##
## Copyright       : Realworld Systems
##                   e-mail  : support@realworld-systems.com
##                   address : Venusstraat 17, 4105 JH Culemborg, The Netherlands
##                   tel     : +31(0)345 614406
##                   fax     : +31(0)345 614319
##
## Contains        : 
##
##
## Date written    : 2012-01-26
## Date changed    : $Date$
## Revision        : $Rev$

_package deco
$

remex(:dcn_slotted_exemplar)
$

_pragma(classify_level=restricted, topic={decompiler})
## Node to decompile a slotted_exemplar.
def_slotted_exemplar(:dcn_slotted_exemplar,
	{}, :dcn_exemplar_base)
$


_pragma(classify_level=restricted, topic={decompiler})
_private _iter _method dcn_slotted_exemplar.slots()
	_for descr _over .exemplar.deco_slot_descriptors()
	_loop
		_loopbody(descr)
	_endloop 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_slotted_exemplar.decode_slot_on(a_stream, descr)
	name << descr.slot_name
	value << .exemplar.sys!slot(name)
	flag << .exemplar.deco_flag_for_slot(name)
	flavour << .exemplar.deco_flavour_for_slot(name)
	a_stream.write( "{", ":", name, ", " )
	value_node << dcn_constant.new(value)
	value_node.decode_on(a_stream)
	a_stream.write( ", ", ":", flag, ", ", ":", flavour, "}")
_endmethod
$


_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_slotted_exemplar.decode_slots_on(a_stream)
	comma? << _false 
	_for descr _over _self.slots()
	_loop		
		_if (comma? ^<< _true) _then a_stream.write(", "); a_stream.newline() _endif
		
		_self.decode_slot_on(a_stream, descr)
	_endloop
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method dcn_slotted_exemplar.decode_parents_on(a_stream)
	comma? << _false 
	_for i_name _over .exemplar.deco_super_classes()
	_loop
		_if (comma? ^<< _true) _then a_stream.write(", ") _endif 
		a_stream.write( ":", i_name )
	_endloop
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_slotted_exemplar.decode_pseudo_slot_on(a_stream, descr)
	name << descr.slot_name
	value << .exemplar.sys!slot(name)
	value_node << dcn_constant.new(value)
	flag << .exemplar.deco_flag_for_slot(name)
	flavour << .exemplar.deco_flavour_for_slot(name)
	
	a_stream.write( .exemplar.deco_name )
	a_stream.write( ".define_pseudo_slot(")
	a_stream.write( ":", name, ", " )
	value_node.decode_on(a_stream)
	a_stream.write( ", ", ":", flag, ", ", ":", flavour, ")")
_endmethod
$


_pragma(classify_level=restricted, topic={decompiler})
_private _iter _method dcn_slotted_exemplar.pseudo_slots()
	_for descr _over .exemplar.deco_pseudo_slot_descriptors()
	_loop
		_loopbody(descr)
	_endloop
_endmethod
$


_pragma(classify_level=restricted, topic={decompiler})
_private _method dcn_slotted_exemplar.decode_pseudo_slots_on(a_stream)
	_for descr _over _self.pseudo_slots()
	_loop		
		_self.decode_pseudo_slot_on(a_stream, descr)
		a_stream.newline()
		a_stream.write("$")
		a_stream.newline()
	_endloop
_endmethod
$


_pragma(classify_level=restricted, topic={decompiler})
_method dcn_slotted_exemplar.decode_class_on(a_stream)
	##
	## Write a formated output on the stream
	##
	a_stream.write( "def_slotted_exemplar( :", .exemplar.deco_name, ",")
	a_stream.newline()
	a_stream.indent()
	a_stream.write("{")
	_self.decode_slots_on(a_stream)
	a_stream.write("},")
	a_stream.newline()
	a_stream.write("{")
	_self.decode_parents_on(a_stream)
	a_stream.write("})")
	a_stream.unindent()
	a_stream.newline()
	a_stream.write("$")
	a_stream.newline()
	_self.decode_pseudo_slots_on(a_stream)
_endmethod
$
