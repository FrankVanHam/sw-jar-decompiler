_package deco
$

_pragma(classify_level=restricted, topic={jar_decompiler})
def_slotted_exemplar(:deco_invoker,
	{},
	:deco_execution_base)
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method deco_invoker.tuplebootstrapprivate(p_parser, p_method, p_sender, _gather p_args)
	>> _self.bootstrap(p_parser, p_method, p_sender, _scatter p_args)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method deco_invoker.tuplebootstrap(p_parser, p_method, p_sender, _gather p_args)
	>> _self.bootstrap(p_parser, p_method, p_sender, _scatter p_args)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method deco_invoker.bootstrapprivate(p_parser, p_method, p_sender, _gather p_args)
	>> _self.bootstrap(p_parser, p_method, p_sender, _scatter p_args)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method deco_invoker.bootstrap(p_parser, p_method, p_sender, _gather p_args)
	##
	_if _self.iter?(p_method, p_sender, _scatter p_args)
	_then
		_return _self.unfinished_iter(p_parser, p_method, p_sender, _scatter p_args)
	_else
		_return _self.boot_method(p_parser, p_method.string_value, p_sender, _scatter p_args)
	_endif
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method deco_invoker.boot_method(p_parser, p_method_name, p_sender, _gather p_args)
	##
	_local sender << p_parser.parse_sender(p_sender)
	_if sender _is _unset
	_then
		sender << dcn_self.new()
	_endif
	_local args << rope.new()
	_for i_arg _over p_args.fast_elements()
	_loop
		args.add(p_parser.parse_expression(i_arg))
	_endloop
	
	_if p_method_name = "for_scatter()"
	_then
		_return dcn_scatter.new(sender)
	_else
		_return dcn_send.new(sender, p_method_name, args)
	_endif 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_private _method deco_invoker.iter?(p_method, p_sender, _gather p_args)
	##
	
	>> _if p_sender.is_kind_of?(jpn_cast)
	   _then
		   >> p_sender.type.name = "MethodHandle"
	   _else
		   >> _false
	   _endif
_endmethod
$


_pragma(classify_level=restricted, topic={jar_decompiler})
_private _method deco_invoker.unfinished_iter(p_parser, p_method, p_sender, _gather p_args)
	##
	
	_local sender << p_parser.parse_sender(p_args.last)
	>> dcn_unfinished_iter.new(sender, p_method.string_value, p_sender.expression.name)
_endmethod
$
