_package deco
$

_pragma(classify_level=restricted, topic={jar_decompiler})
def_slotted_exemplar(:deco_magikobjectutils,
	{},
	:deco_execution_base)
$



_pragma(classify_level=restricted, topic={jar_decompiler})
_method deco_magikobjectutils.createprocwithenv(p_parser, p_command_node,
						 p_class_name_node, p_java_method_name_node,
						 p_proc_name_node,
						 p_nr_args, p_nr_mandatory_args,
						 p_dono1, p_dono2, _optional p_env_node)

	>> _self.createproc(p_parser, p_command_node,
			    p_class_name_node, p_java_method_name_node,
			    p_proc_name_node,
			    p_nr_args, p_nr_mandatory_args,
			    p_dono1, p_dono2, _true, p_env_node )
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method deco_magikobjectutils.createproc(p_parser, p_command_node,
					 p_class_name_node, p_java_method_name_node,
					 p_proc_name_node,
					 p_nr_args, p_nr_mandatory_args,
					 p_dono1, p_dono2, _optional p_env?, p_env_node)

	_local env? << p_env?.default(_false)
	_local class_name << _if p_class_name_node.is_class_of?(jpn_cast)
			     _then >> p_class_name_node.expression.string_value
			     _else >> p_class_name_node.string_value
			     _endif 
	_local java_method_name << p_java_method_name_node.string_value
	_local proc_name << p_proc_name_node.string_value
	
	# strip the .class
	_if class_name.matches?("*.class")
	_then
		class_name << class_name.slice(1, class_name.size-6)
	_endif
	java_method_name << java_method_name.substitute_string("\\","\")
	
	nr_args << p_nr_args.string_value.as_number()
	nr_mandatory_args << p_nr_mandatory_args.string_value.as_number()

	env << _if p_env_node _isnt _unset
	       _then >> p_parser.parse_expression(p_env_node)
	       _endif 

	>> p_parser.publish_proc(class_name, java_method_name, proc_name,
				 nr_args, nr_mandatory_args, env?), env
_endmethod
$


_pragma(classify_level=restricted, topic={jar_decompiler})
_method deco_magikobjectutils.createmethod(p_parser,
					   p_exemplar_name, p_method_name,
					   p_class_name_node, p_java_method_name_node,
					   p_nr_args, p_nr_mandatory_args,
					   _optional p_x?, p_private?, p_abstract?, p_nr?)
	_local exemplar_name << p_exemplar_name.string_value
	_local method_name << p_method_name.string_value
	_local class_name << p_class_name_node.string_value
	_local java_method_name << p_java_method_name_node.string_value

	# strip the .class
	_if class_name.matches?("*.class")
	_then
		class_name << class_name.slice(1, class_name.size-6)
	_endif
	java_method_name << java_method_name.substitute_string("\\","\")

	nr_args << p_nr_args.string_value.as_number()
	nr_mandatory_args << p_nr_mandatory_args.string_value.as_number()

	abstract? << _if p_abstract? _isnt _unset
		     _then >> p_abstract?.string_value = "true"
		     _else >> _false
		     _endif
	private? << _if p_private? _isnt _unset
		     _then >> p_private?.string_value = "true"
		     _else >> _false
		     _endif
	
	>> p_parser.publish_method(class_name, java_method_name, exemplar_name, method_name,
				   nr_args, nr_mandatory_args,
				   abstract?, private?)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method deco_magikobjectutils.should_be_boolean(p_parser, p_expression)
	##
	>> p_parser.parse_expression(p_expression)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method deco_magikobjectutils.is(p_parser, p_value1, p_value2) 
	##
	_local v1 << p_parser.parse_expression(p_value1)
	_local v2 << p_parser.parse_expression(p_value2)
	>> dcn_op.new("_is", v1, v2)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method deco_magikobjectutils.isnt(p_parser, p_value1, p_value2) 
	##
	_local v1 << p_parser.parse_expression(p_value1)
	_local v2 << p_parser.parse_expression(p_value2)
	>> dcn_op.new("_isnt", v1, v2)
_endmethod
$
