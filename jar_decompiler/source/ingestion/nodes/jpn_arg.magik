_package deco
$

#remex(:jpn_arg)

_pragma(classify_level=restricted, topic={jar_decompiler})
def_slotted_exemplar(:jpn_arg,
	{
		{:lex_name, _unset, :readable},
		{:type, _unset, :readable},
		{:varargs?, _unset, :readable}
	},
	:jpn_base)
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_arg.init(p_lex_name, p_type, p_varargs?)

	assert(p_lex_name.is_class_of?(lexeme))
	show(p_type)
	assert(p_type.is_class_of?(jpn_type) _orif p_type.is_class_of?(jpn_dotted))
	
	.lex_name << p_lex_name
	.type << p_type
	.varargs? << p_varargs?
	>> _super.init()
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_arg.name
	## 
	>> .lex_name.value
_endmethod
$
