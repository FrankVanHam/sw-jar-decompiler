_package deco
$

#remex(:jpn_method)

_pragma(classify_level=restricted, topic={jar_decompiler})
def_slotted_exemplar(:jpn_method,
	{
		{:lex_name, _unset},
		{:args,       _unset, :readable},
		{:body,       _unset, :readable},
		{:lex_annotation, _unset, :readable}
	},
	:jpn_base)
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_method.init(p_lex_name, p_args, p_body, p_lex_annotation)
	##
	.lex_name << p_lex_name
	.args << p_args
	.body << p_body
	.lex_annotation << p_lex_annotation
	>> _super.init()
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_method.name
	##
	>> .lex_name.value
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_method.annotation
	##
	>> .lex_annotation.value
_endmethod
$
