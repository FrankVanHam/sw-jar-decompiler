
condition.define_condition(:deco_error, :error, {})
$
condition.define_condition(:deco_expected_operator,     :deco_error, {:line, :column, :operator, :instead})
$
condition.define_condition(:deco_unexpected_operator,   :deco_error, {:line, :column, :operator})
$
condition.define_condition(:deco_expected_separator,    :deco_error, {:line, :column, :separator, :instead})
$
condition.define_condition(:deco_unexpected_separator,  :deco_error, {:line, :column, :separator})
$
condition.define_condition(:deco_expected_keyword,      :deco_error, {:line, :column, :keyword, :instead})
$
condition.define_condition(:deco_unexpected_keyword,    :deco_error, {:line, :column, :keyword})
$
condition.define_condition(:deco_unexpected_token,      :deco_error, {:line, :column, :token})
$
condition.define_condition(:deco_expected_identifier,   :deco_error, {:line, :column, :identifier, :instead})
$
condition.define_condition(:deco_unexpected_identifier, :deco_error, {:line, :column, :identifier})
$
condition.define_condition(:deco_unexpected_eof,        :deco_error, {:line, :column, :while_doing})
$
condition.define_condition(:deco_unexpected_node,       :deco_error, {:node})
$
condition.define_condition(:deco_decompiler_error,       :deco_error, {:string})
$
