_package deco
$

#remex(:jpn_operation)

_pragma(classify_level=restricted, topic={jar_decompiler})
def_slotted_exemplar(:jpn_operation,
	{
		{:left,          _unset, :readable},
		{:right,         _unset, :readable},
		{:operation_lex, _unset}
	},
	:jpn_base)
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_operation.init(p_left, p_right, p_operation_lex)
	assert(p_left.is_kind_of?(jpn_base))
	assert(p_right.is_kind_of?(jpn_base))

	.left << p_left
	.right << p_right
	.operation_lex << p_operation_lex
	>> _super.init()
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_operation.operation
	## 
	>> .operation_lex.value
_endmethod
$
