_package deco
$

#remex(:jpn_parenthesis)
$

_pragma(classify_level=restricted, topic={decompiler})
##
## node for an expression in parenthesis
##
def_slotted_exemplar(:jpn_parenthesis,
		     {
			     {:expression, _unset, :readable}
		     }, :jpn_base )
$

_pragma(classify_level=restricted, topic={decompiler})
_method jpn_parenthesis.new(p_expression)
	>> _clone.init(p_expression)
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_private _method jpn_parenthesis.init(p_expression)
	.expression << p_expression
	>> _self 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_parenthesis.become_dotted(p_ident)
	##
	_return jpn_dotted.new(_self, p_ident)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_parenthesis.is_parenthesis?
	## 
	>> _true 
_endmethod
$
