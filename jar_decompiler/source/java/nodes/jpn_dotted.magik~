_package deco
$

#remex(:jpn_dotted)

_pragma(classify_level=restricted, topic={jar_decompiler})
##
## add a lexeme dotted to a jpn node.
##
def_slotted_exemplar(:jpn_dotted,
	{
		{:base, _unset, :readable},
		{:add,  _unset, :readable}
	},
	:jpn_base)
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_dotted.new(p_base, p_add)
	##
	>> _clone.init(p_base, p_add)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_private _method jpn_dotted.init(p_base, p_add)
	##
	#assert(p_base.is_class_of?(lexeme))
	assert(p_add.is_class_of?(lexeme))
	.base << p_base
	.add  << p_add
	>> _self 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_dotted.name
	## 
	>> _self.string_value
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_dotted.become_dotted(p_lex)
	##
	>> jpn_dotted.new(_self, p_lex)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_dotted.split_in_identifier_and_method()
	>> .base, .add
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_dotted.string_value
	##
	>> write_string(.base.string_value, ".", .add.value)
	
_endmethod
$
