_package deco
$

#remex(:jpn_constant)

_pragma(classify_level=restricted, topic={jar_decompiler})
def_slotted_exemplar(:jpn_constant,
	{
		{:lex,    _unset, :readable},
		{:array?, _unset, :readable}
	},
	:jpn_base)
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_constant.init(p_lex, _optional p_array?)
	##
	assert(p_lex.is_class_of?(lexeme))
	
	.lex << p_lex
	.array? << p_array?.default(_false)
	>> _super.init()
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_constant.string_value
	##
	>> .lex.value
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_constant.is_constant?
	>> _true 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_constant.is_string?
	##
	>> .lex.is_string?
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_constant.is_number?
	##
	>> .lex.is_number?
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_constant.parse_expression(p_parser)
	##
	>> p_parser.parse_constant(_self)
_endmethod
$
