_package deco
$

#remex(:jpn_class)

_pragma(classify_level=restricted, topic={jar_decompiler})
def_slotted_exemplar(:jpn_class,
	{
		{:lex_name,           _unset},
		{:lex_implementation, _unset},
		{:methods,            _unset, :readable},
		{:annotations,        _unset, :readable}
	},
	:jpn_base)
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_class.init(p_lex_name, p_lex_impl, p_methods, _optional p_annotations)

	assert(p_lex_name.is_class_of?(lexeme))
	assert(p_lex_impl _is _unset _orif p_lex_impl.is_class_of?(lexeme))
		
	.lex_name << p_lex_name
	.lex_implementation << p_lex_impl
	
	.methods << p_methods
	.annotations << p_annotations.default({})
	>> _super.init()
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_class.is_class?
	>> _true
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_class.name
	>> .lex_name.value
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_class.implementation
	>> _if .lex_implementation _isnt _unset
	   _then >> .lex_implementation.value
	   _endif 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method jpn_class.find_method(p_name)
	_for i_meth _over .methods.fast_elements()
	_loop
		_if i_meth.name = p_name
		_then
			_return i_meth
		_endif
	_endloop 
_endmethod
$
