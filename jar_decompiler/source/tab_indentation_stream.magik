_package deco
$

_pragma(classify_level=restricted, topic={jar_decompiler})
##
## Wrapping stream that implements indentation with tabs.
##
def_slotted_exemplar(:tab_indentation_stream,
	{
		{:out,   _unset},
		{:level, _unset},
		{:tab?,  _unset}
	}, :text_output_stream)
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method tab_indentation_stream.new(p_stream)
	## 
	>> _clone.init(p_stream)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_private _method tab_indentation_stream.init(p_stream)
	## 
	.out << p_stream
	.level << 0
	.tab? << _true 
	>> _self 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method tab_indentation_stream.put(p_char)
	## 
	_if .tab?
	_then
		_self.write_indention()
	_endif
	.tab? << p_char = newline_char
	>> .out.write(p_char)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_private _method tab_indentation_stream.write_indention()
	##
	_over range(1, .level)
	_loop
		.out.write(tab_char)
	_endloop 
_endmethod
$


_pragma(classify_level=restricted, topic={jar_decompiler})
_method tab_indentation_stream.put_vec(p_chars, _optional p_start, p_length)
	##
	_if .tab?
	_then
		_self.write_indention()
		_endif
	.tab? << p_chars.includes?(newline_char)
	>> .out.put_vec(p_chars, p_start, p_length)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method tab_indentation_stream.indent()
	## 
	.level +<< 1	
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method tab_indentation_stream.unindent()
	## 
	.level -<< 1
	_if .level < 0 _then level << 0 _endif 
_endmethod
$
