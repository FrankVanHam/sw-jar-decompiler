_package sw
$

_pragma(classify_level=restricted, topic={decompiler})
_method procedure.deco_unique_constant_name
	_for i_package _over package.all_packages.fast_elements()
	_loop 
		_for i_key, i_value _over i_package.fast_keys_and_elements()
		_loop
			_if i_value _is _self
			_then
				_return i_key
			_endif
		_endloop 
	_endloop
	>> _self 
_endmethod
$

_pragma(classify_level=restricted, topic={decompiler})
_method procedure.deco_method_finder_ids
	## return the ids that can be used in the method finder.
	name << _self.deco_unique_constant_name
	_if name _is _unset
	_then
		name << ""
	_endif
	>> {
		   name.as_charvec(),
		   "<global>"
	   }
_endmethod
$


