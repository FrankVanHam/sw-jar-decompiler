## jpn_method_test_protect
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_4031 {
    @SourceHash(value=-1023967763)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object deco_test__test_protect(Object _self) {
        try {
            ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("do()", (Object)_self));
        }
        finally {
            InterruptInfrastructure.disableInterrupts();
            try {
                ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("safe()", (Object)_self));
            }
            finally {
                InterruptInfrastructure.enableInterrupts();
            }
        }
        return ResultTuple.EMPTY_TUPLE;
    }
}

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_4030
implements ExecutableMagik {
    @Debugger(value="MagikDebug")
    @CodeType(value="EmptyConstructor")
    public deco_test_4030() {
    }

    @Override
    @Debugger(value="MagikDebug")
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "test_protect()", deco_test_4031.class, "deco_test__test_protect", 1, 1);
    }

    @Override
    public void preload() {
    }
}

###########
_method deco_test.test_protect() 
    _protect
        _self.do()
    _protection
        _self.safe()
    _endprotect
    _return _unset
_endmethod
$
###########
## jpn_method_test_protect_lock
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_4031 {
    @SourceHash(value=-32089328)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object deco_test__test_protect_lock(Object _self) {
        CallSite l = Invoker.bootstrapPrivate("lock()", (Object)_self);
        CallSite callSite = null;
        try {
            callSite = l;
            synchronized (callSite) {
                ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("do()", (Object)_self));
            }
        }
        finally {
            InterruptInfrastructure.disableInterrupts();
            try {
                ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("safe()", (Object)_self));
            }
            finally {
                CallSite callSite2 = callSite;
                if (callSite2 != null) {
                    // ** MonitorExit[v0] (shouldn't be in output)
                }
                InterruptInfrastructure.enableInterrupts();
            }
        }
        {
            return ResultTuple.EMPTY_TUPLE;
        }
    }
}

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_4030
implements ExecutableMagik {
    @Debugger(value="MagikDebug")
    @CodeType(value="EmptyConstructor")
    public deco_test_4030() {
    }

    @Override
    @Debugger(value="MagikDebug")
    @CodeType(value="TopLevel")
    public Object execute() {
        return TupleBuilder.bootstrap("tb", MagikObjectUtils.createMethod("deco_test", "test_protect_lock()", deco_test_4031.class, "deco_test__test_protect_lock", 1, 1));
    }

    @Override
    public void preload() {
    }
}
###########
_method deco_test.test_protect_lock() 
     _local l << _self.lock()
     _local callSite << _unset
    _protect _lock l
        _self.do()
    _protection
        _self.safe()
    _endprotect
_endmethod
$
###########
## jpn_test_lock_obj
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_4071 {
    @SourceHash(value=1495753316)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object deco_test__test_lock_obj(Object _self) {
        CallSite callSite = Invoker.bootstrapPrivate("lock", (Object)_self);
        InterruptInfrastructure.checkAndProcessInterrupts();
        synchronized (callSite) {
            try {
                ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("do()", (Object)_self));
            }
            catch (Throwable throwable) {
                // MONITOREXIT @DISABLED, blocks:[1, 2] lbl10 : MonitorExitStatement: MONITOREXIT : var1_1
                InterruptInfrastructure.checkAndProcessInterrupts();
                throw throwable;
            }
        }
        InterruptInfrastructure.checkAndProcessInterrupts();
        return ResultTuple.EMPTY_TUPLE;
    }
}


@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_4070
implements ExecutableMagik {
    @Debugger(value="MagikDebug")
    @CodeType(value="EmptyConstructor")
    public deco_test_4070() {
    }

    @Override
    @Debugger(value="MagikDebug")
    @CodeType(value="TopLevel")
    public Object execute() {
        return TupleBuilder.bootstrap("tb", MagikObjectUtils.createMethod("deco_test", "test_lock_obj()", deco_test_4071.class, "deco_test__test_lock_obj", 1, 1));
    }

    @Override
    public void preload() {
    }
}
###############
_method deco_test.test_lock_obj() 
     _local callSite << _self.lock
    _lock callSite
        _self.do()
    _endlock
    _return _unset
_endmethod
$
###############
## jpn_test_protect_try
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_4179 {
    @SourceHash(value=601401715)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="11ff991f-678c-42ff-8fa6-eb5e998ce793", type=Object.class, start=26, end=159, index=0), @EnvVar(name="11ff991f-678c-42ff-8fa6-eb5e998ce793", type=Object.class, start=193, end=227, index=0), @EnvVar(name="11ff991f-678c-42ff-8fa6-eb5e998ce793", type=Object.class, start=263, end=267, index=0)})
    public static Object deco_test__do_move_action(Object _self, Object action, Object source_element, Object target_element) {
        block15: {
            Object[] __env__ = new Object[1];
            try {
                Object object;
                Invoker.bootstrap("new_non_persistent()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "query_result"));
                EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
                EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
                DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
                CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
                DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
                try {
                    try {
                        DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                        try {
                            Object[] objectArray = new Object[]{__env__[0]};
                            ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "scrapbook_read_only"), ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4179.class, "proc___", "", 3, 3, 0, 0, (Object[])objectArray));
                            ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrap("store()", (Object)Invoker.bootstrapPrivate("scrapbook", (Object)_self), (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "user", "name")));
                            DynamicScope.destroyFrame();
                            DynamicScope.destroyFrame();
                            break block15;
                        }
                        catch (Throwable throwable) {
                            DynamicScope.destroyFrame();
                            throw throwable;
                        }
                    }
                    catch (Thrower.Throw throw_) {
                        Object object2;
                        object = object2 = Thrower.checkTag(throw_, callSite).peek();
                        DynamicScope.destroyFrame();
                    }
                }
                catch (Throwable throwable) {
                    DynamicScope.destroyFrame();
                    throw throwable;
                }
                if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "scrapbook_read_only")))) {
                    throw new Error("Try block caught unexpected error.");
                }
            }
            finally {
                InterruptInfrastructure.disableInterrupts();
                try {
                    ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("write()", (Object)_self, (Object)1));
                }
                finally {
                    InterruptInfrastructure.enableInterrupts();
                }
            }
        }
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__do_move_action")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="11ff991f-678c-42ff-8fa6-eb5e998ce793", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }
}

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_4178
implements ExecutableMagik {
    @Override
    @Debugger(value="MagikDebug")
    @CodeType(value="TopLevel")
    public Object execute() {
        return TupleBuilder.bootstrap("tb", MagikObjectUtils.createMethod("deco_test", "do_move_action()", deco_test_4179.class, "deco_test__do_move_action", 4, 4));
    }
}

############
_method deco_test.do_move_action(action, source_element, target_element) 
    _block @block15
        _protect
            sw:query_result.new_non_persistent()
            _try _with object
                _self.scrapbook.store(user:name)
            _when scrapbook_read_only
                
            _endtry
        _protection
            _self.write(1)
        _endprotect
    _endblock
    _return _unset
_endmethod
$
############
## jpn_test_protect_try2
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_4171 {
    @SourceHash(value=-470932000)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="f1faddf3-4058-4a7b-92e2-488d54a89c1d", type=Object.class, start=74, end=208, index=0), @EnvVar(name="f1faddf3-4058-4a7b-92e2-488d54a89c1d", type=Object.class, start=242, end=245, index=0)})
    public static Object deco_test__do_move_action(Object _self, Object action, Object source_element, Object target_element) {
        block16: {
            Object[] __env__ = new Object[1];
            try {
                Object object;
                if (MagikObjectUtils.is(target_element, Invoker.bootstrapPrivate("current_set_element", (Object)_self))) {
                    ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrap("set_current_result()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "scrapbook"), (Object)Invoker.bootstrapPrivate("name", (Object)_self)));
                    break block16;
                }
                if (!MagikObjectUtils.is(target_element, GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "user", "saved_sets_element"))) break block16;
                Invoker.bootstrap("new_non_persistent()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "query_result"));
                EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
                EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
                DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
                CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
                DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
                try {
                    try {
                        DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                        try {
                            Object[] objectArray = new Object[]{__env__[0]};
                            ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "scrapbook_read_only"), ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4171.class, "proc___", "", 3, 3, 0, 0, (Object[])objectArray));
                            ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrap("store()", (Object)Invoker.bootstrapPrivate("scrapbook", (Object)_self), (Object)Invoker.bootstrapPrivate("name", (Object)_self)));
                            DynamicScope.destroyFrame();
                            DynamicScope.destroyFrame();
                            break block16;
                        }
                        catch (Throwable throwable) {
                            DynamicScope.destroyFrame();
                            throw throwable;
                        }
                    }
                    catch (Thrower.Throw throw_) {
                        Object object2;
                        object = object2 = Thrower.checkTag(throw_, callSite).peek();
                        DynamicScope.destroyFrame();
                    }
                }
                catch (Throwable throwable) {
                    DynamicScope.destroyFrame();
                    throw throwable;
                }
                if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "scrapbook_read_only")))) {
                    throw new Error("Try block caught unexpected error.");
                }
            }
            finally {
                InterruptInfrastructure.disableInterrupts();
                try {
                    ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("write()", (Object)_self, (Object)1));
                }
                finally {
                    InterruptInfrastructure.enableInterrupts();
                }
            }
        }
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__do_move_action")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="f1faddf3-4058-4a7b-92e2-488d54a89c1d", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }
}


@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_4170
implements ExecutableMagik {
    @Override
    @Debugger(value="MagikDebug")
    @CodeType(value="TopLevel")
    public Object execute() {
        return TupleBuilder.bootstrap("tb", MagikObjectUtils.createMethod("deco_test", "do_move_action()", deco_test_4171.class, "deco_test__do_move_action", 4, 4));
    }
}
##########
##########
