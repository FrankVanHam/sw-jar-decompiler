## jpn_3_3_3_try_combinations
package magik.jar_decompiler_lp.decompile_target;

import com.gesmallworld.magik.commons.runtime.annotations.CodeType;
import com.gesmallworld.magik.commons.runtime.annotations.Debugger;
import com.gesmallworld.magik.commons.runtime.annotations.EnvVar;
import com.gesmallworld.magik.commons.runtime.annotations.EnvVars;
import com.gesmallworld.magik.commons.runtime.annotations.Parent;
import com.gesmallworld.magik.language.DynamicScope;
import com.gesmallworld.magik.language.InterruptInfrastructure;
import com.gesmallworld.magik.language.ResultTuple;
import com.gesmallworld.magik.language.SourceHash;
import com.gesmallworld.magik.language.Thrower;
import com.gesmallworld.magik.language.invokers.ConstantBuilder;
import com.gesmallworld.magik.language.invokers.DynamicAccessor;
import com.gesmallworld.magik.language.invokers.EnvAccessor;
import com.gesmallworld.magik.language.invokers.GlobalAccessor;
import com.gesmallworld.magik.language.invokers.Invoker;
import com.gesmallworld.magik.language.invokers.ProcInvoker;
import com.gesmallworld.magik.language.invokers.TupleBuilder;
import com.gesmallworld.magik.language.utils.MagikObjectUtils;
import java.lang.invoke.CallSite;

@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_4424 {
    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @SourceHash(value=-607406142)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="3e65aa78-fd93-4417-9c69-b43620010920", type=Object.class, start=23, end=194, index=0), @EnvVar(name="3e65aa78-fd93-4417-9c69-b43620010920", type=Object.class, start=417, end=431, index=0)})
    public static Object deco_test__try_3_3_3(Object _self) {
        block8: {
            Object object;
            block12: {
                block13: {
                    Object object2;
                    block10: {
                        block11: {
                            Object object3;
                            block9: {
                                Object object4;
                                Object[] __env__ = new Object[1];
                                ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
                                EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
                                EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
                                DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
                                CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
                                DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
                                try {
                                    try {
                                        DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                                        try {
                                            Object[] objectArray = new Object[]{__env__[0]};
                                            CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4424.class, "proc___", "", 3, 3, 0, 0, (Object[])objectArray);
                                            ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "information"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "ds_file_unchanged"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "warning"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "document_too_large"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_not_selected"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "document_user_error"), callSite2);
                                            ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try()", (Object)_self));
                                            DynamicScope.destroyFrame();
                                            DynamicScope.destroyFrame();
                                            break block8;
                                        }
                                        catch (Throwable throwable) {
                                            DynamicScope.destroyFrame();
                                            throw throwable;
                                        }
                                    }
                                    catch (Thrower.Throw throw_) {
                                        Object object5;
                                        object4 = object5 = Thrower.checkTag(throw_, callSite).peek();
                                        DynamicScope.destroyFrame();
                                    }
                                }
                                catch (Throwable throwable) {
                                    DynamicScope.destroyFrame();
                                    throw throwable;
                                }
                                object3 = object4;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object4, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) break block9;
                                object3 = object3;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "information")))) break block9;
                                object3 = object3;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "ds_file_unchanged")))) break block9;
                                object2 = object3;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "warning")))) break block10;
                                break block11;
                            }
                            Object c1 = object3;
                            ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)c1));
                            break block8;
                        }
                        object2 = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks")))) break block10;
                        object2 = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "document_too_large")))) break block10;
                        object = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path")))) break block12;
                        break block13;
                    }
                    Object c1 = object2;
                    ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error1()", (Object)_self, (Object)c1));
                    break block8;
                }
                object = object;
                if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_not_selected")))) {
                    object = object;
                    if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "document_user_error")))) {
                        throw new Error("Try block caught unexpected error.");
                    }
                }
            }
            Object c1 = object;
            ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error2()", (Object)_self, (Object)c1));
        }
        ResultTuple cfr_ignored_5 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_3_3_3")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="3e65aa78-fd93-4417-9c69-b43620010920", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @SourceHash(value=383134321)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="fd71501c-56ab-4658-81a0-58e7ad5023db", type=Object.class, start=23, end=187, index=0), @EnvVar(name="fd71501c-56ab-4658-81a0-58e7ad5023db", type=Object.class, start=393, end=407, index=0)})
    public static Object deco_test__try_3_3_2(Object _self) {
        block7: {
            Object object;
            block11: {
                block12: {
                    Object object2;
                    block9: {
                        block10: {
                            Object object3;
                            block8: {
                                Object object4;
                                Object[] __env__ = new Object[1];
                                ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
                                EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
                                EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
                                DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
                                CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
                                DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
                                try {
                                    try {
                                        DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                                        try {
                                            Object[] objectArray = new Object[]{__env__[0]};
                                            CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4424.class, "proc___2", "", 3, 3, 0, 0, (Object[])objectArray);
                                            ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "information"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "ds_file_unchanged"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "warning"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "document_too_large"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_not_selected"), callSite2);
                                            ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try()", (Object)_self));
                                            DynamicScope.destroyFrame();
                                            DynamicScope.destroyFrame();
                                            break block7;
                                        }
                                        catch (Throwable throwable) {
                                            DynamicScope.destroyFrame();
                                            throw throwable;
                                        }
                                    }
                                    catch (Thrower.Throw throw_) {
                                        Object object5;
                                        object4 = object5 = Thrower.checkTag(throw_, callSite).peek();
                                        DynamicScope.destroyFrame();
                                    }
                                }
                                catch (Throwable throwable) {
                                    DynamicScope.destroyFrame();
                                    throw throwable;
                                }
                                object3 = object4;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object4, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) break block8;
                                object3 = object3;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "information")))) break block8;
                                object3 = object3;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "ds_file_unchanged")))) break block8;
                                object2 = object3;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "warning")))) break block9;
                                break block10;
                            }
                            Object c1 = object3;
                            ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)c1));
                            break block7;
                        }
                        object2 = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks")))) break block9;
                        object2 = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "document_too_large")))) break block9;
                        object = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path")))) break block11;
                        break block12;
                    }
                    Object c1 = object2;
                    ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error1()", (Object)_self, (Object)c1));
                    break block7;
                }
                object = object;
                if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_not_selected")))) {
                    throw new Error("Try block caught unexpected error.");
                }
            }
            Object c1 = object;
            ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error2()", (Object)_self, (Object)c1));
        }
        ResultTuple cfr_ignored_5 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_3_3_2")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="fd71501c-56ab-4658-81a0-58e7ad5023db", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___2(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @SourceHash(value=-1753171421)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="399ae4ad-4768-429c-8a57-fff990556a49", type=Object.class, start=23, end=180, index=0), @EnvVar(name="399ae4ad-4768-429c-8a57-fff990556a49", type=Object.class, start=369, end=383, index=0)})
    public static Object deco_test__try_3_3_1(Object _self) {
        block7: {
            Object object;
            block11: {
                block9: {
                    block10: {
                        Object object2;
                        block8: {
                            Object object3;
                            Object[] __env__ = new Object[1];
                            ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
                            EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
                            EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
                            DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
                            CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
                            DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
                            try {
                                try {
                                    DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                                    try {
                                        Object[] objectArray = new Object[]{__env__[0]};
                                        CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4424.class, "proc___3", "", 3, 3, 0, 0, (Object[])objectArray);
                                        ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "information"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "ds_file_unchanged"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "warning"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "document_too_large"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path"), callSite2);
                                        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try()", (Object)_self));
                                        DynamicScope.destroyFrame();
                                        DynamicScope.destroyFrame();
                                        break block7;
                                    }
                                    catch (Throwable throwable) {
                                        DynamicScope.destroyFrame();
                                        throw throwable;
                                    }
                                }
                                catch (Thrower.Throw throw_) {
                                    Object object4;
                                    object3 = object4 = Thrower.checkTag(throw_, callSite).peek();
                                    DynamicScope.destroyFrame();
                                }
                            }
                            catch (Throwable throwable) {
                                DynamicScope.destroyFrame();
                                throw throwable;
                            }
                            object2 = object3;
                            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) break block8;
                            object2 = object2;
                            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "information")))) break block8;
                            object2 = object2;
                            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "ds_file_unchanged")))) break block8;
                            object = object2;
                            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "warning")))) break block9;
                            break block10;
                        }
                        Object c1 = object2;
                        ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)c1));
                        break block7;
                    }
                    object = object;
                    if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks")))) break block9;
                    object = object;
                    if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "document_too_large")))) break block9;
                    if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path")))) {
                        throw new Error("Try block caught unexpected error.");
                    }
                    break block11;
                }
                Object c1 = object;
                ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error1()", (Object)_self, (Object)c1));
                break block7;
            }
            Object c1 = object;
            ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error2()", (Object)_self, (Object)c1));
        }
        ResultTuple cfr_ignored_5 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_3_3_1")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="399ae4ad-4768-429c-8a57-fff990556a49", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___3(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @SourceHash(value=-773434404)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="75ade256-ae2c-49f6-9bcd-922f25cfb1ed", type=Object.class, start=23, end=173, index=0), @EnvVar(name="75ade256-ae2c-49f6-9bcd-922f25cfb1ed", type=Object.class, start=325, end=339, index=0)})
    public static Object deco_test__try_3_3_0(Object _self) {
        block8: {
            Object object;
            block10: {
                block11: {
                    Object object2;
                    block9: {
                        Object object3;
                        Object[] __env__ = new Object[1];
                        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
                        EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
                        EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
                        DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
                        CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
                        DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
                        try {
                            try {
                                DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                                try {
                                    Object[] objectArray = new Object[]{__env__[0]};
                                    CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4424.class, "proc___4", "", 3, 3, 0, 0, (Object[])objectArray);
                                    ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "information"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "ds_file_unchanged"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "warning"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "document_too_large"), callSite2);
                                    ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try()", (Object)_self));
                                    DynamicScope.destroyFrame();
                                    DynamicScope.destroyFrame();
                                    break block8;
                                }
                                catch (Throwable throwable) {
                                    DynamicScope.destroyFrame();
                                    throw throwable;
                                }
                            }
                            catch (Thrower.Throw throw_) {
                                Object object4;
                                object3 = object4 = Thrower.checkTag(throw_, callSite).peek();
                                DynamicScope.destroyFrame();
                            }
                        }
                        catch (Throwable throwable) {
                            DynamicScope.destroyFrame();
                            throw throwable;
                        }
                        object2 = object3;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) break block9;
                        object2 = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "information")))) break block9;
                        object2 = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "ds_file_unchanged")))) break block9;
                        object = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "warning")))) break block10;
                        break block11;
                    }
                    Object c1 = object2;
                    ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)c1));
                    break block8;
                }
                object = object;
                if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks")))) {
                    object = object;
                    if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "document_too_large")))) {
                        throw new Error("Try block caught unexpected error.");
                    }
                }
            }
            Object c1 = object;
            ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error1()", (Object)_self, (Object)c1));
        }
        ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_3_3_0")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="75ade256-ae2c-49f6-9bcd-922f25cfb1ed", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___4(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @SourceHash(value=-643445693)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="9bf76a61-3f60-4b16-8897-357b9a469c97", type=Object.class, start=23, end=187, index=0), @EnvVar(name="9bf76a61-3f60-4b16-8897-357b9a469c97", type=Object.class, start=393, end=407, index=0)})
    public static Object deco_test__try_3_2_3(Object _self) {
        block8: {
            Object object;
            block12: {
                block13: {
                    Object object2;
                    block10: {
                        block11: {
                            Object object3;
                            block9: {
                                Object object4;
                                Object[] __env__ = new Object[1];
                                ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
                                EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
                                EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
                                DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
                                CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
                                DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
                                try {
                                    try {
                                        DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                                        try {
                                            Object[] objectArray = new Object[]{__env__[0]};
                                            CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4424.class, "proc___5", "", 3, 3, 0, 0, (Object[])objectArray);
                                            ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "information"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "ds_file_unchanged"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "warning"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_not_selected"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "document_user_error"), callSite2);
                                            ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try()", (Object)_self));
                                            DynamicScope.destroyFrame();
                                            DynamicScope.destroyFrame();
                                            break block8;
                                        }
                                        catch (Throwable throwable) {
                                            DynamicScope.destroyFrame();
                                            throw throwable;
                                        }
                                    }
                                    catch (Thrower.Throw throw_) {
                                        Object object5;
                                        object4 = object5 = Thrower.checkTag(throw_, callSite).peek();
                                        DynamicScope.destroyFrame();
                                    }
                                }
                                catch (Throwable throwable) {
                                    DynamicScope.destroyFrame();
                                    throw throwable;
                                }
                                object3 = object4;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object4, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) break block9;
                                object3 = object3;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "information")))) break block9;
                                object3 = object3;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "ds_file_unchanged")))) break block9;
                                object2 = object3;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "warning")))) break block10;
                                break block11;
                            }
                            Object c1 = object3;
                            ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)c1));
                            break block8;
                        }
                        object2 = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks")))) break block10;
                        object = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path")))) break block12;
                        break block13;
                    }
                    Object c1 = object2;
                    ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error1()", (Object)_self, (Object)c1));
                    break block8;
                }
                object = object;
                if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_not_selected")))) {
                    object = object;
                    if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "document_user_error")))) {
                        throw new Error("Try block caught unexpected error.");
                    }
                }
            }
            Object c1 = object;
            ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error2()", (Object)_self, (Object)c1));
        }
        ResultTuple cfr_ignored_5 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_3_2_3")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="9bf76a61-3f60-4b16-8897-357b9a469c97", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___5(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @SourceHash(value=-2069799728)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="6e334e44-3459-4bd8-ad1a-5e18aeb76343", type=Object.class, start=23, end=180, index=0), @EnvVar(name="6e334e44-3459-4bd8-ad1a-5e18aeb76343", type=Object.class, start=369, end=383, index=0)})
    public static Object deco_test__try_3_2_2(Object _self) {
        block7: {
            Object object;
            block11: {
                block12: {
                    Object object2;
                    block9: {
                        block10: {
                            Object object3;
                            block8: {
                                Object object4;
                                Object[] __env__ = new Object[1];
                                ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
                                EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
                                EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
                                DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
                                CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
                                DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
                                try {
                                    try {
                                        DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                                        try {
                                            Object[] objectArray = new Object[]{__env__[0]};
                                            CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4424.class, "proc___6", "", 3, 3, 0, 0, (Object[])objectArray);
                                            ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "information"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "ds_file_unchanged"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "warning"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_not_selected"), callSite2);
                                            ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try()", (Object)_self));
                                            DynamicScope.destroyFrame();
                                            DynamicScope.destroyFrame();
                                            break block7;
                                        }
                                        catch (Throwable throwable) {
                                            DynamicScope.destroyFrame();
                                            throw throwable;
                                        }
                                    }
                                    catch (Thrower.Throw throw_) {
                                        Object object5;
                                        object4 = object5 = Thrower.checkTag(throw_, callSite).peek();
                                        DynamicScope.destroyFrame();
                                    }
                                }
                                catch (Throwable throwable) {
                                    DynamicScope.destroyFrame();
                                    throw throwable;
                                }
                                object3 = object4;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object4, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) break block8;
                                object3 = object3;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "information")))) break block8;
                                object3 = object3;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "ds_file_unchanged")))) break block8;
                                object2 = object3;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "warning")))) break block9;
                                break block10;
                            }
                            Object c1 = object3;
                            ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)c1));
                            break block7;
                        }
                        object2 = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks")))) break block9;
                        object = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path")))) break block11;
                        break block12;
                    }
                    Object c1 = object2;
                    ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error1()", (Object)_self, (Object)c1));
                    break block7;
                }
                object = object;
                if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_not_selected")))) {
                    throw new Error("Try block caught unexpected error.");
                }
            }
            Object c1 = object;
            ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error2()", (Object)_self, (Object)c1));
        }
        ResultTuple cfr_ignored_5 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_3_2_2")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="6e334e44-3459-4bd8-ad1a-5e18aeb76343", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___6(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @SourceHash(value=1785138946)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="15e22415-325e-4be0-8598-679e43a22cde", type=Object.class, start=23, end=173, index=0), @EnvVar(name="15e22415-325e-4be0-8598-679e43a22cde", type=Object.class, start=345, end=359, index=0)})
    public static Object deco_test__try_3_2_1(Object _self) {
        block7: {
            Object object;
            block11: {
                block9: {
                    block10: {
                        Object object2;
                        block8: {
                            Object object3;
                            Object[] __env__ = new Object[1];
                            ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
                            EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
                            EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
                            DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
                            CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
                            DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
                            try {
                                try {
                                    DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                                    try {
                                        Object[] objectArray = new Object[]{__env__[0]};
                                        CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4424.class, "proc___7", "", 3, 3, 0, 0, (Object[])objectArray);
                                        ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "information"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "ds_file_unchanged"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "warning"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path"), callSite2);
                                        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try()", (Object)_self));
                                        DynamicScope.destroyFrame();
                                        DynamicScope.destroyFrame();
                                        break block7;
                                    }
                                    catch (Throwable throwable) {
                                        DynamicScope.destroyFrame();
                                        throw throwable;
                                    }
                                }
                                catch (Thrower.Throw throw_) {
                                    Object object4;
                                    object3 = object4 = Thrower.checkTag(throw_, callSite).peek();
                                    DynamicScope.destroyFrame();
                                }
                            }
                            catch (Throwable throwable) {
                                DynamicScope.destroyFrame();
                                throw throwable;
                            }
                            object2 = object3;
                            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) break block8;
                            object2 = object2;
                            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "information")))) break block8;
                            object2 = object2;
                            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "ds_file_unchanged")))) break block8;
                            object = object2;
                            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "warning")))) break block9;
                            break block10;
                        }
                        Object c1 = object2;
                        ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)c1));
                        break block7;
                    }
                    object = object;
                    if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks")))) break block9;
                    if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path")))) {
                        throw new Error("Try block caught unexpected error.");
                    }
                    break block11;
                }
                Object c1 = object;
                ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error1()", (Object)_self, (Object)c1));
                break block7;
            }
            Object c1 = object;
            ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error2()", (Object)_self, (Object)c1));
        }
        ResultTuple cfr_ignored_5 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_3_2_1")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="15e22415-325e-4be0-8598-679e43a22cde", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___7(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @SourceHash(value=1992793211)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="fb7dfad3-4649-48a5-a818-5b8229db28d3", type=Object.class, start=23, end=166, index=0), @EnvVar(name="fb7dfad3-4649-48a5-a818-5b8229db28d3", type=Object.class, start=301, end=315, index=0)})
    public static Object deco_test__try_3_2_0(Object _self) {
        block7: {
            Object object;
            block9: {
                block10: {
                    Object object2;
                    block8: {
                        Object object3;
                        Object[] __env__ = new Object[1];
                        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
                        EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
                        EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
                        DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
                        CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
                        DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
                        try {
                            try {
                                DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                                try {
                                    Object[] objectArray = new Object[]{__env__[0]};
                                    CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4424.class, "proc___8", "", 3, 3, 0, 0, (Object[])objectArray);
                                    ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "information"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "ds_file_unchanged"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "warning"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks"), callSite2);
                                    ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try()", (Object)_self));
                                    DynamicScope.destroyFrame();
                                    DynamicScope.destroyFrame();
                                    break block7;
                                }
                                catch (Throwable throwable) {
                                    DynamicScope.destroyFrame();
                                    throw throwable;
                                }
                            }
                            catch (Thrower.Throw throw_) {
                                Object object4;
                                object3 = object4 = Thrower.checkTag(throw_, callSite).peek();
                                DynamicScope.destroyFrame();
                            }
                        }
                        catch (Throwable throwable) {
                            DynamicScope.destroyFrame();
                            throw throwable;
                        }
                        object2 = object3;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) break block8;
                        object2 = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "information")))) break block8;
                        object2 = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "ds_file_unchanged")))) break block8;
                        object = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "warning")))) break block9;
                        break block10;
                    }
                    Object c1 = object2;
                    ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)c1));
                    break block7;
                }
                object = object;
                if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks")))) {
                    throw new Error("Try block caught unexpected error.");
                }
            }
            Object c1 = object;
            ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error1()", (Object)_self, (Object)c1));
        }
        ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_3_2_0")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="fb7dfad3-4649-48a5-a818-5b8229db28d3", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___8(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @SourceHash(value=2003059067)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="a5250f73-9ad8-45ec-be0a-e88e7aed2188", type=Object.class, start=23, end=180, index=0), @EnvVar(name="a5250f73-9ad8-45ec-be0a-e88e7aed2188", type=Object.class, start=369, end=383, index=0)})
    public static Object deco_test__try_3_1_3(Object _self) {
        block8: {
            Object object;
            block12: {
                block13: {
                    Object object2;
                    block10: {
                        block11: {
                            block9: {
                                Object object3;
                                Object[] __env__ = new Object[1];
                                ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
                                EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
                                EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
                                DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
                                CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
                                DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
                                try {
                                    try {
                                        DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                                        try {
                                            Object[] objectArray = new Object[]{__env__[0]};
                                            CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4424.class, "proc___9", "", 3, 3, 0, 0, (Object[])objectArray);
                                            ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "information"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "ds_file_unchanged"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "warning"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_not_selected"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "document_user_error"), callSite2);
                                            ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try()", (Object)_self));
                                            DynamicScope.destroyFrame();
                                            DynamicScope.destroyFrame();
                                            break block8;
                                        }
                                        catch (Throwable throwable) {
                                            DynamicScope.destroyFrame();
                                            throw throwable;
                                        }
                                    }
                                    catch (Thrower.Throw throw_) {
                                        Object object4;
                                        object3 = object4 = Thrower.checkTag(throw_, callSite).peek();
                                        DynamicScope.destroyFrame();
                                    }
                                }
                                catch (Throwable throwable) {
                                    DynamicScope.destroyFrame();
                                    throw throwable;
                                }
                                object2 = object3;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) break block9;
                                object2 = object2;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "information")))) break block9;
                                object2 = object2;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "ds_file_unchanged")))) break block9;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "warning")))) break block10;
                                break block11;
                            }
                            Object c1 = object2;
                            ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)c1));
                            break block8;
                        }
                        object = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path")))) break block12;
                        break block13;
                    }
                    Object c1 = object2;
                    ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error1()", (Object)_self, (Object)c1));
                    break block8;
                }
                object = object;
                if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_not_selected")))) {
                    object = object;
                    if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "document_user_error")))) {
                        throw new Error("Try block caught unexpected error.");
                    }
                }
            }
            Object c1 = object;
            ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error2()", (Object)_self, (Object)c1));
        }
        ResultTuple cfr_ignored_5 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_3_1_3")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="a5250f73-9ad8-45ec-be0a-e88e7aed2188", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___9(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @SourceHash(value=-366409192)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="d68c7c26-9c5d-4ab8-8753-ec71c75fe9cf", type=Object.class, start=23, end=173, index=0), @EnvVar(name="d68c7c26-9c5d-4ab8-8753-ec71c75fe9cf", type=Object.class, start=345, end=359, index=0)})
    public static Object deco_test__try_3_1_2(Object _self) {
        block7: {
            Object object;
            block11: {
                block12: {
                    Object object2;
                    block9: {
                        block10: {
                            block8: {
                                Object object3;
                                Object[] __env__ = new Object[1];
                                ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
                                EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
                                EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
                                DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
                                CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
                                DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
                                try {
                                    try {
                                        DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                                        try {
                                            Object[] objectArray = new Object[]{__env__[0]};
                                            CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4424.class, "proc___10", "", 3, 3, 0, 0, (Object[])objectArray);
                                            ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "information"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "ds_file_unchanged"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "warning"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_not_selected"), callSite2);
                                            ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try()", (Object)_self));
                                            DynamicScope.destroyFrame();
                                            DynamicScope.destroyFrame();
                                            break block7;
                                        }
                                        catch (Throwable throwable) {
                                            DynamicScope.destroyFrame();
                                            throw throwable;
                                        }
                                    }
                                    catch (Thrower.Throw throw_) {
                                        Object object4;
                                        object3 = object4 = Thrower.checkTag(throw_, callSite).peek();
                                        DynamicScope.destroyFrame();
                                    }
                                }
                                catch (Throwable throwable) {
                                    DynamicScope.destroyFrame();
                                    throw throwable;
                                }
                                object2 = object3;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) break block8;
                                object2 = object2;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "information")))) break block8;
                                object2 = object2;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "ds_file_unchanged")))) break block8;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "warning")))) break block9;
                                break block10;
                            }
                            Object c1 = object2;
                            ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)c1));
                            break block7;
                        }
                        object = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path")))) break block11;
                        break block12;
                    }
                    Object c1 = object2;
                    ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error1()", (Object)_self, (Object)c1));
                    break block7;
                }
                object = object;
                if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_not_selected")))) {
                    throw new Error("Try block caught unexpected error.");
                }
            }
            Object c1 = object;
            ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error2()", (Object)_self, (Object)c1));
        }
        ResultTuple cfr_ignored_5 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_3_1_2")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="d68c7c26-9c5d-4ab8-8753-ec71c75fe9cf", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___10(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @SourceHash(value=-1895527990)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="f2a21eff-43d2-4503-af90-2d5940e1302e", type=Object.class, start=23, end=166, index=0), @EnvVar(name="f2a21eff-43d2-4503-af90-2d5940e1302e", type=Object.class, start=321, end=335, index=0)})
    public static Object deco_test__try_3_1_1(Object _self) {
        block7: {
            Object object;
            block11: {
                block9: {
                    block10: {
                        block8: {
                            Object object2;
                            Object[] __env__ = new Object[1];
                            ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
                            EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
                            EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
                            DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
                            CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
                            DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
                            try {
                                try {
                                    DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                                    try {
                                        Object[] objectArray = new Object[]{__env__[0]};
                                        CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4424.class, "proc___11", "", 3, 3, 0, 0, (Object[])objectArray);
                                        ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "information"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "ds_file_unchanged"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "warning"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path"), callSite2);
                                        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try()", (Object)_self));
                                        DynamicScope.destroyFrame();
                                        DynamicScope.destroyFrame();
                                        break block7;
                                    }
                                    catch (Throwable throwable) {
                                        DynamicScope.destroyFrame();
                                        throw throwable;
                                    }
                                }
                                catch (Thrower.Throw throw_) {
                                    Object object3;
                                    object2 = object3 = Thrower.checkTag(throw_, callSite).peek();
                                    DynamicScope.destroyFrame();
                                }
                            }
                            catch (Throwable throwable) {
                                DynamicScope.destroyFrame();
                                throw throwable;
                            }
                            object = object2;
                            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) break block8;
                            object = object;
                            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "information")))) break block8;
                            object = object;
                            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "ds_file_unchanged")))) break block8;
                            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "warning")))) break block9;
                            break block10;
                        }
                        Object c1 = object;
                        ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)c1));
                        break block7;
                    }
                    if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path")))) {
                        throw new Error("Try block caught unexpected error.");
                    }
                    break block11;
                }
                Object c1 = object;
                ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error1()", (Object)_self, (Object)c1));
                break block7;
            }
            Object c1 = object;
            ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error2()", (Object)_self, (Object)c1));
        }
        ResultTuple cfr_ignored_5 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_3_1_1")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="f2a21eff-43d2-4503-af90-2d5940e1302e", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___11(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @SourceHash(value=7817923)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="4bbd0b82-7d97-48d9-9e76-ac980d66d408", type=Object.class, start=23, end=159, index=0), @EnvVar(name="4bbd0b82-7d97-48d9-9e76-ac980d66d408", type=Object.class, start=277, end=291, index=0)})
    public static Object deco_test__try_3_1_0(Object _self) {
        block7: {
            Object object;
            block9: {
                block8: {
                    Object object2;
                    Object[] __env__ = new Object[1];
                    ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
                    EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
                    EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
                    DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
                    CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
                    DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
                    try {
                        try {
                            DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                            try {
                                Object[] objectArray = new Object[]{__env__[0]};
                                CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4424.class, "proc___12", "", 3, 3, 0, 0, (Object[])objectArray);
                                ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "information"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "ds_file_unchanged"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "warning"), callSite2);
                                ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try()", (Object)_self));
                                DynamicScope.destroyFrame();
                                DynamicScope.destroyFrame();
                                break block7;
                            }
                            catch (Throwable throwable) {
                                DynamicScope.destroyFrame();
                                throw throwable;
                            }
                        }
                        catch (Thrower.Throw throw_) {
                            Object object3;
                            object2 = object3 = Thrower.checkTag(throw_, callSite).peek();
                            DynamicScope.destroyFrame();
                        }
                    }
                    catch (Throwable throwable) {
                        DynamicScope.destroyFrame();
                        throw throwable;
                    }
                    object = object2;
                    if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) break block8;
                    object = object;
                    if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "information")))) break block8;
                    object = object;
                    if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "ds_file_unchanged")))) break block8;
                    if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "warning")))) {
                        throw new Error("Try block caught unexpected error.");
                    }
                    break block9;
                }
                Object c1 = object;
                ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)c1));
                break block7;
            }
            Object c1 = object;
            ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error1()", (Object)_self, (Object)c1));
        }
        ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_3_1_0")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="4bbd0b82-7d97-48d9-9e76-ac980d66d408", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___12(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @SourceHash(value=474834041)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="76206b3f-9c48-4d34-a3b3-fff96966645e", type=Object.class, start=23, end=187, index=0), @EnvVar(name="76206b3f-9c48-4d34-a3b3-fff96966645e", type=Object.class, start=393, end=407, index=0)})
    public static Object deco_test__try_2_3_3(Object _self) {
        block8: {
            Object object;
            block12: {
                block13: {
                    Object object2;
                    block10: {
                        block11: {
                            Object object3;
                            block9: {
                                Object object4;
                                Object[] __env__ = new Object[1];
                                ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
                                EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
                                EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
                                DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
                                CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
                                DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
                                try {
                                    try {
                                        DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                                        try {
                                            Object[] objectArray = new Object[]{__env__[0]};
                                            CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4424.class, "proc___13", "", 3, 3, 0, 0, (Object[])objectArray);
                                            ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "information"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "warning"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "document_too_large"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_not_selected"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "document_user_error"), callSite2);
                                            ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try()", (Object)_self));
                                            DynamicScope.destroyFrame();
                                            DynamicScope.destroyFrame();
                                            break block8;
                                        }
                                        catch (Throwable throwable) {
                                            DynamicScope.destroyFrame();
                                            throw throwable;
                                        }
                                    }
                                    catch (Thrower.Throw throw_) {
                                        Object object5;
                                        object4 = object5 = Thrower.checkTag(throw_, callSite).peek();
                                        DynamicScope.destroyFrame();
                                    }
                                }
                                catch (Throwable throwable) {
                                    DynamicScope.destroyFrame();
                                    throw throwable;
                                }
                                object3 = object4;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object4, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) break block9;
                                object3 = object3;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "information")))) break block9;
                                object2 = object3;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "warning")))) break block10;
                                break block11;
                            }
                            Object c1 = object3;
                            ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)c1));
                            break block8;
                        }
                        object2 = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks")))) break block10;
                        object2 = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "document_too_large")))) break block10;
                        object = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path")))) break block12;
                        break block13;
                    }
                    Object c1 = object2;
                    ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error1()", (Object)_self, (Object)c1));
                    break block8;
                }
                object = object;
                if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_not_selected")))) {
                    object = object;
                    if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "document_user_error")))) {
                        throw new Error("Try block caught unexpected error.");
                    }
                }
            }
            Object c1 = object;
            ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error2()", (Object)_self, (Object)c1));
        }
        ResultTuple cfr_ignored_5 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_2_3_3")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="76206b3f-9c48-4d34-a3b3-fff96966645e", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___13(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @SourceHash(value=-1395176004)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="7de0928c-a3f4-4891-87e5-0be6c37d6971", type=Object.class, start=23, end=180, index=0), @EnvVar(name="7de0928c-a3f4-4891-87e5-0be6c37d6971", type=Object.class, start=369, end=383, index=0)})
    public static Object deco_test__try_2_3_2(Object _self) {
        block7: {
            Object object;
            block11: {
                block12: {
                    Object object2;
                    block9: {
                        block10: {
                            Object object3;
                            block8: {
                                Object object4;
                                Object[] __env__ = new Object[1];
                                ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
                                EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
                                EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
                                DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
                                CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
                                DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
                                try {
                                    try {
                                        DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                                        try {
                                            Object[] objectArray = new Object[]{__env__[0]};
                                            CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4424.class, "proc___14", "", 3, 3, 0, 0, (Object[])objectArray);
                                            ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "information"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "warning"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "document_too_large"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_not_selected"), callSite2);
                                            ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try()", (Object)_self));
                                            DynamicScope.destroyFrame();
                                            DynamicScope.destroyFrame();
                                            break block7;
                                        }
                                        catch (Throwable throwable) {
                                            DynamicScope.destroyFrame();
                                            throw throwable;
                                        }
                                    }
                                    catch (Thrower.Throw throw_) {
                                        Object object5;
                                        object4 = object5 = Thrower.checkTag(throw_, callSite).peek();
                                        DynamicScope.destroyFrame();
                                    }
                                }
                                catch (Throwable throwable) {
                                    DynamicScope.destroyFrame();
                                    throw throwable;
                                }
                                object3 = object4;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object4, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) break block8;
                                object3 = object3;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "information")))) break block8;
                                object2 = object3;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "warning")))) break block9;
                                break block10;
                            }
                            Object c1 = object3;
                            ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)c1));
                            break block7;
                        }
                        object2 = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks")))) break block9;
                        object2 = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "document_too_large")))) break block9;
                        object = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path")))) break block11;
                        break block12;
                    }
                    Object c1 = object2;
                    ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error1()", (Object)_self, (Object)c1));
                    break block7;
                }
                object = object;
                if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_not_selected")))) {
                    throw new Error("Try block caught unexpected error.");
                }
            }
            Object c1 = object;
            ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error2()", (Object)_self, (Object)c1));
        }
        ResultTuple cfr_ignored_5 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_2_3_2")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="7de0928c-a3f4-4891-87e5-0be6c37d6971", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___14(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @SourceHash(value=-476903216)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="fb909a17-d856-475b-b54f-27f734105c1b", type=Object.class, start=23, end=173, index=0), @EnvVar(name="fb909a17-d856-475b-b54f-27f734105c1b", type=Object.class, start=345, end=359, index=0)})
    public static Object deco_test__try_2_3_1(Object _self) {
        block7: {
            Object object;
            block11: {
                block9: {
                    block10: {
                        Object object2;
                        block8: {
                            Object object3;
                            Object[] __env__ = new Object[1];
                            ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
                            EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
                            EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
                            DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
                            CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
                            DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
                            try {
                                try {
                                    DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                                    try {
                                        Object[] objectArray = new Object[]{__env__[0]};
                                        CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4424.class, "proc___15", "", 3, 3, 0, 0, (Object[])objectArray);
                                        ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "information"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "warning"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "document_too_large"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path"), callSite2);
                                        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try()", (Object)_self));
                                        DynamicScope.destroyFrame();
                                        DynamicScope.destroyFrame();
                                        break block7;
                                    }
                                    catch (Throwable throwable) {
                                        DynamicScope.destroyFrame();
                                        throw throwable;
                                    }
                                }
                                catch (Thrower.Throw throw_) {
                                    Object object4;
                                    object3 = object4 = Thrower.checkTag(throw_, callSite).peek();
                                    DynamicScope.destroyFrame();
                                }
                            }
                            catch (Throwable throwable) {
                                DynamicScope.destroyFrame();
                                throw throwable;
                            }
                            object2 = object3;
                            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) break block8;
                            object2 = object2;
                            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "information")))) break block8;
                            object = object2;
                            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "warning")))) break block9;
                            break block10;
                        }
                        Object c1 = object2;
                        ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)c1));
                        break block7;
                    }
                    object = object;
                    if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks")))) break block9;
                    object = object;
                    if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "document_too_large")))) break block9;
                    if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path")))) {
                        throw new Error("Try block caught unexpected error.");
                    }
                    break block11;
                }
                Object c1 = object;
                ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error1()", (Object)_self, (Object)c1));
                break block7;
            }
            Object c1 = object;
            ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error2()", (Object)_self, (Object)c1));
        }
        ResultTuple cfr_ignored_5 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_2_3_1")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="fb909a17-d856-475b-b54f-27f734105c1b", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___15(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @SourceHash(value=-421408981)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="cd711c72-29e6-4f14-87af-76e27e57459b", type=Object.class, start=23, end=166, index=0), @EnvVar(name="cd711c72-29e6-4f14-87af-76e27e57459b", type=Object.class, start=301, end=315, index=0)})
    public static Object deco_test__try_2_3_0(Object _self) {
        block8: {
            Object object;
            block10: {
                block11: {
                    Object object2;
                    block9: {
                        Object object3;
                        Object[] __env__ = new Object[1];
                        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
                        EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
                        EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
                        DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
                        CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
                        DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
                        try {
                            try {
                                DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                                try {
                                    Object[] objectArray = new Object[]{__env__[0]};
                                    CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4424.class, "proc___16", "", 3, 3, 0, 0, (Object[])objectArray);
                                    ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "information"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "warning"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "document_too_large"), callSite2);
                                    ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try()", (Object)_self));
                                    DynamicScope.destroyFrame();
                                    DynamicScope.destroyFrame();
                                    break block8;
                                }
                                catch (Throwable throwable) {
                                    DynamicScope.destroyFrame();
                                    throw throwable;
                                }
                            }
                            catch (Thrower.Throw throw_) {
                                Object object4;
                                object3 = object4 = Thrower.checkTag(throw_, callSite).peek();
                                DynamicScope.destroyFrame();
                            }
                        }
                        catch (Throwable throwable) {
                            DynamicScope.destroyFrame();
                            throw throwable;
                        }
                        object2 = object3;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) break block9;
                        object2 = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "information")))) break block9;
                        object = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "warning")))) break block10;
                        break block11;
                    }
                    Object c1 = object2;
                    ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)c1));
                    break block8;
                }
                object = object;
                if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks")))) {
                    object = object;
                    if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "document_too_large")))) {
                        throw new Error("Try block caught unexpected error.");
                    }
                }
            }
            Object c1 = object;
            ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error1()", (Object)_self, (Object)c1));
        }
        ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_2_3_0")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="cd711c72-29e6-4f14-87af-76e27e57459b", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___16(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @SourceHash(value=-1571646760)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="52bf375b-4225-48a5-b360-09825226560d", type=Object.class, start=23, end=180, index=0), @EnvVar(name="52bf375b-4225-48a5-b360-09825226560d", type=Object.class, start=369, end=383, index=0)})
    public static Object deco_test__try_2_2_3(Object _self) {
        block8: {
            Object object;
            block12: {
                block13: {
                    Object object2;
                    block10: {
                        block11: {
                            Object object3;
                            block9: {
                                Object object4;
                                Object[] __env__ = new Object[1];
                                ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
                                EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
                                EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
                                DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
                                CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
                                DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
                                try {
                                    try {
                                        DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                                        try {
                                            Object[] objectArray = new Object[]{__env__[0]};
                                            CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4424.class, "proc___17", "", 3, 3, 0, 0, (Object[])objectArray);
                                            ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "information"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "warning"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_not_selected"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "document_user_error"), callSite2);
                                            ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try()", (Object)_self));
                                            DynamicScope.destroyFrame();
                                            DynamicScope.destroyFrame();
                                            break block8;
                                        }
                                        catch (Throwable throwable) {
                                            DynamicScope.destroyFrame();
                                            throw throwable;
                                        }
                                    }
                                    catch (Thrower.Throw throw_) {
                                        Object object5;
                                        object4 = object5 = Thrower.checkTag(throw_, callSite).peek();
                                        DynamicScope.destroyFrame();
                                    }
                                }
                                catch (Throwable throwable) {
                                    DynamicScope.destroyFrame();
                                    throw throwable;
                                }
                                object3 = object4;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object4, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) break block9;
                                object3 = object3;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "information")))) break block9;
                                object2 = object3;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "warning")))) break block10;
                                break block11;
                            }
                            Object c1 = object3;
                            ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)c1));
                            break block8;
                        }
                        object2 = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks")))) break block10;
                        object = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path")))) break block12;
                        break block13;
                    }
                    Object c1 = object2;
                    ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error1()", (Object)_self, (Object)c1));
                    break block8;
                }
                object = object;
                if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_not_selected")))) {
                    object = object;
                    if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "document_user_error")))) {
                        throw new Error("Try block caught unexpected error.");
                    }
                }
            }
            Object c1 = object;
            ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error2()", (Object)_self, (Object)c1));
        }
        ResultTuple cfr_ignored_5 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_2_2_3")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="52bf375b-4225-48a5-b360-09825226560d", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___17(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @SourceHash(value=-1369850755)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="f9b96e37-e17c-425d-9fb1-11c1311fd898", type=Object.class, start=23, end=173, index=0), @EnvVar(name="f9b96e37-e17c-425d-9fb1-11c1311fd898", type=Object.class, start=345, end=359, index=0)})
    public static Object deco_test__try_2_2_2(Object _self) {
        block7: {
            Object object;
            block11: {
                block12: {
                    Object object2;
                    block9: {
                        block10: {
                            Object object3;
                            block8: {
                                Object object4;
                                Object[] __env__ = new Object[1];
                                ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
                                EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
                                EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
                                DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
                                CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
                                DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
                                try {
                                    try {
                                        DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                                        try {
                                            Object[] objectArray = new Object[]{__env__[0]};
                                            CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4424.class, "proc___18", "", 3, 3, 0, 0, (Object[])objectArray);
                                            ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "information"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "warning"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_not_selected"), callSite2);
                                            ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try()", (Object)_self));
                                            DynamicScope.destroyFrame();
                                            DynamicScope.destroyFrame();
                                            break block7;
                                        }
                                        catch (Throwable throwable) {
                                            DynamicScope.destroyFrame();
                                            throw throwable;
                                        }
                                    }
                                    catch (Thrower.Throw throw_) {
                                        Object object5;
                                        object4 = object5 = Thrower.checkTag(throw_, callSite).peek();
                                        DynamicScope.destroyFrame();
                                    }
                                }
                                catch (Throwable throwable) {
                                    DynamicScope.destroyFrame();
                                    throw throwable;
                                }
                                object3 = object4;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object4, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) break block8;
                                object3 = object3;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "information")))) break block8;
                                object2 = object3;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "warning")))) break block9;
                                break block10;
                            }
                            Object c1 = object3;
                            ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)c1));
                            break block7;
                        }
                        object2 = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks")))) break block9;
                        object = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path")))) break block11;
                        break block12;
                    }
                    Object c1 = object2;
                    ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error1()", (Object)_self, (Object)c1));
                    break block7;
                }
                object = object;
                if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_not_selected")))) {
                    throw new Error("Try block caught unexpected error.");
                }
            }
            Object c1 = object;
            ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error2()", (Object)_self, (Object)c1));
        }
        ResultTuple cfr_ignored_5 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_2_2_2")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="f9b96e37-e17c-425d-9fb1-11c1311fd898", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___18(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @SourceHash(value=-891247343)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="dacc642c-8338-48d9-b655-7cff083a77a9", type=Object.class, start=23, end=166, index=0), @EnvVar(name="dacc642c-8338-48d9-b655-7cff083a77a9", type=Object.class, start=321, end=335, index=0)})
    public static Object deco_test__try_2_2_1(Object _self) {
        block7: {
            Object object;
            block11: {
                block9: {
                    block10: {
                        Object object2;
                        block8: {
                            Object object3;
                            Object[] __env__ = new Object[1];
                            ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
                            EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
                            EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
                            DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
                            CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
                            DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
                            try {
                                try {
                                    DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                                    try {
                                        Object[] objectArray = new Object[]{__env__[0]};
                                        CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4424.class, "proc___19", "", 3, 3, 0, 0, (Object[])objectArray);
                                        ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "information"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "warning"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path"), callSite2);
                                        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try()", (Object)_self));
                                        DynamicScope.destroyFrame();
                                        DynamicScope.destroyFrame();
                                        break block7;
                                    }
                                    catch (Throwable throwable) {
                                        DynamicScope.destroyFrame();
                                        throw throwable;
                                    }
                                }
                                catch (Thrower.Throw throw_) {
                                    Object object4;
                                    object3 = object4 = Thrower.checkTag(throw_, callSite).peek();
                                    DynamicScope.destroyFrame();
                                }
                            }
                            catch (Throwable throwable) {
                                DynamicScope.destroyFrame();
                                throw throwable;
                            }
                            object2 = object3;
                            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) break block8;
                            object2 = object2;
                            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "information")))) break block8;
                            object = object2;
                            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "warning")))) break block9;
                            break block10;
                        }
                        Object c1 = object2;
                        ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)c1));
                        break block7;
                    }
                    object = object;
                    if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks")))) break block9;
                    if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path")))) {
                        throw new Error("Try block caught unexpected error.");
                    }
                    break block11;
                }
                Object c1 = object;
                ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error1()", (Object)_self, (Object)c1));
                break block7;
            }
            Object c1 = object;
            ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error2()", (Object)_self, (Object)c1));
        }
        ResultTuple cfr_ignored_5 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_2_2_1")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="dacc642c-8338-48d9-b655-7cff083a77a9", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___19(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @SourceHash(value=1962958764)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="9fe9756e-af73-402e-ba59-c30d73767918", type=Object.class, start=23, end=159, index=0), @EnvVar(name="9fe9756e-af73-402e-ba59-c30d73767918", type=Object.class, start=277, end=291, index=0)})
    public static Object deco_test__try_2_2_0(Object _self) {
        block7: {
            Object object;
            block9: {
                block10: {
                    Object object2;
                    block8: {
                        Object object3;
                        Object[] __env__ = new Object[1];
                        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
                        EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
                        EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
                        DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
                        CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
                        DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
                        try {
                            try {
                                DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                                try {
                                    Object[] objectArray = new Object[]{__env__[0]};
                                    CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4424.class, "proc___20", "", 3, 3, 0, 0, (Object[])objectArray);
                                    ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "information"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "warning"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks"), callSite2);
                                    ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try()", (Object)_self));
                                    DynamicScope.destroyFrame();
                                    DynamicScope.destroyFrame();
                                    break block7;
                                }
                                catch (Throwable throwable) {
                                    DynamicScope.destroyFrame();
                                    throw throwable;
                                }
                            }
                            catch (Thrower.Throw throw_) {
                                Object object4;
                                object3 = object4 = Thrower.checkTag(throw_, callSite).peek();
                                DynamicScope.destroyFrame();
                            }
                        }
                        catch (Throwable throwable) {
                            DynamicScope.destroyFrame();
                            throw throwable;
                        }
                        object2 = object3;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) break block8;
                        object2 = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "information")))) break block8;
                        object = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "warning")))) break block9;
                        break block10;
                    }
                    Object c1 = object2;
                    ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)c1));
                    break block7;
                }
                object = object;
                if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks")))) {
                    throw new Error("Try block caught unexpected error.");
                }
            }
            Object c1 = object;
            ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error1()", (Object)_self, (Object)c1));
        }
        ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_2_2_0")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="9fe9756e-af73-402e-ba59-c30d73767918", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___20(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @SourceHash(value=-509175826)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="864d238f-9d13-45f6-a737-28b369d42292", type=Object.class, start=23, end=173, index=0), @EnvVar(name="864d238f-9d13-45f6-a737-28b369d42292", type=Object.class, start=345, end=359, index=0)})
    public static Object deco_test__try_2_1_3(Object _self) {
        block8: {
            Object object;
            block12: {
                block13: {
                    Object object2;
                    block10: {
                        block11: {
                            block9: {
                                Object object3;
                                Object[] __env__ = new Object[1];
                                ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
                                EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
                                EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
                                DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
                                CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
                                DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
                                try {
                                    try {
                                        DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                                        try {
                                            Object[] objectArray = new Object[]{__env__[0]};
                                            CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4424.class, "proc___21", "", 3, 3, 0, 0, (Object[])objectArray);
                                            ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "information"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "warning"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_not_selected"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "document_user_error"), callSite2);
                                            ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try()", (Object)_self));
                                            DynamicScope.destroyFrame();
                                            DynamicScope.destroyFrame();
                                            break block8;
                                        }
                                        catch (Throwable throwable) {
                                            DynamicScope.destroyFrame();
                                            throw throwable;
                                        }
                                    }
                                    catch (Thrower.Throw throw_) {
                                        Object object4;
                                        object3 = object4 = Thrower.checkTag(throw_, callSite).peek();
                                        DynamicScope.destroyFrame();
                                    }
                                }
                                catch (Throwable throwable) {
                                    DynamicScope.destroyFrame();
                                    throw throwable;
                                }
                                object2 = object3;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) break block9;
                                object2 = object2;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "information")))) break block9;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "warning")))) break block10;
                                break block11;
                            }
                            Object c1 = object2;
                            ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)c1));
                            break block8;
                        }
                        object = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path")))) break block12;
                        break block13;
                    }
                    Object c1 = object2;
                    ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error1()", (Object)_self, (Object)c1));
                    break block8;
                }
                object = object;
                if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_not_selected")))) {
                    object = object;
                    if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "document_user_error")))) {
                        throw new Error("Try block caught unexpected error.");
                    }
                }
            }
            Object c1 = object;
            ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error2()", (Object)_self, (Object)c1));
        }
        ResultTuple cfr_ignored_5 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_2_1_3")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="864d238f-9d13-45f6-a737-28b369d42292", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___21(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @SourceHash(value=-1350242265)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="25df9d41-0d03-4c41-94c1-640813d42c58", type=Object.class, start=23, end=166, index=0), @EnvVar(name="25df9d41-0d03-4c41-94c1-640813d42c58", type=Object.class, start=321, end=335, index=0)})
    public static Object deco_test__try_2_1_2(Object _self) {
        block7: {
            Object object;
            block11: {
                block12: {
                    Object object2;
                    block9: {
                        block10: {
                            block8: {
                                Object object3;
                                Object[] __env__ = new Object[1];
                                ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
                                EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
                                EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
                                DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
                                CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
                                DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
                                try {
                                    try {
                                        DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                                        try {
                                            Object[] objectArray = new Object[]{__env__[0]};
                                            CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4424.class, "proc___22", "", 3, 3, 0, 0, (Object[])objectArray);
                                            ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "information"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "warning"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_not_selected"), callSite2);
                                            ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try()", (Object)_self));
                                            DynamicScope.destroyFrame();
                                            DynamicScope.destroyFrame();
                                            break block7;
                                        }
                                        catch (Throwable throwable) {
                                            DynamicScope.destroyFrame();
                                            throw throwable;
                                        }
                                    }
                                    catch (Thrower.Throw throw_) {
                                        Object object4;
                                        object3 = object4 = Thrower.checkTag(throw_, callSite).peek();
                                        DynamicScope.destroyFrame();
                                    }
                                }
                                catch (Throwable throwable) {
                                    DynamicScope.destroyFrame();
                                    throw throwable;
                                }
                                object2 = object3;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) break block8;
                                object2 = object2;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "information")))) break block8;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "warning")))) break block9;
                                break block10;
                            }
                            Object c1 = object2;
                            ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)c1));
                            break block7;
                        }
                        object = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path")))) break block11;
                        break block12;
                    }
                    Object c1 = object2;
                    ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error1()", (Object)_self, (Object)c1));
                    break block7;
                }
                object = object;
                if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_not_selected")))) {
                    throw new Error("Try block caught unexpected error.");
                }
            }
            Object c1 = object;
            ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error2()", (Object)_self, (Object)c1));
        }
        ResultTuple cfr_ignored_5 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_2_1_2")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="25df9d41-0d03-4c41-94c1-640813d42c58", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___22(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @SourceHash(value=751055163)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="a82b56b0-1a74-4d1d-a1ec-06e3c4feaeed", type=Object.class, start=23, end=159, index=0), @EnvVar(name="a82b56b0-1a74-4d1d-a1ec-06e3c4feaeed", type=Object.class, start=297, end=311, index=0)})
    public static Object deco_test__try_2_1_1(Object _self) {
        block7: {
            Object object;
            block11: {
                block9: {
                    block10: {
                        block8: {
                            Object object2;
                            Object[] __env__ = new Object[1];
                            ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
                            EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
                            EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
                            DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
                            CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
                            DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
                            try {
                                try {
                                    DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                                    try {
                                        Object[] objectArray = new Object[]{__env__[0]};
                                        CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4424.class, "proc___23", "", 3, 3, 0, 0, (Object[])objectArray);
                                        ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "information"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "warning"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path"), callSite2);
                                        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try()", (Object)_self));
                                        DynamicScope.destroyFrame();
                                        DynamicScope.destroyFrame();
                                        break block7;
                                    }
                                    catch (Throwable throwable) {
                                        DynamicScope.destroyFrame();
                                        throw throwable;
                                    }
                                }
                                catch (Thrower.Throw throw_) {
                                    Object object3;
                                    object2 = object3 = Thrower.checkTag(throw_, callSite).peek();
                                    DynamicScope.destroyFrame();
                                }
                            }
                            catch (Throwable throwable) {
                                DynamicScope.destroyFrame();
                                throw throwable;
                            }
                            object = object2;
                            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) break block8;
                            object = object;
                            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "information")))) break block8;
                            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "warning")))) break block9;
                            break block10;
                        }
                        Object c1 = object;
                        ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)c1));
                        break block7;
                    }
                    if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path")))) {
                        throw new Error("Try block caught unexpected error.");
                    }
                    break block11;
                }
                Object c1 = object;
                ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error1()", (Object)_self, (Object)c1));
                break block7;
            }
            Object c1 = object;
            ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error2()", (Object)_self, (Object)c1));
        }
        ResultTuple cfr_ignored_5 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_2_1_1")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="a82b56b0-1a74-4d1d-a1ec-06e3c4feaeed", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___23(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @SourceHash(value=1456611286)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="a8894273-b582-4193-be96-f94dcbc68671", type=Object.class, start=23, end=152, index=0), @EnvVar(name="a8894273-b582-4193-be96-f94dcbc68671", type=Object.class, start=253, end=267, index=0)})
    public static Object deco_test__try_2_1_0(Object _self) {
        block7: {
            Object object;
            block9: {
                block8: {
                    Object object2;
                    Object[] __env__ = new Object[1];
                    ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
                    EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
                    EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
                    DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
                    CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
                    DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
                    try {
                        try {
                            DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                            try {
                                Object[] objectArray = new Object[]{__env__[0]};
                                CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4424.class, "proc___24", "", 3, 3, 0, 0, (Object[])objectArray);
                                ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "information"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "warning"), callSite2);
                                ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try()", (Object)_self));
                                DynamicScope.destroyFrame();
                                DynamicScope.destroyFrame();
                                break block7;
                            }
                            catch (Throwable throwable) {
                                DynamicScope.destroyFrame();
                                throw throwable;
                            }
                        }
                        catch (Thrower.Throw throw_) {
                            Object object3;
                            object2 = object3 = Thrower.checkTag(throw_, callSite).peek();
                            DynamicScope.destroyFrame();
                        }
                    }
                    catch (Throwable throwable) {
                        DynamicScope.destroyFrame();
                        throw throwable;
                    }
                    object = object2;
                    if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) break block8;
                    object = object;
                    if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "information")))) break block8;
                    if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "warning")))) {
                        throw new Error("Try block caught unexpected error.");
                    }
                    break block9;
                }
                Object c1 = object;
                ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)c1));
                break block7;
            }
            Object c1 = object;
            ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error1()", (Object)_self, (Object)c1));
        }
        ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_2_1_0")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="a8894273-b582-4193-be96-f94dcbc68671", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___24(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

    @SourceHash(value=-1312710161)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="db7c28fb-3825-47f0-862d-5ad8b09330d4", type=Object.class, start=23, end=145, index=0), @EnvVar(name="db7c28fb-3825-47f0-862d-5ad8b09330d4", type=Object.class, start=209, end=223, index=0)})
    public static Object deco_test__try_2_0_0(Object _self) {
        block9: {
            Object object;
            Object[] __env__ = new Object[1];
            ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
            EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
            EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
            DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
            CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
            DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
            try {
                try {
                    DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                    try {
                        Object[] objectArray = new Object[]{__env__[0]};
                        CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4424.class, "proc___25", "", 3, 3, 0, 0, (Object[])objectArray);
                        ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "information"), callSite2);
                        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try()", (Object)_self));
                        DynamicScope.destroyFrame();
                        DynamicScope.destroyFrame();
                        break block9;
                    }
                    catch (Throwable throwable) {
                        DynamicScope.destroyFrame();
                        throw throwable;
                    }
                }
                catch (Thrower.Throw throw_) {
                    Object object2;
                    object = object2 = Thrower.checkTag(throw_, callSite).peek();
                    DynamicScope.destroyFrame();
                }
            }
            catch (Throwable throwable) {
                DynamicScope.destroyFrame();
                throw throwable;
            }
            Object object3 = object;
            if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) {
                object3 = object3;
                if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "information")))) {
                    throw new Error("Try block caught unexpected error.");
                }
            }
            Object c1 = object3;
            ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)c1));
        }
        ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_2_0_0")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="db7c28fb-3825-47f0-862d-5ad8b09330d4", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___25(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @SourceHash(value=1809680512)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="4a24c5ce-5b55-49a3-aaee-2a25392e3377", type=Object.class, start=23, end=180, index=0), @EnvVar(name="4a24c5ce-5b55-49a3-aaee-2a25392e3377", type=Object.class, start=369, end=383, index=0)})
    public static Object deco_test__try_1_3_3(Object _self) {
        block8: {
            Object object;
            block12: {
                block13: {
                    Object object2;
                    block10: {
                        block11: {
                            Object object3;
                            block9: {
                                Object[] __env__ = new Object[1];
                                ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
                                EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
                                EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
                                DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
                                CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
                                DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
                                try {
                                    try {
                                        DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                                        try {
                                            Object[] objectArray = new Object[]{__env__[0]};
                                            CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4424.class, "proc___26", "", 3, 3, 0, 0, (Object[])objectArray);
                                            ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "warning"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "document_too_large"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_not_selected"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "document_user_error"), callSite2);
                                            ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try()", (Object)_self));
                                            DynamicScope.destroyFrame();
                                            DynamicScope.destroyFrame();
                                            break block8;
                                        }
                                        catch (Throwable throwable) {
                                            DynamicScope.destroyFrame();
                                            throw throwable;
                                        }
                                    }
                                    catch (Thrower.Throw throw_) {
                                        Object object4;
                                        object3 = object4 = Thrower.checkTag(throw_, callSite).peek();
                                        DynamicScope.destroyFrame();
                                    }
                                }
                                catch (Throwable throwable) {
                                    DynamicScope.destroyFrame();
                                    throw throwable;
                                }
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) break block9;
                                object2 = object3;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "warning")))) break block10;
                                break block11;
                            }
                            Object c1 = object3;
                            ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)c1));
                            break block8;
                        }
                        object2 = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks")))) break block10;
                        object2 = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "document_too_large")))) break block10;
                        object = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path")))) break block12;
                        break block13;
                    }
                    Object c1 = object2;
                    ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error1()", (Object)_self, (Object)c1));
                    break block8;
                }
                object = object;
                if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_not_selected")))) {
                    object = object;
                    if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "document_user_error")))) {
                        throw new Error("Try block caught unexpected error.");
                    }
                }
            }
            Object c1 = object;
            ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error2()", (Object)_self, (Object)c1));
        }
        ResultTuple cfr_ignored_5 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_1_3_3")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="4a24c5ce-5b55-49a3-aaee-2a25392e3377", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___26(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @SourceHash(value=292641523)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="c4dfe8cc-394e-440d-9d1d-4658d4123f6c", type=Object.class, start=23, end=173, index=0), @EnvVar(name="c4dfe8cc-394e-440d-9d1d-4658d4123f6c", type=Object.class, start=345, end=359, index=0)})
    public static Object deco_test__try_1_3_2(Object _self) {
        block7: {
            Object object;
            block11: {
                block12: {
                    Object object2;
                    block9: {
                        block10: {
                            Object object3;
                            block8: {
                                Object[] __env__ = new Object[1];
                                ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
                                EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
                                EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
                                DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
                                CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
                                DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
                                try {
                                    try {
                                        DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                                        try {
                                            Object[] objectArray = new Object[]{__env__[0]};
                                            CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4424.class, "proc___27", "", 3, 3, 0, 0, (Object[])objectArray);
                                            ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "warning"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "document_too_large"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_not_selected"), callSite2);
                                            ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try()", (Object)_self));
                                            DynamicScope.destroyFrame();
                                            DynamicScope.destroyFrame();
                                            break block7;
                                        }
                                        catch (Throwable throwable) {
                                            DynamicScope.destroyFrame();
                                            throw throwable;
                                        }
                                    }
                                    catch (Thrower.Throw throw_) {
                                        Object object4;
                                        object3 = object4 = Thrower.checkTag(throw_, callSite).peek();
                                        DynamicScope.destroyFrame();
                                    }
                                }
                                catch (Throwable throwable) {
                                    DynamicScope.destroyFrame();
                                    throw throwable;
                                }
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) break block8;
                                object2 = object3;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "warning")))) break block9;
                                break block10;
                            }
                            Object c1 = object3;
                            ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)c1));
                            break block7;
                        }
                        object2 = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks")))) break block9;
                        object2 = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "document_too_large")))) break block9;
                        object = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path")))) break block11;
                        break block12;
                    }
                    Object c1 = object2;
                    ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error1()", (Object)_self, (Object)c1));
                    break block7;
                }
                object = object;
                if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_not_selected")))) {
                    throw new Error("Try block caught unexpected error.");
                }
            }
            Object c1 = object;
            ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error2()", (Object)_self, (Object)c1));
        }
        ResultTuple cfr_ignored_5 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_1_3_2")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="c4dfe8cc-394e-440d-9d1d-4658d4123f6c", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___27(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @SourceHash(value=1228836005)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="72adad28-94c1-4855-b65f-3107e0e2752b", type=Object.class, start=23, end=166, index=0), @EnvVar(name="72adad28-94c1-4855-b65f-3107e0e2752b", type=Object.class, start=321, end=335, index=0)})
    public static Object deco_test__try_1_3_1(Object _self) {
        block7: {
            Object object;
            block11: {
                block9: {
                    block10: {
                        Object object2;
                        block8: {
                            Object[] __env__ = new Object[1];
                            ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
                            EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
                            EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
                            DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
                            CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
                            DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
                            try {
                                try {
                                    DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                                    try {
                                        Object[] objectArray = new Object[]{__env__[0]};
                                        CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4424.class, "proc___28", "", 3, 3, 0, 0, (Object[])objectArray);
                                        ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "warning"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "document_too_large"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path"), callSite2);
                                        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try()", (Object)_self));
                                        DynamicScope.destroyFrame();
                                        DynamicScope.destroyFrame();
                                        break block7;
                                    }
                                    catch (Throwable throwable) {
                                        DynamicScope.destroyFrame();
                                        throw throwable;
                                    }
                                }
                                catch (Thrower.Throw throw_) {
                                    Object object3;
                                    object2 = object3 = Thrower.checkTag(throw_, callSite).peek();
                                    DynamicScope.destroyFrame();
                                }
                            }
                            catch (Throwable throwable) {
                                DynamicScope.destroyFrame();
                                throw throwable;
                            }
                            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) break block8;
                            object = object2;
                            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "warning")))) break block9;
                            break block10;
                        }
                        Object c1 = object2;
                        ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)c1));
                        break block7;
                    }
                    object = object;
                    if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks")))) break block9;
                    object = object;
                    if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "document_too_large")))) break block9;
                    if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path")))) {
                        throw new Error("Try block caught unexpected error.");
                    }
                    break block11;
                }
                Object c1 = object;
                ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error1()", (Object)_self, (Object)c1));
                break block7;
            }
            Object c1 = object;
            ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error2()", (Object)_self, (Object)c1));
        }
        ResultTuple cfr_ignored_5 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_1_3_1")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="72adad28-94c1-4855-b65f-3107e0e2752b", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___28(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

    @SourceHash(value=1190860254)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="29ba0641-de2d-444f-94d9-0a4525671ded", type=Object.class, start=23, end=159, index=0), @EnvVar(name="29ba0641-de2d-444f-94d9-0a4525671ded", type=Object.class, start=277, end=291, index=0)})
    public static Object deco_test__try_1_3_0(Object _self) {
        block12: {
            Object object;
            Object[] __env__ = new Object[1];
            ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
            EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
            EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
            DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
            CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
            DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
            try {
                try {
                    DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                    try {
                        Object[] objectArray = new Object[]{__env__[0]};
                        CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4424.class, "proc___29", "", 3, 3, 0, 0, (Object[])objectArray);
                        ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "warning"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "document_too_large"), callSite2);
                        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try()", (Object)_self));
                        DynamicScope.destroyFrame();
                        DynamicScope.destroyFrame();
                        break block12;
                    }
                    catch (Throwable throwable) {
                        DynamicScope.destroyFrame();
                        throw throwable;
                    }
                }
                catch (Thrower.Throw throw_) {
                    Object object2;
                    object = object2 = Thrower.checkTag(throw_, callSite).peek();
                    DynamicScope.destroyFrame();
                }
            }
            catch (Throwable throwable) {
                DynamicScope.destroyFrame();
                throw throwable;
            }
            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) {
                Object c1 = object;
                ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)c1));
            } else {
                Object object3 = object;
                if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "warning")))) {
                    object3 = object3;
                    if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks")))) {
                        object3 = object3;
                        if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "document_too_large")))) {
                            throw new Error("Try block caught unexpected error.");
                        }
                    }
                }
                Object c1 = object3;
                ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error1()", (Object)_self, (Object)c1));
            }
        }
        ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_1_3_0")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="29ba0641-de2d-444f-94d9-0a4525671ded", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___29(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @SourceHash(value=412068865)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="eb78b303-16ff-4231-be2a-46043e6b4857", type=Object.class, start=23, end=173, index=0), @EnvVar(name="eb78b303-16ff-4231-be2a-46043e6b4857", type=Object.class, start=345, end=359, index=0)})
    public static Object deco_test__try_1_2_3(Object _self) {
        block8: {
            Object object;
            block12: {
                block13: {
                    Object object2;
                    block10: {
                        block11: {
                            Object object3;
                            block9: {
                                Object[] __env__ = new Object[1];
                                ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
                                EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
                                EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
                                DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
                                CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
                                DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
                                try {
                                    try {
                                        DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                                        try {
                                            Object[] objectArray = new Object[]{__env__[0]};
                                            CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4424.class, "proc___30", "", 3, 3, 0, 0, (Object[])objectArray);
                                            ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "warning"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_not_selected"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "document_user_error"), callSite2);
                                            ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try()", (Object)_self));
                                            DynamicScope.destroyFrame();
                                            DynamicScope.destroyFrame();
                                            break block8;
                                        }
                                        catch (Throwable throwable) {
                                            DynamicScope.destroyFrame();
                                            throw throwable;
                                        }
                                    }
                                    catch (Thrower.Throw throw_) {
                                        Object object4;
                                        object3 = object4 = Thrower.checkTag(throw_, callSite).peek();
                                        DynamicScope.destroyFrame();
                                    }
                                }
                                catch (Throwable throwable) {
                                    DynamicScope.destroyFrame();
                                    throw throwable;
                                }
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) break block9;
                                object2 = object3;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "warning")))) break block10;
                                break block11;
                            }
                            Object c1 = object3;
                            ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)c1));
                            break block8;
                        }
                        object2 = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks")))) break block10;
                        object = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path")))) break block12;
                        break block13;
                    }
                    Object c1 = object2;
                    ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error1()", (Object)_self, (Object)c1));
                    break block8;
                }
                object = object;
                if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_not_selected")))) {
                    object = object;
                    if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "document_user_error")))) {
                        throw new Error("Try block caught unexpected error.");
                    }
                }
            }
            Object c1 = object;
            ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error2()", (Object)_self, (Object)c1));
        }
        ResultTuple cfr_ignored_5 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_1_2_3")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="eb78b303-16ff-4231-be2a-46043e6b4857", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___30(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @SourceHash(value=1255087698)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="0d0af19c-aeaa-495a-8fea-fd52433b0738", type=Object.class, start=23, end=166, index=0), @EnvVar(name="0d0af19c-aeaa-495a-8fea-fd52433b0738", type=Object.class, start=321, end=335, index=0)})
    public static Object deco_test__try_1_2_2(Object _self) {
        block7: {
            Object object;
            block11: {
                block12: {
                    Object object2;
                    block9: {
                        block10: {
                            Object object3;
                            block8: {
                                Object[] __env__ = new Object[1];
                                ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
                                EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
                                EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
                                DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
                                CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
                                DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
                                try {
                                    try {
                                        DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                                        try {
                                            Object[] objectArray = new Object[]{__env__[0]};
                                            CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4424.class, "proc___31", "", 3, 3, 0, 0, (Object[])objectArray);
                                            ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "warning"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_not_selected"), callSite2);
                                            ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try()", (Object)_self));
                                            DynamicScope.destroyFrame();
                                            DynamicScope.destroyFrame();
                                            break block7;
                                        }
                                        catch (Throwable throwable) {
                                            DynamicScope.destroyFrame();
                                            throw throwable;
                                        }
                                    }
                                    catch (Thrower.Throw throw_) {
                                        Object object4;
                                        object3 = object4 = Thrower.checkTag(throw_, callSite).peek();
                                        DynamicScope.destroyFrame();
                                    }
                                }
                                catch (Throwable throwable) {
                                    DynamicScope.destroyFrame();
                                    throw throwable;
                                }
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) break block8;
                                object2 = object3;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "warning")))) break block9;
                                break block10;
                            }
                            Object c1 = object3;
                            ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)c1));
                            break block7;
                        }
                        object2 = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks")))) break block9;
                        object = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path")))) break block11;
                        break block12;
                    }
                    Object c1 = object2;
                    ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error1()", (Object)_self, (Object)c1));
                    break block7;
                }
                object = object;
                if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_not_selected")))) {
                    throw new Error("Try block caught unexpected error.");
                }
            }
            Object c1 = object;
            ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error2()", (Object)_self, (Object)c1));
        }
        ResultTuple cfr_ignored_5 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_1_2_2")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="0d0af19c-aeaa-495a-8fea-fd52433b0738", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___31(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @SourceHash(value=-1487900028)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="3fd9f3f9-e85b-42fb-80ab-dbeecb6680bf", type=Object.class, start=23, end=159, index=0), @EnvVar(name="3fd9f3f9-e85b-42fb-80ab-dbeecb6680bf", type=Object.class, start=297, end=311, index=0)})
    public static Object deco_test__try_1_2_1(Object _self) {
        block7: {
            Object object;
            block11: {
                block9: {
                    block10: {
                        Object object2;
                        block8: {
                            Object[] __env__ = new Object[1];
                            ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
                            EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
                            EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
                            DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
                            CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
                            DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
                            try {
                                try {
                                    DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                                    try {
                                        Object[] objectArray = new Object[]{__env__[0]};
                                        CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4424.class, "proc___32", "", 3, 3, 0, 0, (Object[])objectArray);
                                        ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "warning"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path"), callSite2);
                                        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try()", (Object)_self));
                                        DynamicScope.destroyFrame();
                                        DynamicScope.destroyFrame();
                                        break block7;
                                    }
                                    catch (Throwable throwable) {
                                        DynamicScope.destroyFrame();
                                        throw throwable;
                                    }
                                }
                                catch (Thrower.Throw throw_) {
                                    Object object3;
                                    object2 = object3 = Thrower.checkTag(throw_, callSite).peek();
                                    DynamicScope.destroyFrame();
                                }
                            }
                            catch (Throwable throwable) {
                                DynamicScope.destroyFrame();
                                throw throwable;
                            }
                            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) break block8;
                            object = object2;
                            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "warning")))) break block9;
                            break block10;
                        }
                        Object c1 = object2;
                        ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)c1));
                        break block7;
                    }
                    object = object;
                    if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks")))) break block9;
                    if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path")))) {
                        throw new Error("Try block caught unexpected error.");
                    }
                    break block11;
                }
                Object c1 = object;
                ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error1()", (Object)_self, (Object)c1));
                break block7;
            }
            Object c1 = object;
            ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error2()", (Object)_self, (Object)c1));
        }
        ResultTuple cfr_ignored_5 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_1_2_1")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="3fd9f3f9-e85b-42fb-80ab-dbeecb6680bf", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___32(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

    @SourceHash(value=828616573)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="cece7635-b28d-4b95-b9fa-8723158ec5c0", type=Object.class, start=23, end=152, index=0), @EnvVar(name="cece7635-b28d-4b95-b9fa-8723158ec5c0", type=Object.class, start=253, end=267, index=0)})
    public static Object deco_test__try_1_2_0(Object _self) {
        block11: {
            Object object;
            Object[] __env__ = new Object[1];
            ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
            EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
            EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
            DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
            CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
            DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
            try {
                try {
                    DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                    try {
                        Object[] objectArray = new Object[]{__env__[0]};
                        CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4424.class, "proc___33", "", 3, 3, 0, 0, (Object[])objectArray);
                        ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "warning"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks"), callSite2);
                        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try()", (Object)_self));
                        DynamicScope.destroyFrame();
                        DynamicScope.destroyFrame();
                        break block11;
                    }
                    catch (Throwable throwable) {
                        DynamicScope.destroyFrame();
                        throw throwable;
                    }
                }
                catch (Thrower.Throw throw_) {
                    Object object2;
                    object = object2 = Thrower.checkTag(throw_, callSite).peek();
                    DynamicScope.destroyFrame();
                }
            }
            catch (Throwable throwable) {
                DynamicScope.destroyFrame();
                throw throwable;
            }
            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) {
                Object c1 = object;
                ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)c1));
            } else {
                Object object3 = object;
                if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "warning")))) {
                    object3 = object3;
                    if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks")))) {
                        throw new Error("Try block caught unexpected error.");
                    }
                }
                Object c1 = object3;
                ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error1()", (Object)_self, (Object)c1));
            }
        }
        ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_1_2_0")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="cece7635-b28d-4b95-b9fa-8723158ec5c0", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___33(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

    @SourceHash(value=1653452857)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="2b3937fa-705c-476c-a99c-bfaf93937561", type=Object.class, start=23, end=166, index=0), @EnvVar(name="2b3937fa-705c-476c-a99c-bfaf93937561", type=Object.class, start=321, end=335, index=0)})
    public static Object deco_test__try_1_1_3(Object _self) {
        block14: {
            Object object;
            Object[] __env__ = new Object[1];
            ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
            EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
            EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
            DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
            CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
            DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
            try {
                try {
                    DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                    try {
                        Object[] objectArray = new Object[]{__env__[0]};
                        CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4424.class, "proc___34", "", 3, 3, 0, 0, (Object[])objectArray);
                        ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "warning"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_not_selected"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "document_user_error"), callSite2);
                        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try()", (Object)_self));
                        DynamicScope.destroyFrame();
                        DynamicScope.destroyFrame();
                        break block14;
                    }
                    catch (Throwable throwable) {
                        DynamicScope.destroyFrame();
                        throw throwable;
                    }
                }
                catch (Thrower.Throw throw_) {
                    Object object2;
                    object = object2 = Thrower.checkTag(throw_, callSite).peek();
                    DynamicScope.destroyFrame();
                }
            }
            catch (Throwable throwable) {
                DynamicScope.destroyFrame();
                throw throwable;
            }
            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) {
                Object c1 = object;
                ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)c1));
            } else if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "warning")))) {
                Object c1 = object;
                ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error1()", (Object)_self, (Object)c1));
            } else {
                Object object3 = object;
                if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path")))) {
                    object3 = object3;
                    if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_not_selected")))) {
                        object3 = object3;
                        if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "document_user_error")))) {
                            throw new Error("Try block caught unexpected error.");
                        }
                    }
                }
                Object c1 = object3;
                ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error2()", (Object)_self, (Object)c1));
            }
        }
        ResultTuple cfr_ignored_5 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_1_1_3")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="2b3937fa-705c-476c-a99c-bfaf93937561", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___34(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

    @SourceHash(value=869391514)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="2611989e-b002-4f86-9f40-a46512ea8c24", type=Object.class, start=23, end=159, index=0), @EnvVar(name="2611989e-b002-4f86-9f40-a46512ea8c24", type=Object.class, start=297, end=311, index=0)})
    public static Object deco_test__try_1_1_2(Object _self) {
        block13: {
            Object object;
            Object[] __env__ = new Object[1];
            ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
            EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
            EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
            DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
            CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
            DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
            try {
                try {
                    DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                    try {
                        Object[] objectArray = new Object[]{__env__[0]};
                        CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4424.class, "proc___35", "", 3, 3, 0, 0, (Object[])objectArray);
                        ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "warning"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_not_selected"), callSite2);
                        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try()", (Object)_self));
                        DynamicScope.destroyFrame();
                        DynamicScope.destroyFrame();
                        break block13;
                    }
                    catch (Throwable throwable) {
                        DynamicScope.destroyFrame();
                        throw throwable;
                    }
                }
                catch (Thrower.Throw throw_) {
                    Object object2;
                    object = object2 = Thrower.checkTag(throw_, callSite).peek();
                    DynamicScope.destroyFrame();
                }
            }
            catch (Throwable throwable) {
                DynamicScope.destroyFrame();
                throw throwable;
            }
            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) {
                Object c1 = object;
                ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)c1));
            } else if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "warning")))) {
                Object c1 = object;
                ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error1()", (Object)_self, (Object)c1));
            } else {
                Object object3 = object;
                if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path")))) {
                    object3 = object3;
                    if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_not_selected")))) {
                        throw new Error("Try block caught unexpected error.");
                    }
                }
                Object c1 = object3;
                ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error2()", (Object)_self, (Object)c1));
            }
        }
        ResultTuple cfr_ignored_5 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_1_1_2")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="2611989e-b002-4f86-9f40-a46512ea8c24", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___35(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

    @SourceHash(value=1468137036)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="7e57d818-f515-419e-bb35-6158b2f541da", type=Object.class, start=23, end=152, index=0), @EnvVar(name="7e57d818-f515-419e-bb35-6158b2f541da", type=Object.class, start=273, end=287, index=0)})
    public static Object deco_test__try_1_1_1(Object _self) {
        block12: {
            Object object;
            Object[] __env__ = new Object[1];
            ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
            EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
            EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
            DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
            CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
            DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
            try {
                try {
                    DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                    try {
                        Object[] objectArray = new Object[]{__env__[0]};
                        CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4424.class, "proc___36", "", 3, 3, 0, 0, (Object[])objectArray);
                        ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "warning"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path"), callSite2);
                        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try()", (Object)_self));
                        DynamicScope.destroyFrame();
                        DynamicScope.destroyFrame();
                        break block12;
                    }
                    catch (Throwable throwable) {
                        DynamicScope.destroyFrame();
                        throw throwable;
                    }
                }
                catch (Thrower.Throw throw_) {
                    Object object2;
                    object = object2 = Thrower.checkTag(throw_, callSite).peek();
                    DynamicScope.destroyFrame();
                }
            }
            catch (Throwable throwable) {
                DynamicScope.destroyFrame();
                throw throwable;
            }
            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) {
                Object c1 = object;
                ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)c1));
            } else if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "warning")))) {
                Object c1 = object;
                ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error1()", (Object)_self, (Object)c1));
            } else if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path")))) {
                Object c1 = object;
                ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error2()", (Object)_self, (Object)c1));
            } else {
                throw new Error("Try block caught unexpected error.");
            }
        }
        ResultTuple cfr_ignored_5 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_1_1_1")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="7e57d818-f515-419e-bb35-6158b2f541da", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___36(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

    @SourceHash(value=1659055813)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="c0076f4e-0587-4a04-a473-7020dd2179cb", type=Object.class, start=23, end=145, index=0), @EnvVar(name="c0076f4e-0587-4a04-a473-7020dd2179cb", type=Object.class, start=229, end=243, index=0)})
    public static Object deco_test__try_1_1_0(Object _self) {
        block10: {
            Object object;
            Object[] __env__ = new Object[1];
            ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
            EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
            EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
            DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
            CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
            DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
            try {
                try {
                    DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                    try {
                        Object[] objectArray = new Object[]{__env__[0]};
                        CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4424.class, "proc___37", "", 3, 3, 0, 0, (Object[])objectArray);
                        ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "warning"), callSite2);
                        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try()", (Object)_self));
                        DynamicScope.destroyFrame();
                        DynamicScope.destroyFrame();
                        break block10;
                    }
                    catch (Throwable throwable) {
                        DynamicScope.destroyFrame();
                        throw throwable;
                    }
                }
                catch (Thrower.Throw throw_) {
                    Object object2;
                    object = object2 = Thrower.checkTag(throw_, callSite).peek();
                    DynamicScope.destroyFrame();
                }
            }
            catch (Throwable throwable) {
                DynamicScope.destroyFrame();
                throw throwable;
            }
            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) {
                Object c1 = object;
                ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)c1));
            } else if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "warning")))) {
                Object c1 = object;
                ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error1()", (Object)_self, (Object)c1));
            } else {
                throw new Error("Try block caught unexpected error.");
            }
        }
        ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_1_1_0")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="c0076f4e-0587-4a04-a473-7020dd2179cb", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___37(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }
}

/*
 * Decompiled with CFR 0.151-SNAPSHOT (${git.commit.id.abbrev}).
 */
package magik.jar_decompiler_lp.decompile_target;

import com.gesmallworld.magik.commons.runtime.annotations.CodeType;
import com.gesmallworld.magik.commons.runtime.annotations.Debugger;
import com.gesmallworld.magik.language.invokers.ConstantBuilder;
import com.gesmallworld.magik.language.invokers.DynamicAccessor;
import com.gesmallworld.magik.language.invokers.GlobalAccessor;
import com.gesmallworld.magik.language.invokers.ProcInvoker;
import com.gesmallworld.magik.language.invokers.TupleBuilder;
import com.gesmallworld.magik.language.invokers.VectorBuilder;
import com.gesmallworld.magik.language.utils.ExecutableMagik;
import com.gesmallworld.magik.language.utils.MagikObjectUtils;
import magik.jar_decompiler_lp.decompile_target.deco_test_4424;

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_4423
implements ExecutableMagik {
    @Debugger(value="MagikDebug")
    @CodeType(value="EmptyConstructor")
    public deco_test_4423() {
    }

    @Override
    @Debugger(value="MagikDebug")
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "try_3_3_3()", deco_test_4424.class, "deco_test__try_3_3_3", 1, 1);
        MagikObjectUtils.createMethod("deco_test", "try_3_3_2()", deco_test_4424.class, "deco_test__try_3_3_2", 1, 1);
        MagikObjectUtils.createMethod("deco_test", "try_3_3_1()", deco_test_4424.class, "deco_test__try_3_3_1", 1, 1);
        MagikObjectUtils.createMethod("deco_test", "try_3_3_0()", deco_test_4424.class, "deco_test__try_3_3_0", 1, 1);
        MagikObjectUtils.createMethod("deco_test", "try_3_2_3()", deco_test_4424.class, "deco_test__try_3_2_3", 1, 1);
        MagikObjectUtils.createMethod("deco_test", "try_3_2_2()", deco_test_4424.class, "deco_test__try_3_2_2", 1, 1);
        MagikObjectUtils.createMethod("deco_test", "try_3_2_1()", deco_test_4424.class, "deco_test__try_3_2_1", 1, 1);
        MagikObjectUtils.createMethod("deco_test", "try_3_2_0()", deco_test_4424.class, "deco_test__try_3_2_0", 1, 1);
        MagikObjectUtils.createMethod("deco_test", "try_3_1_3()", deco_test_4424.class, "deco_test__try_3_1_3", 1, 1);
        MagikObjectUtils.createMethod("deco_test", "try_3_1_2()", deco_test_4424.class, "deco_test__try_3_1_2", 1, 1);
        MagikObjectUtils.createMethod("deco_test", "try_3_1_1()", deco_test_4424.class, "deco_test__try_3_1_1", 1, 1);
        MagikObjectUtils.createMethod("deco_test", "try_3_1_0()", deco_test_4424.class, "deco_test__try_3_1_0", 1, 1);
        MagikObjectUtils.createMethod("deco_test", "try_2_3_3()", deco_test_4424.class, "deco_test__try_2_3_3", 1, 1);
        MagikObjectUtils.createMethod("deco_test", "try_2_3_2()", deco_test_4424.class, "deco_test__try_2_3_2", 1, 1);
        MagikObjectUtils.createMethod("deco_test", "try_2_3_1()", deco_test_4424.class, "deco_test__try_2_3_1", 1, 1);
        MagikObjectUtils.createMethod("deco_test", "try_2_3_0()", deco_test_4424.class, "deco_test__try_2_3_0", 1, 1);
        MagikObjectUtils.createMethod("deco_test", "try_2_2_3()", deco_test_4424.class, "deco_test__try_2_2_3", 1, 1);
        MagikObjectUtils.createMethod("deco_test", "try_2_2_2()", deco_test_4424.class, "deco_test__try_2_2_2", 1, 1);
        MagikObjectUtils.createMethod("deco_test", "try_2_2_1()", deco_test_4424.class, "deco_test__try_2_2_1", 1, 1);
        MagikObjectUtils.createMethod("deco_test", "try_2_2_0()", deco_test_4424.class, "deco_test__try_2_2_0", 1, 1);
        MagikObjectUtils.createMethod("deco_test", "try_2_1_3()", deco_test_4424.class, "deco_test__try_2_1_3", 1, 1);
        MagikObjectUtils.createMethod("deco_test", "try_2_1_2()", deco_test_4424.class, "deco_test__try_2_1_2", 1, 1);
        MagikObjectUtils.createMethod("deco_test", "try_2_1_1()", deco_test_4424.class, "deco_test__try_2_1_1", 1, 1);
        MagikObjectUtils.createMethod("deco_test", "try_2_1_0()", deco_test_4424.class, "deco_test__try_2_1_0", 1, 1);
        MagikObjectUtils.createMethod("deco_test", "try_2_0_0()", deco_test_4424.class, "deco_test__try_2_0_0", 1, 1);
        MagikObjectUtils.createMethod("deco_test", "try_1_3_3()", deco_test_4424.class, "deco_test__try_1_3_3", 1, 1);
        MagikObjectUtils.createMethod("deco_test", "try_1_3_2()", deco_test_4424.class, "deco_test__try_1_3_2", 1, 1);
        MagikObjectUtils.createMethod("deco_test", "try_1_3_1()", deco_test_4424.class, "deco_test__try_1_3_1", 1, 1);
        MagikObjectUtils.createMethod("deco_test", "try_1_3_0()", deco_test_4424.class, "deco_test__try_1_3_0", 1, 1);
        MagikObjectUtils.createMethod("deco_test", "try_1_2_3()", deco_test_4424.class, "deco_test__try_1_2_3", 1, 1);
        MagikObjectUtils.createMethod("deco_test", "try_1_2_2()", deco_test_4424.class, "deco_test__try_1_2_2", 1, 1);
        MagikObjectUtils.createMethod("deco_test", "try_1_2_1()", deco_test_4424.class, "deco_test__try_1_2_1", 1, 1);
        MagikObjectUtils.createMethod("deco_test", "try_1_2_0()", deco_test_4424.class, "deco_test__try_1_2_0", 1, 1);
        MagikObjectUtils.createMethod("deco_test", "try_1_1_3()", deco_test_4424.class, "deco_test__try_1_1_3", 1, 1);
        MagikObjectUtils.createMethod("deco_test", "try_1_1_2()", deco_test_4424.class, "deco_test__try_1_1_2", 1, 1);
        MagikObjectUtils.createMethod("deco_test", "try_1_1_1()", deco_test_4424.class, "deco_test__try_1_1_1", 1, 1);
        MagikObjectUtils.createMethod("deco_test", "try_1_1_0()", deco_test_4424.class, "deco_test__try_1_1_0", 1, 1);
    }

    @Override
    public void preload() {
    }
}

###########
_method deco_test.try_3_3_3() 
    _self.before()
    _try _with c1
        _self.try()
    _when error, information, ds_file_unchanged
        _self.error(c1)
    _when bad_user_bookmarks, document_too_large, warning
        _self.error1(c1)
    _when directory_not_selected, document_user_error, directory_invalid_path
        _self.error2(c1)
    _endtry
    _self.after()
    _return _unset
_endmethod
$

_method deco_test.try_3_3_2() 
    _self.before()
    _try _with c1
        _self.try()
    _when error, information, ds_file_unchanged
        _self.error(c1)
    _when bad_user_bookmarks, document_too_large, warning
        _self.error1(c1)
    _when directory_not_selected, directory_invalid_path
        _self.error2(c1)
    _endtry
    _self.after()
    _return _unset
_endmethod
$

_method deco_test.try_3_3_1() 
    _self.before()
    _try _with c1
        _self.try()
    _when error, information, ds_file_unchanged
        _self.error(c1)
    _when bad_user_bookmarks, document_too_large, warning
        _self.error1(c1)
    _when directory_invalid_path
        _self.error2(c1)
    _endtry
    _self.after()
    _return _unset
_endmethod
$

_method deco_test.try_3_3_0() 
    _self.before()
    _try _with c1
        _self.try()
    _when error, information, ds_file_unchanged
        _self.error(c1)
    _when bad_user_bookmarks, document_too_large, warning
        _self.error1(c1)
    _endtry
    _self.after()
    _return _unset
_endmethod
$

_method deco_test.try_3_2_3() 
    _self.before()
    _try _with c1
        _self.try()
    _when error, information, ds_file_unchanged
        _self.error(c1)
    _when bad_user_bookmarks, warning
        _self.error1(c1)
    _when directory_not_selected, document_user_error, directory_invalid_path
        _self.error2(c1)
    _endtry
    _self.after()
    _return _unset
_endmethod
$

_method deco_test.try_3_2_2() 
    _self.before()
    _try _with c1
        _self.try()
    _when error, information, ds_file_unchanged
        _self.error(c1)
    _when bad_user_bookmarks, warning
        _self.error1(c1)
    _when directory_not_selected, directory_invalid_path
        _self.error2(c1)
    _endtry
    _self.after()
    _return _unset
_endmethod
$

_method deco_test.try_3_2_1() 
    _self.before()
    _try _with c1
        _self.try()
    _when error, information, ds_file_unchanged
        _self.error(c1)
    _when bad_user_bookmarks, warning
        _self.error1(c1)
    _when directory_invalid_path
        _self.error2(c1)
    _endtry
    _self.after()
    _return _unset
_endmethod
$

_method deco_test.try_3_2_0() 
    _self.before()
    _try _with c1
        _self.try()
    _when error, information, ds_file_unchanged
        _self.error(c1)
    _when bad_user_bookmarks, warning
        _self.error1(c1)
    _endtry
    _self.after()
    _return _unset
_endmethod
$

_method deco_test.try_3_1_3() 
    _self.before()
    _try _with c1
        _self.try()
    _when error, information, ds_file_unchanged
        _self.error(c1)
    _when warning
        _self.error1(c1)
    _when directory_not_selected, document_user_error, directory_invalid_path
        _self.error2(c1)
    _endtry
    _self.after()
    _return _unset
_endmethod
$

_method deco_test.try_3_1_2() 
    _self.before()
    _try _with c1
        _self.try()
    _when error, information, ds_file_unchanged
        _self.error(c1)
    _when warning
        _self.error1(c1)
    _when directory_not_selected, directory_invalid_path
        _self.error2(c1)
    _endtry
    _self.after()
    _return _unset
_endmethod
$

_method deco_test.try_3_1_1() 
    _self.before()
    _try _with c1
        _self.try()
    _when error, information, ds_file_unchanged
        _self.error(c1)
    _when warning
        _self.error1(c1)
    _when directory_invalid_path
        _self.error2(c1)
    _endtry
    _self.after()
    _return _unset
_endmethod
$

_method deco_test.try_3_1_0() 
    _self.before()
    _try _with c1
        _self.try()
    _when error, information, ds_file_unchanged
        _self.error(c1)
    _when warning
        _self.error1(c1)
    _endtry
    _self.after()
    _return _unset
_endmethod
$

_method deco_test.try_2_3_3() 
    _self.before()
    _try _with c1
        _self.try()
    _when error, information
        _self.error(c1)
    _when bad_user_bookmarks, document_too_large, warning
        _self.error1(c1)
    _when directory_not_selected, document_user_error, directory_invalid_path
        _self.error2(c1)
    _endtry
    _self.after()
    _return _unset
_endmethod
$

_method deco_test.try_2_3_2() 
    _self.before()
    _try _with c1
        _self.try()
    _when error, information
        _self.error(c1)
    _when bad_user_bookmarks, document_too_large, warning
        _self.error1(c1)
    _when directory_not_selected, directory_invalid_path
        _self.error2(c1)
    _endtry
    _self.after()
    _return _unset
_endmethod
$

_method deco_test.try_2_3_1() 
    _self.before()
    _try _with c1
        _self.try()
    _when error, information
        _self.error(c1)
    _when bad_user_bookmarks, document_too_large, warning
        _self.error1(c1)
    _when directory_invalid_path
        _self.error2(c1)
    _endtry
    _self.after()
    _return _unset
_endmethod
$

_method deco_test.try_2_3_0() 
    _self.before()
    _try _with c1
        _self.try()
    _when error, information
        _self.error(c1)
    _when bad_user_bookmarks, document_too_large, warning
        _self.error1(c1)
    _endtry
    _self.after()
    _return _unset
_endmethod
$

_method deco_test.try_2_2_3() 
    _self.before()
    _try _with c1
        _self.try()
    _when error, information
        _self.error(c1)
    _when bad_user_bookmarks, warning
        _self.error1(c1)
    _when directory_not_selected, document_user_error, directory_invalid_path
        _self.error2(c1)
    _endtry
    _self.after()
    _return _unset
_endmethod
$

_method deco_test.try_2_2_2() 
    _self.before()
    _try _with c1
        _self.try()
    _when error, information
        _self.error(c1)
    _when bad_user_bookmarks, warning
        _self.error1(c1)
    _when directory_not_selected, directory_invalid_path
        _self.error2(c1)
    _endtry
    _self.after()
    _return _unset
_endmethod
$

_method deco_test.try_2_2_1() 
    _self.before()
    _try _with c1
        _self.try()
    _when error, information
        _self.error(c1)
    _when bad_user_bookmarks, warning
        _self.error1(c1)
    _when directory_invalid_path
        _self.error2(c1)
    _endtry
    _self.after()
    _return _unset
_endmethod
$

_method deco_test.try_2_2_0() 
    _self.before()
    _try _with c1
        _self.try()
    _when error, information
        _self.error(c1)
    _when bad_user_bookmarks, warning
        _self.error1(c1)
    _endtry
    _self.after()
    _return _unset
_endmethod
$

_method deco_test.try_2_1_3() 
    _self.before()
    _try _with c1
        _self.try()
    _when error, information
        _self.error(c1)
    _when warning
        _self.error1(c1)
    _when directory_not_selected, document_user_error, directory_invalid_path
        _self.error2(c1)
    _endtry
    _self.after()
    _return _unset
_endmethod
$

_method deco_test.try_2_1_2() 
    _self.before()
    _try _with c1
        _self.try()
    _when error, information
        _self.error(c1)
    _when warning
        _self.error1(c1)
    _when directory_not_selected, directory_invalid_path
        _self.error2(c1)
    _endtry
    _self.after()
    _return _unset
_endmethod
$

_method deco_test.try_2_1_1() 
    _self.before()
    _try _with c1
        _self.try()
    _when error, information
        _self.error(c1)
    _when warning
        _self.error1(c1)
    _when directory_invalid_path
        _self.error2(c1)
    _endtry
    _self.after()
    _return _unset
_endmethod
$

_method deco_test.try_2_1_0() 
    _self.before()
    _try _with c1
        _self.try()
    _when error, information
        _self.error(c1)
    _when warning
        _self.error1(c1)
    _endtry
    _self.after()
    _return _unset
_endmethod
$

_method deco_test.try_2_0_0() 
    _self.before()
    _try _with c1
        _self.try()
    _when error, information
        _self.error(c1)
    _endtry
    _self.after()
    _return _unset
_endmethod
$

_method deco_test.try_1_3_3() 
    _self.before()
    _try _with c1
        _self.try()
    _when error
        _self.error(c1)
    _when bad_user_bookmarks, document_too_large, warning
        _self.error1(c1)
    _when directory_not_selected, document_user_error, directory_invalid_path
        _self.error2(c1)
    _endtry
    _self.after()
    _return _unset
_endmethod
$

_method deco_test.try_1_3_2() 
    _self.before()
    _try _with c1
        _self.try()
    _when error
        _self.error(c1)
    _when bad_user_bookmarks, document_too_large, warning
        _self.error1(c1)
    _when directory_not_selected, directory_invalid_path
        _self.error2(c1)
    _endtry
    _self.after()
    _return _unset
_endmethod
$

_method deco_test.try_1_3_1() 
    _self.before()
    _try _with c1
        _self.try()
    _when error
        _self.error(c1)
    _when bad_user_bookmarks, document_too_large, warning
        _self.error1(c1)
    _when directory_invalid_path
        _self.error2(c1)
    _endtry
    _self.after()
    _return _unset
_endmethod
$

_method deco_test.try_1_3_0() 
    _self.before()
    _try _with c1
        _self.try()
    _when error
        _self.error(c1)
    _when warning, bad_user_bookmarks, document_too_large
        _self.error1(c1)
    _endtry
    _self.after()
    _return _unset
_endmethod
$

_method deco_test.try_1_2_3() 
    _self.before()
    _try _with c1
        _self.try()
    _when error
        _self.error(c1)
    _when bad_user_bookmarks, warning
        _self.error1(c1)
    _when directory_not_selected, document_user_error, directory_invalid_path
        _self.error2(c1)
    _endtry
    _self.after()
    _return _unset
_endmethod
$

_method deco_test.try_1_2_2() 
    _self.before()
    _try _with c1
        _self.try()
    _when error
        _self.error(c1)
    _when bad_user_bookmarks, warning
        _self.error1(c1)
    _when directory_not_selected, directory_invalid_path
        _self.error2(c1)
    _endtry
    _self.after()
    _return _unset
_endmethod
$

_method deco_test.try_1_2_1() 
    _self.before()
    _try _with c1
        _self.try()
    _when error
        _self.error(c1)
    _when bad_user_bookmarks, warning
        _self.error1(c1)
    _when directory_invalid_path
        _self.error2(c1)
    _endtry
    _self.after()
    _return _unset
_endmethod
$

_method deco_test.try_1_2_0() 
    _self.before()
    _try _with c1
        _self.try()
    _when error
        _self.error(c1)
    _when warning, bad_user_bookmarks
        _self.error1(c1)
    _endtry
    _self.after()
    _return _unset
_endmethod
$

_method deco_test.try_1_1_3() 
    _self.before()
    _try _with c1
        _self.try()
    _when error
        _self.error(c1)
    _when warning
        _self.error1(c1)
    _when directory_invalid_path, directory_not_selected, document_user_error
        _self.error2(c1)
    _endtry
    _self.after()
    _return _unset
_endmethod
$

_method deco_test.try_1_1_2() 
    _self.before()
    _try _with c1
        _self.try()
    _when error
        _self.error(c1)
    _when warning
        _self.error1(c1)
    _when directory_invalid_path, directory_not_selected
        _self.error2(c1)
    _endtry
    _self.after()
    _return _unset
_endmethod
$

_method deco_test.try_1_1_1() 
    _self.before()
    _try _with c1
        _self.try()
    _when error
        _self.error(c1)
    _when warning
        _self.error1(c1)
    _when directory_invalid_path
        _self.error2(c1)
    _endtry
    _self.after()
    _return _unset
_endmethod
$

_method deco_test.try_1_1_0() 
    _self.before()
    _try _with c1
        _self.try()
    _when error
        _self.error(c1)
    _when warning
        _self.error1(c1)
    _endtry
    _self.after()
    _return _unset
_endmethod
$
###########
