## jpn_method_test_trial
package magik.jar_decompiler_lp.decompile_target;

import com.gesmallworld.magik.commons.runtime.annotations.CodeType;
import com.gesmallworld.magik.commons.runtime.annotations.Debugger;
import com.gesmallworld.magik.commons.runtime.annotations.EnvVar;
import com.gesmallworld.magik.commons.runtime.annotations.EnvVars;
import com.gesmallworld.magik.commons.runtime.annotations.Parent;
import com.gesmallworld.magik.language.DynamicScope;
import com.gesmallworld.magik.language.InterruptInfrastructure;
import com.gesmallworld.magik.language.ResultTuple;
import com.gesmallworld.magik.language.SourceHash;
import com.gesmallworld.magik.language.Thrower;
import com.gesmallworld.magik.language.invokers.ConstantBuilder;
import com.gesmallworld.magik.language.invokers.DynamicAccessor;
import com.gesmallworld.magik.language.invokers.EnvAccessor;
import com.gesmallworld.magik.language.invokers.GlobalAccessor;
import com.gesmallworld.magik.language.invokers.Invoker;
import com.gesmallworld.magik.language.invokers.ProcInvoker;
import com.gesmallworld.magik.language.invokers.TupleBuilder;
import com.gesmallworld.magik.language.utils.MagikObjectUtils;
import java.lang.invoke.CallSite;

@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_4249 {
    @SourceHash(value=1444196662)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="2bd193c5-7d3b-4663-aef0-47f5746d320a", type=Object.class, start=23, end=152, index=0), @EnvVar(name="2bd193c5-7d3b-4663-aef0-47f5746d320a", type=Object.class, start=273, end=287, index=0)})
    public static Object deco_test__try_1_1_1(Object _self) {
        block12: {
            Object object;
            Object[] __env__ = new Object[1];
            ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
            EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
            EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
            DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
            CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
            DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
            try {
                try {
                    DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                    try {
                        Object[] objectArray = new Object[]{__env__[0]};
                        CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4249.class, "proc___", "", 3, 3, 0, 0, (Object[])objectArray);
                        ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "warning"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path"), callSite2);
                        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try()", (Object)_self));
                        DynamicScope.destroyFrame();
                        DynamicScope.destroyFrame();
                        break block12;
                    }
                    catch (Throwable throwable) {
                        DynamicScope.destroyFrame();
                        throw throwable;
                    }
                }
                catch (Thrower.Throw throw_) {
                    Object object2;
                    object = object2 = Thrower.checkTag(throw_, callSite).peek();
                    DynamicScope.destroyFrame();
                }
            }
            catch (Throwable throwable) {
                DynamicScope.destroyFrame();
                throw throwable;
            }
            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) {
                Object c1 = object;
                ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)c1));
            } else if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "warning")))) {
                Object c1 = object;
                ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error1()", (Object)_self, (Object)c1));
            } else if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path")))) {
                Object c1 = object;
                ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error2()", (Object)_self, (Object)c1));
            } else {
                throw new Error("Try block caught unexpected error.");
            }
        }
        ResultTuple cfr_ignored_5 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_1_1_1")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="2bd193c5-7d3b-4663-aef0-47f5746d320a", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

    @SourceHash(value=811265195)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="c081bf18-d119-4086-b2fc-b3fc773a4c68", type=Object.class, start=23, end=145, index=0), @EnvVar(name="c081bf18-d119-4086-b2fc-b3fc773a4c68", type=Object.class, start=229, end=243, index=0)})
    public static Object deco_test__try_1_1_0(Object _self) {
        block10: {
            Object object;
            Object[] __env__ = new Object[1];
            ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
            EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
            EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
            DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
            CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
            DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
            try {
                try {
                    DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                    try {
                        Object[] objectArray = new Object[]{__env__[0]};
                        CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4249.class, "proc___2", "", 3, 3, 0, 0, (Object[])objectArray);
                        ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "warning"), callSite2);
                        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try()", (Object)_self));
                        DynamicScope.destroyFrame();
                        DynamicScope.destroyFrame();
                        break block10;
                    }
                    catch (Throwable throwable) {
                        DynamicScope.destroyFrame();
                        throw throwable;
                    }
                }
                catch (Thrower.Throw throw_) {
                    Object object2;
                    object = object2 = Thrower.checkTag(throw_, callSite).peek();
                    DynamicScope.destroyFrame();
                }
            }
            catch (Throwable throwable) {
                DynamicScope.destroyFrame();
                throw throwable;
            }
            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) {
                Object c1 = object;
                ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)c1));
            } else if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "warning")))) {
                Object c1 = object;
                ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error1()", (Object)_self, (Object)c1));
            } else {
                throw new Error("Try block caught unexpected error.");
            }
        }
        ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_1_1_0")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="c081bf18-d119-4086-b2fc-b3fc773a4c68", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___2(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

    @SourceHash(value=909945984)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="37a67df9-b72a-4fe4-aa5e-cbb99eedca55", type=Object.class, start=23, end=138, index=0), @EnvVar(name="37a67df9-b72a-4fe4-aa5e-cbb99eedca55", type=Object.class, start=185, end=199, index=0)})
    public static Object deco_test__try_1_0_0(Object _self) {
        block8: {
            Object object;
            Object[] __env__ = new Object[1];
            ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
            EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
            EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
            DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
            CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
            DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
            try {
                try {
                    DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                    try {
                        Object[] objectArray = new Object[]{__env__[0]};
                        ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4249.class, "proc___3", "", 3, 3, 0, 0, (Object[])objectArray));
                        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try()", (Object)_self));
                        DynamicScope.destroyFrame();
                        DynamicScope.destroyFrame();
                        break block8;
                    }
                    catch (Throwable throwable) {
                        DynamicScope.destroyFrame();
                        throw throwable;
                    }
                }
                catch (Thrower.Throw throw_) {
                    Object object2;
                    object = object2 = Thrower.checkTag(throw_, callSite).peek();
                    DynamicScope.destroyFrame();
                }
            }
            catch (Throwable throwable) {
                DynamicScope.destroyFrame();
                throw throwable;
            }
            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) {
                Object c1 = object;
                ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)c1));
            } else {
                throw new Error("Try block caught unexpected error.");
            }
        }
        ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_1_0_0")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="37a67df9-b72a-4fe4-aa5e-cbb99eedca55", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___3(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @SourceHash(value=-60563307)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="777d210f-fae4-4e70-aa5f-2a64b584fb95", type=Object.class, start=23, end=173, index=0), @EnvVar(name="777d210f-fae4-4e70-aa5f-2a64b584fb95", type=Object.class, start=345, end=359, index=0)})
    public static Object deco_test__try_2_2_2(Object _self) {
        block7: {
            Object object;
            block11: {
                block12: {
                    Object object2;
                    block9: {
                        block10: {
                            Object object3;
                            block8: {
                                Object object4;
                                Object[] __env__ = new Object[1];
                                ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
                                EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
                                EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
                                DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
                                CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
                                DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
                                try {
                                    try {
                                        DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                                        try {
                                            Object[] objectArray = new Object[]{__env__[0]};
                                            CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4249.class, "proc___4", "", 3, 3, 0, 0, (Object[])objectArray);
                                            ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "information"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "warning"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_not_selected"), callSite2);
                                            ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try()", (Object)_self));
                                            DynamicScope.destroyFrame();
                                            DynamicScope.destroyFrame();
                                            break block7;
                                        }
                                        catch (Throwable throwable) {
                                            DynamicScope.destroyFrame();
                                            throw throwable;
                                        }
                                    }
                                    catch (Thrower.Throw throw_) {
                                        Object object5;
                                        object4 = object5 = Thrower.checkTag(throw_, callSite).peek();
                                        DynamicScope.destroyFrame();
                                    }
                                }
                                catch (Throwable throwable) {
                                    DynamicScope.destroyFrame();
                                    throw throwable;
                                }
                                object3 = object4;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object4, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) break block8;
                                object3 = object3;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "information")))) break block8;
                                object2 = object3;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "warning")))) break block9;
                                break block10;
                            }
                            Object c1 = object3;
                            ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)c1));
                            break block7;
                        }
                        object2 = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks")))) break block9;
                        object = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path")))) break block11;
                        break block12;
                    }
                    Object c1 = object2;
                    ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error1()", (Object)_self, (Object)c1));
                    break block7;
                }
                object = object;
                if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_not_selected")))) {
                    throw new Error("Try block caught unexpected error.");
                }
            }
            Object c1 = object;
            ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error2()", (Object)_self, (Object)c1));
        }
        ResultTuple cfr_ignored_5 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_2_2_2")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="777d210f-fae4-4e70-aa5f-2a64b584fb95", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___4(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @SourceHash(value=-1247790935)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="81550d0b-9868-43da-914f-a2ef30aa47ca", type=Object.class, start=23, end=166, index=0), @EnvVar(name="81550d0b-9868-43da-914f-a2ef30aa47ca", type=Object.class, start=321, end=335, index=0)})
    public static Object deco_test__try_2_2_1(Object _self) {
        block7: {
            Object object;
            block11: {
                block9: {
                    block10: {
                        Object object2;
                        block8: {
                            Object object3;
                            Object[] __env__ = new Object[1];
                            ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
                            EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
                            EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
                            DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
                            CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
                            DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
                            try {
                                try {
                                    DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                                    try {
                                        Object[] objectArray = new Object[]{__env__[0]};
                                        CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4249.class, "proc___5", "", 3, 3, 0, 0, (Object[])objectArray);
                                        ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "information"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "warning"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path"), callSite2);
                                        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try()", (Object)_self));
                                        DynamicScope.destroyFrame();
                                        DynamicScope.destroyFrame();
                                        break block7;
                                    }
                                    catch (Throwable throwable) {
                                        DynamicScope.destroyFrame();
                                        throw throwable;
                                    }
                                }
                                catch (Thrower.Throw throw_) {
                                    Object object4;
                                    object3 = object4 = Thrower.checkTag(throw_, callSite).peek();
                                    DynamicScope.destroyFrame();
                                }
                            }
                            catch (Throwable throwable) {
                                DynamicScope.destroyFrame();
                                throw throwable;
                            }
                            object2 = object3;
                            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) break block8;
                            object2 = object2;
                            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "information")))) break block8;
                            object = object2;
                            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "warning")))) break block9;
                            break block10;
                        }
                        Object c1 = object2;
                        ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)c1));
                        break block7;
                    }
                    object = object;
                    if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks")))) break block9;
                    if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path")))) {
                        throw new Error("Try block caught unexpected error.");
                    }
                    break block11;
                }
                Object c1 = object;
                ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error1()", (Object)_self, (Object)c1));
                break block7;
            }
            Object c1 = object;
            ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error2()", (Object)_self, (Object)c1));
        }
        ResultTuple cfr_ignored_5 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_2_2_1")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="81550d0b-9868-43da-914f-a2ef30aa47ca", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___5(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @SourceHash(value=-509311754)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="891145bb-36ed-4935-ba7f-d3eb442b9fa1", type=Object.class, start=23, end=159, index=0), @EnvVar(name="891145bb-36ed-4935-ba7f-d3eb442b9fa1", type=Object.class, start=277, end=291, index=0)})
    public static Object deco_test__try_2_2_0(Object _self) {
        block7: {
            Object object;
            block9: {
                block10: {
                    Object object2;
                    block8: {
                        Object object3;
                        Object[] __env__ = new Object[1];
                        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
                        EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
                        EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
                        DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
                        CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
                        DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
                        try {
                            try {
                                DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                                try {
                                    Object[] objectArray = new Object[]{__env__[0]};
                                    CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4249.class, "proc___6", "", 3, 3, 0, 0, (Object[])objectArray);
                                    ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "information"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "warning"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks"), callSite2);
                                    ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try()", (Object)_self));
                                    DynamicScope.destroyFrame();
                                    DynamicScope.destroyFrame();
                                    break block7;
                                }
                                catch (Throwable throwable) {
                                    DynamicScope.destroyFrame();
                                    throw throwable;
                                }
                            }
                            catch (Thrower.Throw throw_) {
                                Object object4;
                                object3 = object4 = Thrower.checkTag(throw_, callSite).peek();
                                DynamicScope.destroyFrame();
                            }
                        }
                        catch (Throwable throwable) {
                            DynamicScope.destroyFrame();
                            throw throwable;
                        }
                        object2 = object3;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) break block8;
                        object2 = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "information")))) break block8;
                        object = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "warning")))) break block9;
                        break block10;
                    }
                    Object c1 = object2;
                    ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)c1));
                    break block7;
                }
                object = object;
                if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks")))) {
                    throw new Error("Try block caught unexpected error.");
                }
            }
            Object c1 = object;
            ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error1()", (Object)_self, (Object)c1));
        }
        ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_2_2_0")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="891145bb-36ed-4935-ba7f-d3eb442b9fa1", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___6(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @SourceHash(value=-828121922)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="4e2c7c1e-ab5a-4e95-a28a-36fb9b20238c", type=Object.class, start=23, end=152, index=0), @EnvVar(name="4e2c7c1e-ab5a-4e95-a28a-36fb9b20238c", type=Object.class, start=253, end=267, index=0)})
    public static Object deco_test__try_2_1_0(Object _self) {
        block7: {
            Object object;
            block9: {
                block8: {
                    Object object2;
                    Object[] __env__ = new Object[1];
                    ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
                    EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
                    EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
                    DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
                    CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
                    DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
                    try {
                        try {
                            DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                            try {
                                Object[] objectArray = new Object[]{__env__[0]};
                                CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4249.class, "proc___7", "", 3, 3, 0, 0, (Object[])objectArray);
                                ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "information"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "warning"), callSite2);
                                ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try()", (Object)_self));
                                DynamicScope.destroyFrame();
                                DynamicScope.destroyFrame();
                                break block7;
                            }
                            catch (Throwable throwable) {
                                DynamicScope.destroyFrame();
                                throw throwable;
                            }
                        }
                        catch (Thrower.Throw throw_) {
                            Object object3;
                            object2 = object3 = Thrower.checkTag(throw_, callSite).peek();
                            DynamicScope.destroyFrame();
                        }
                    }
                    catch (Throwable throwable) {
                        DynamicScope.destroyFrame();
                        throw throwable;
                    }
                    object = object2;
                    if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) break block8;
                    object = object;
                    if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "information")))) break block8;
                    if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "warning")))) {
                        throw new Error("Try block caught unexpected error.");
                    }
                    break block9;
                }
                Object c1 = object;
                ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)c1));
                break block7;
            }
            Object c1 = object;
            ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error1()", (Object)_self, (Object)c1));
        }
        ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_2_1_0")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="4e2c7c1e-ab5a-4e95-a28a-36fb9b20238c", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___7(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

    @SourceHash(value=-678577679)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="84988e22-8ee0-4663-acf3-02f0410e3202", type=Object.class, start=23, end=145, index=0), @EnvVar(name="84988e22-8ee0-4663-acf3-02f0410e3202", type=Object.class, start=209, end=223, index=0)})
    public static Object deco_test__try_2_0_0(Object _self) {
        block9: {
            Object object;
            Object[] __env__ = new Object[1];
            ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
            EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
            EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
            DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
            CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
            DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
            try {
                try {
                    DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                    try {
                        Object[] objectArray = new Object[]{__env__[0]};
                        CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4249.class, "proc___8", "", 3, 3, 0, 0, (Object[])objectArray);
                        ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "information"), callSite2);
                        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try()", (Object)_self));
                        DynamicScope.destroyFrame();
                        DynamicScope.destroyFrame();
                        break block9;
                    }
                    catch (Throwable throwable) {
                        DynamicScope.destroyFrame();
                        throw throwable;
                    }
                }
                catch (Thrower.Throw throw_) {
                    Object object2;
                    object = object2 = Thrower.checkTag(throw_, callSite).peek();
                    DynamicScope.destroyFrame();
                }
            }
            catch (Throwable throwable) {
                DynamicScope.destroyFrame();
                throw throwable;
            }
            Object object3 = object;
            if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) {
                object3 = object3;
                if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "information")))) {
                    throw new Error("Try block caught unexpected error.");
                }
            }
            Object c1 = object3;
            ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)c1));
        }
        ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_2_0_0")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="84988e22-8ee0-4663-acf3-02f0410e3202", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___8(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @SourceHash(value=-975586522)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="3e1bc81f-7aff-49ac-abb0-f64375f6e806", type=Object.class, start=23, end=194, index=0), @EnvVar(name="3e1bc81f-7aff-49ac-abb0-f64375f6e806", type=Object.class, start=417, end=431, index=0)})
    public static Object deco_test__try_3_3_3(Object _self) {
        block8: {
            Object object;
            block12: {
                block13: {
                    Object object2;
                    block10: {
                        block11: {
                            Object object3;
                            block9: {
                                Object object4;
                                Object[] __env__ = new Object[1];
                                ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
                                EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
                                EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
                                DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
                                CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
                                DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
                                try {
                                    try {
                                        DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                                        try {
                                            Object[] objectArray = new Object[]{__env__[0]};
                                            CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4249.class, "proc___9", "", 3, 3, 0, 0, (Object[])objectArray);
                                            ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "information"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "ds_file_unchanged"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "warning"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "document_too_large"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_not_selected"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "document_user_error"), callSite2);
                                            ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try()", (Object)_self));
                                            DynamicScope.destroyFrame();
                                            DynamicScope.destroyFrame();
                                            break block8;
                                        }
                                        catch (Throwable throwable) {
                                            DynamicScope.destroyFrame();
                                            throw throwable;
                                        }
                                    }
                                    catch (Thrower.Throw throw_) {
                                        Object object5;
                                        object4 = object5 = Thrower.checkTag(throw_, callSite).peek();
                                        DynamicScope.destroyFrame();
                                    }
                                }
                                catch (Throwable throwable) {
                                    DynamicScope.destroyFrame();
                                    throw throwable;
                                }
                                object3 = object4;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object4, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) break block9;
                                object3 = object3;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "information")))) break block9;
                                object3 = object3;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "ds_file_unchanged")))) break block9;
                                object2 = object3;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "warning")))) break block10;
                                break block11;
                            }
                            Object c1 = object3;
                            ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)c1));
                            break block8;
                        }
                        object2 = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks")))) break block10;
                        object2 = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "document_too_large")))) break block10;
                        object = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path")))) break block12;
                        break block13;
                    }
                    Object c1 = object2;
                    ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error1()", (Object)_self, (Object)c1));
                    break block8;
                }
                object = object;
                if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_not_selected")))) {
                    object = object;
                    if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "document_user_error")))) {
                        throw new Error("Try block caught unexpected error.");
                    }
                }
            }
            Object c1 = object;
            ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error2()", (Object)_self, (Object)c1));
        }
        ResultTuple cfr_ignored_5 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_3_3_3")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="3e1bc81f-7aff-49ac-abb0-f64375f6e806", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___9(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @SourceHash(value=-1716733683)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="bd3d5731-c9bd-410b-92da-9159e3ea63cb", type=Object.class, start=23, end=187, index=0), @EnvVar(name="bd3d5731-c9bd-410b-92da-9159e3ea63cb", type=Object.class, start=393, end=407, index=0)})
    public static Object deco_test__try_3_3_2(Object _self) {
        block7: {
            Object object;
            block11: {
                block12: {
                    Object object2;
                    block9: {
                        block10: {
                            Object object3;
                            block8: {
                                Object object4;
                                Object[] __env__ = new Object[1];
                                ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
                                EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
                                EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
                                DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
                                CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
                                DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
                                try {
                                    try {
                                        DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                                        try {
                                            Object[] objectArray = new Object[]{__env__[0]};
                                            CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4249.class, "proc___10", "", 3, 3, 0, 0, (Object[])objectArray);
                                            ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "information"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "ds_file_unchanged"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "warning"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "document_too_large"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_not_selected"), callSite2);
                                            ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try()", (Object)_self));
                                            DynamicScope.destroyFrame();
                                            DynamicScope.destroyFrame();
                                            break block7;
                                        }
                                        catch (Throwable throwable) {
                                            DynamicScope.destroyFrame();
                                            throw throwable;
                                        }
                                    }
                                    catch (Thrower.Throw throw_) {
                                        Object object5;
                                        object4 = object5 = Thrower.checkTag(throw_, callSite).peek();
                                        DynamicScope.destroyFrame();
                                    }
                                }
                                catch (Throwable throwable) {
                                    DynamicScope.destroyFrame();
                                    throw throwable;
                                }
                                object3 = object4;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object4, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) break block8;
                                object3 = object3;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "information")))) break block8;
                                object3 = object3;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "ds_file_unchanged")))) break block8;
                                object2 = object3;
                                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "warning")))) break block9;
                                break block10;
                            }
                            Object c1 = object3;
                            ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)c1));
                            break block7;
                        }
                        object2 = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks")))) break block9;
                        object2 = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "document_too_large")))) break block9;
                        object = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path")))) break block11;
                        break block12;
                    }
                    Object c1 = object2;
                    ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error1()", (Object)_self, (Object)c1));
                    break block7;
                }
                object = object;
                if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_not_selected")))) {
                    throw new Error("Try block caught unexpected error.");
                }
            }
            Object c1 = object;
            ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error2()", (Object)_self, (Object)c1));
        }
        ResultTuple cfr_ignored_5 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_3_3_2")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="bd3d5731-c9bd-410b-92da-9159e3ea63cb", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___10(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @SourceHash(value=621823295)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="f6d8635f-2e35-4fbf-aa09-b0b6d2ce3b51", type=Object.class, start=23, end=180, index=0), @EnvVar(name="f6d8635f-2e35-4fbf-aa09-b0b6d2ce3b51", type=Object.class, start=369, end=383, index=0)})
    public static Object deco_test__try_3_3_1(Object _self) {
        block7: {
            Object object;
            block11: {
                block9: {
                    block10: {
                        Object object2;
                        block8: {
                            Object object3;
                            Object[] __env__ = new Object[1];
                            ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
                            EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
                            EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
                            DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
                            CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
                            DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
                            try {
                                try {
                                    DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                                    try {
                                        Object[] objectArray = new Object[]{__env__[0]};
                                        CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4249.class, "proc___11", "", 3, 3, 0, 0, (Object[])objectArray);
                                        ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "information"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "ds_file_unchanged"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "warning"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "document_too_large"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path"), callSite2);
                                        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try()", (Object)_self));
                                        DynamicScope.destroyFrame();
                                        DynamicScope.destroyFrame();
                                        break block7;
                                    }
                                    catch (Throwable throwable) {
                                        DynamicScope.destroyFrame();
                                        throw throwable;
                                    }
                                }
                                catch (Thrower.Throw throw_) {
                                    Object object4;
                                    object3 = object4 = Thrower.checkTag(throw_, callSite).peek();
                                    DynamicScope.destroyFrame();
                                }
                            }
                            catch (Throwable throwable) {
                                DynamicScope.destroyFrame();
                                throw throwable;
                            }
                            object2 = object3;
                            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) break block8;
                            object2 = object2;
                            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "information")))) break block8;
                            object2 = object2;
                            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "ds_file_unchanged")))) break block8;
                            object = object2;
                            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "warning")))) break block9;
                            break block10;
                        }
                        Object c1 = object2;
                        ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)c1));
                        break block7;
                    }
                    object = object;
                    if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks")))) break block9;
                    object = object;
                    if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "document_too_large")))) break block9;
                    if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "directory_invalid_path")))) {
                        throw new Error("Try block caught unexpected error.");
                    }
                    break block11;
                }
                Object c1 = object;
                ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error1()", (Object)_self, (Object)c1));
                break block7;
            }
            Object c1 = object;
            ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error2()", (Object)_self, (Object)c1));
        }
        ResultTuple cfr_ignored_5 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_3_3_1")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="f6d8635f-2e35-4fbf-aa09-b0b6d2ce3b51", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___11(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @SourceHash(value=-1821668670)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="7ec65a90-f258-4560-8cbe-08fbd4b1e0eb", type=Object.class, start=23, end=173, index=0), @EnvVar(name="7ec65a90-f258-4560-8cbe-08fbd4b1e0eb", type=Object.class, start=325, end=339, index=0)})
    public static Object deco_test__try_3_3_0(Object _self) {
        block8: {
            Object object;
            block10: {
                block11: {
                    Object object2;
                    block9: {
                        Object object3;
                        Object[] __env__ = new Object[1];
                        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
                        EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
                        EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
                        DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
                        CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
                        DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
                        try {
                            try {
                                DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                                try {
                                    Object[] objectArray = new Object[]{__env__[0]};
                                    CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4249.class, "proc___12", "", 3, 3, 0, 0, (Object[])objectArray);
                                    ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "information"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "ds_file_unchanged"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "warning"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "document_too_large"), callSite2);
                                    ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try()", (Object)_self));
                                    DynamicScope.destroyFrame();
                                    DynamicScope.destroyFrame();
                                    break block8;
                                }
                                catch (Throwable throwable) {
                                    DynamicScope.destroyFrame();
                                    throw throwable;
                                }
                            }
                            catch (Thrower.Throw throw_) {
                                Object object4;
                                object3 = object4 = Thrower.checkTag(throw_, callSite).peek();
                                DynamicScope.destroyFrame();
                            }
                        }
                        catch (Throwable throwable) {
                            DynamicScope.destroyFrame();
                            throw throwable;
                        }
                        object2 = object3;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) break block9;
                        object2 = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "information")))) break block9;
                        object2 = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "ds_file_unchanged")))) break block9;
                        object = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "warning")))) break block10;
                        break block11;
                    }
                    Object c1 = object2;
                    ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)c1));
                    break block8;
                }
                object = object;
                if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks")))) {
                    object = object;
                    if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "document_too_large")))) {
                        throw new Error("Try block caught unexpected error.");
                    }
                }
            }
            Object c1 = object;
            ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error1()", (Object)_self, (Object)c1));
        }
        ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_3_3_0")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="7ec65a90-f258-4560-8cbe-08fbd4b1e0eb", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___12(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @SourceHash(value=-111534589)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="e0601eb8-8fd9-42c7-9c3f-22b1dd8aef9e", type=Object.class, start=23, end=166, index=0), @EnvVar(name="e0601eb8-8fd9-42c7-9c3f-22b1dd8aef9e", type=Object.class, start=301, end=315, index=0)})
    public static Object deco_test__try_3_2_0(Object _self) {
        block7: {
            Object object;
            block9: {
                block10: {
                    Object object2;
                    block8: {
                        Object object3;
                        Object[] __env__ = new Object[1];
                        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
                        EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
                        EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
                        DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
                        CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
                        DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
                        try {
                            try {
                                DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                                try {
                                    Object[] objectArray = new Object[]{__env__[0]};
                                    CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4249.class, "proc___13", "", 3, 3, 0, 0, (Object[])objectArray);
                                    ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "information"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "ds_file_unchanged"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "warning"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks"), callSite2);
                                    ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try()", (Object)_self));
                                    DynamicScope.destroyFrame();
                                    DynamicScope.destroyFrame();
                                    break block7;
                                }
                                catch (Throwable throwable) {
                                    DynamicScope.destroyFrame();
                                    throw throwable;
                                }
                            }
                            catch (Thrower.Throw throw_) {
                                Object object4;
                                object3 = object4 = Thrower.checkTag(throw_, callSite).peek();
                                DynamicScope.destroyFrame();
                            }
                        }
                        catch (Throwable throwable) {
                            DynamicScope.destroyFrame();
                            throw throwable;
                        }
                        object2 = object3;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) break block8;
                        object2 = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "information")))) break block8;
                        object2 = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "ds_file_unchanged")))) break block8;
                        object = object2;
                        if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "warning")))) break block9;
                        break block10;
                    }
                    Object c1 = object2;
                    ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)c1));
                    break block7;
                }
                object = object;
                if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "bad_user_bookmarks")))) {
                    throw new Error("Try block caught unexpected error.");
                }
            }
            Object c1 = object;
            ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error1()", (Object)_self, (Object)c1));
        }
        ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_3_2_0")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="e0601eb8-8fd9-42c7-9c3f-22b1dd8aef9e", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___13(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @SourceHash(value=915267821)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="175d7004-b904-4b30-a14b-de36481221fc", type=Object.class, start=23, end=159, index=0), @EnvVar(name="175d7004-b904-4b30-a14b-de36481221fc", type=Object.class, start=277, end=291, index=0)})
    public static Object deco_test__try_3_1_0(Object _self) {
        block7: {
            Object object;
            block9: {
                block8: {
                    Object object2;
                    Object[] __env__ = new Object[1];
                    ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
                    EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
                    EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
                    DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
                    CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
                    DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
                    try {
                        try {
                            DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                            try {
                                Object[] objectArray = new Object[]{__env__[0]};
                                CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4249.class, "proc___14", "", 3, 3, 0, 0, (Object[])objectArray);
                                ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "information"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "ds_file_unchanged"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "warning"), callSite2);
                                ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try()", (Object)_self));
                                DynamicScope.destroyFrame();
                                DynamicScope.destroyFrame();
                                break block7;
                            }
                            catch (Throwable throwable) {
                                DynamicScope.destroyFrame();
                                throw throwable;
                            }
                        }
                        catch (Thrower.Throw throw_) {
                            Object object3;
                            object2 = object3 = Thrower.checkTag(throw_, callSite).peek();
                            DynamicScope.destroyFrame();
                        }
                    }
                    catch (Throwable throwable) {
                        DynamicScope.destroyFrame();
                        throw throwable;
                    }
                    object = object2;
                    if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) break block8;
                    object = object;
                    if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "information")))) break block8;
                    object = object;
                    if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "ds_file_unchanged")))) break block8;
                    if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "warning")))) {
                        throw new Error("Try block caught unexpected error.");
                    }
                    break block9;
                }
                Object c1 = object;
                ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)c1));
                break block7;
            }
            Object c1 = object;
            ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error1()", (Object)_self, (Object)c1));
        }
        ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_3_1_0")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="175d7004-b904-4b30-a14b-de36481221fc", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___14(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

    @SourceHash(value=1605919938)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="a41cf3ef-1b59-4bbd-a3dc-49ff4809ba97", type=Object.class, start=23, end=152, index=0), @EnvVar(name="a41cf3ef-1b59-4bbd-a3dc-49ff4809ba97", type=Object.class, start=233, end=247, index=0)})
    public static Object deco_test__try_3_0_0(Object _self) {
        block10: {
            Object object;
            Object[] __env__ = new Object[1];
            ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("before()", (Object)_self));
            EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
            EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
            DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
            CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
            DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
            try {
                try {
                    DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                    try {
                        Object[] objectArray = new Object[]{__env__[0]};
                        CallSite callSite2 = ConstantBuilder.procBootstrap("proc", (Class<?>)deco_test_4249.class, "proc___15", "", 3, 3, 0, 0, (Object[])objectArray);
                        ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "information"), callSite2, ConstantBuilder.symbolBootstrap("symbol", "ds_file_unchanged"), callSite2);
                        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("try()", (Object)_self));
                        DynamicScope.destroyFrame();
                        DynamicScope.destroyFrame();
                        break block10;
                    }
                    catch (Throwable throwable) {
                        DynamicScope.destroyFrame();
                        throw throwable;
                    }
                }
                catch (Thrower.Throw throw_) {
                    Object object2;
                    object = object2 = Thrower.checkTag(throw_, callSite).peek();
                    DynamicScope.destroyFrame();
                }
            }
            catch (Throwable throwable) {
                DynamicScope.destroyFrame();
                throw throwable;
            }
            Object object3 = object;
            if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) {
                object3 = object3;
                if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "information")))) {
                    object3 = object3;
                    if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object3, (Object)ConstantBuilder.symbolBootstrap("symbol", "ds_file_unchanged")))) {
                        throw new Error("Try block caught unexpected error.");
                    }
                }
            }
            Object c1 = object3;
            ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("error()", (Object)_self, (Object)c1));
        }
        ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("after()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="deco_test__try_3_0_0")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="a41cf3ef-1b59-4bbd-a3dc-49ff4809ba97", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___15(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }
}

/*
 * Decompiled with CFR 0.151-SNAPSHOT (${git.commit.id.abbrev}).
 */
package magik.jar_decompiler_lp.decompile_target;

import com.gesmallworld.magik.commons.runtime.annotations.CodeType;
import com.gesmallworld.magik.commons.runtime.annotations.Debugger;
import com.gesmallworld.magik.language.invokers.ConstantBuilder;
import com.gesmallworld.magik.language.invokers.DynamicAccessor;
import com.gesmallworld.magik.language.invokers.GlobalAccessor;
import com.gesmallworld.magik.language.invokers.ProcInvoker;
import com.gesmallworld.magik.language.invokers.TupleBuilder;
import com.gesmallworld.magik.language.invokers.VectorBuilder;
import com.gesmallworld.magik.language.utils.ExecutableMagik;
import com.gesmallworld.magik.language.utils.MagikObjectUtils;
import magik.jar_decompiler_lp.decompile_target.deco_test_4249;

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_4248
implements ExecutableMagik {
    @Debugger(value="MagikDebug")
    @CodeType(value="EmptyConstructor")
    public deco_test_4248() {
    }

    @Override
    @Debugger(value="MagikDebug")
    @CodeType(value="TopLevel")
    public Object execute() {
        DynamicAccessor.bootstrapStorer("!source_file!", "sw", (Object)ConstantBuilder.stringBootstrap("string", "C:\\Users\\frnkv\\source\\repos\\sw-jar-decompiler\\decompile_target\\source\\deco_test.magik"));
        DynamicAccessor.bootstrapStorer("!current_package!", "sw", (Object)ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "package"), ConstantBuilder.stringBootstrap("string", "user")));
        ProcInvoker.naturalBootstrap("()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "remex"), (Object)ConstantBuilder.symbolBootstrap("symbol", "deco_test"));
        ProcInvoker.naturalBootstrap("()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "def_slotted_exemplar"), (Object)ConstantBuilder.symbolBootstrap("symbol", "deco_test"), (Object)VectorBuilder.EMPTY_VECTOR, (Object)ConstantBuilder.symbolBootstrap("symbol", "model"));
        //MagikObjectUtils.createMethod("deco_test", "try_1_1_1()", deco_test_4249.class, "deco_test__try_1_1_1", 1, 1);
        //MagikObjectUtils.createMethod("deco_test", "try_1_1_0()", deco_test_4249.class, "deco_test__try_1_1_0", 1, 1);
        //MagikObjectUtils.createMethod("deco_test", "try_1_0_0()", deco_test_4249.class, "deco_test__try_1_0_0", 1, 1);
        //MagikObjectUtils.createMethod("deco_test", "try_2_2_2()", deco_test_4249.class, "deco_test__try_2_2_2", 1, 1);
        //MagikObjectUtils.createMethod("deco_test", "try_2_2_1()", deco_test_4249.class, "deco_test__try_2_2_1", 1, 1);
        ///MagikObjectUtils.createMethod("deco_test", "try_2_2_0()", deco_test_4249.class, "deco_test__try_2_2_0", 1, 1);
        //MagikObjectUtils.createMethod("deco_test", "try_2_1_0()", deco_test_4249.class, "deco_test__try_2_1_0", 1, 1);
        //MagikObjectUtils.createMethod("deco_test", "try_2_0_0()", deco_test_4249.class, "deco_test__try_2_0_0", 1, 1);
        //MagikObjectUtils.createMethod("deco_test", "try_3_3_3()", deco_test_4249.class, "deco_test__try_3_3_3", 1, 1);
        //MagikObjectUtils.createMethod("deco_test", "try_3_3_2()", deco_test_4249.class, "deco_test__try_3_3_2", 1, 1);
        MagikObjectUtils.createMethod("deco_test", "try_3_3_1()", deco_test_4249.class, "deco_test__try_3_3_1", 1, 1);
        //MagikObjectUtils.createMethod("deco_test", "try_3_3_0()", deco_test_4249.class, "deco_test__try_3_3_0", 1, 1);
        //MagikObjectUtils.createMethod("deco_test", "try_3_2_0()", deco_test_4249.class, "deco_test__try_3_2_0", 1, 1);
        //MagikObjectUtils.createMethod("deco_test", "try_3_1_0()", deco_test_4249.class, "deco_test__try_3_1_0", 1, 1);
        //return TupleBuilder.bootstrap("tb", MagikObjectUtils.createMethod("deco_test", "try_3_0_0()", deco_test_4249.class, "deco_test__try_3_0_0", 1, 1));
    }

    @Override
    public void preload() {
    }
}
###########
###########