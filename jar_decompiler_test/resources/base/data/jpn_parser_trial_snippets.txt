## jpn_method_test_if
package magik.sw_core.ace_components;

import com.gesmallworld.magik.commons.runtime.annotations.CodeType;
import com.gesmallworld.magik.commons.runtime.annotations.Debugger;
import com.gesmallworld.magik.language.ResultTuple;
import com.gesmallworld.magik.language.invokers.ConstantBuilder;
import com.gesmallworld.magik.language.invokers.DynamicAccessor;
import com.gesmallworld.magik.language.invokers.GlobalAccessor;
import com.gesmallworld.magik.language.invokers.Invoker;
import com.gesmallworld.magik.language.invokers.ProcInvoker;
import com.gesmallworld.magik.language.invokers.VectorBuilder;
import com.gesmallworld.magik.language.utils.ExecutableMagik;

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class conditions_25
implements ExecutableMagik {
    @Debugger(value="MagikDebug")
    @CodeType(value="EmptyConstructor")
    public conditions_25() {
    }

    @Override
    @Debugger(value="MagikDebug")
    @CodeType(value="TopLevel")
    public Object execute() {
        DynamicAccessor.bootstrapStorer("!source_file!", "sw", (Object)ConstantBuilder.stringBootstrap("string", "/projects/hg/corerepo/sw_core/modules/sw_core/ace_components/source/conditions.magik"));
        DynamicAccessor.bootstrapStorer("!current_package!", "sw", (Object)ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "package"), ConstantBuilder.stringBootstrap("string", "sw")));
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_condition()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "condition"), (Object)ConstantBuilder.symbolBootstrap("symbol", "dbx_geometry_draw_failed"), (Object)ConstantBuilder.symbolBootstrap("symbol", "warning"), (Object)VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "geom"), ConstantBuilder.symbolBootstrap("symbol", "error_condition")), (Object)ConstantBuilder.stringBootstrap("string", "drawing #1 failed: #2")));
        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_condition()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "condition"), (Object)ConstantBuilder.symbolBootstrap("symbol", "dbx_ace_name_unset"), (Object)ConstantBuilder.symbolBootstrap("symbol", "error"), (Object)VectorBuilder.EMPTY_VECTOR, (Object)ConstantBuilder.stringBootstrap("string", "database_context_component: the ACE name property has not been set")));
        return (ResultTuple)((Object)Invoker.tupleBootstrap("define_condition()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "condition"), (Object)ConstantBuilder.symbolBootstrap("symbol", "dbx_no_such_ace"), (Object)ConstantBuilder.symbolBootstrap("symbol", "error"), (Object)VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "ace_name")), (Object)ConstantBuilder.stringBootstrap("string", "database_context_component: no such ACE: '#1'")));
    }

    @Override
    public void preload() {
    }
}

/*
 * Decompiled with CFR 0.151-SNAPSHOT (${git.commit.id.abbrev}).
 */
package magik.sw_core.ace_components;

import com.gesmallworld.magik.commons.runtime.annotations.CodeType;
import com.gesmallworld.magik.commons.runtime.annotations.Debugger;
import com.gesmallworld.magik.commons.runtime.annotations.EnvVar;
import com.gesmallworld.magik.commons.runtime.annotations.EnvVars;
import com.gesmallworld.magik.commons.runtime.annotations.Parent;
import com.gesmallworld.magik.language.DynamicScope;
import com.gesmallworld.magik.language.InterruptInfrastructure;
import com.gesmallworld.magik.language.ResultTuple;
import com.gesmallworld.magik.language.SourceHash;
import com.gesmallworld.magik.language.Thrower;
import com.gesmallworld.magik.language.invokers.BinaryDispatcher;
import com.gesmallworld.magik.language.invokers.ConstantBuilder;
import com.gesmallworld.magik.language.invokers.DynamicAccessor;
import com.gesmallworld.magik.language.invokers.EnvAccessor;
import com.gesmallworld.magik.language.invokers.GlobalAccessor;
import com.gesmallworld.magik.language.invokers.Invoker;
import com.gesmallworld.magik.language.invokers.LoopBodyInvoker;
import com.gesmallworld.magik.language.invokers.ProcInvoker;
import com.gesmallworld.magik.language.invokers.TupleBuilder;
import com.gesmallworld.magik.language.invokers.VectorBuilder;
import com.gesmallworld.magik.language.utils.MagikObjectUtils;
import java.lang.invoke.CallSite;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.lang.invoke.MethodType;

/*
 * Illegal identifiers - consider using --renameillegalidents true
 */
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class database_context_component_223 {
    @SourceHash(value=-1677045390)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__ace_control_(Object _self) {
        block2: {
            CallSite a_soc = null;
            if (Invoker.bootstrapPrivate("$slot_get_ace_control()", (Object)_self) != null) break block2;
            boolean bl = MagikObjectUtils.isnt(Invoker.bootstrapPrivate("ace_name", (Object)_self), null);
            Boolean bl2 = new Boolean(bl);
            if (bl) {
                a_soc = Invoker.bootstrapPrivate("spatial_object_controller", (Object)_self);
                bl2 = new Boolean(MagikObjectUtils.isnt(a_soc, null));
            }
            if (MagikObjectUtils.should_be_boolean(bl2)) {
                ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("$slot_set_ace()", (Object)_self, (Object)Invoker.bootstrap("ace()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "gis_program_manager"), Invoker.bootstrapPrivate("ace_name", (Object)_self))));
                ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("$slot_set_ace_control()", (Object)_self, (Object)Invoker.bootstrap("new()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "ace_control"), Invoker.bootstrapPrivate("$slot_get_ace()", (Object)_self), a_soc)));
            }
        }
        return (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("$slot_get_ace_control()", (Object)_self));
    }

    @SourceHash(value=-1992626781)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__ace_(Object _self) {
        block1: {
            if (Invoker.bootstrapPrivate("$slot_get_ace()", (Object)_self) != null) break block1;
            CallSite ac = Invoker.bootstrap("ace()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "gis_program_manager"), Invoker.bootstrapPrivate("ace_name", (Object)_self));
            if (ac == null) {
                ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrap("raise()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "condition"), (Object)ConstantBuilder.symbolBootstrap("symbol", "dbx_no_such_ace"), (Object)ConstantBuilder.symbolBootstrap("symbol", "ace_name"), (Object)Invoker.bootstrapPrivate("ace_name", (Object)_self)));
            }
            ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("$slot_set_ace()", (Object)_self, (Object)ac));
        }
        return (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("$slot_get_ace()", (Object)_self));
    }

    @SourceHash(value=1572934367)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__spatial_object_controller_(Object _self) {
        block8: {
            CallSite a_world = null;
            if (Invoker.bootstrapPrivate("$slot_get_soc()", (Object)_self) != null) break block8;
            boolean bl = MagikObjectUtils.isnt(Invoker.bootstrapPrivate("soc_name", (Object)_self), null);
            Object object = new Boolean(bl);
            if (bl) {
                object = BinaryDispatcher.bootstrap("~=", Invoker.bootstrapPrivate("soc_name", (Object)_self), ConstantBuilder.stringBootstrap("string", ""));
            }
            if (MagikObjectUtils.should_be_boolean(object)) {
                CallSite soc_name = Invoker.bootstrap("as_symbol()", Invoker.bootstrapPrivate("soc_name", (Object)_self));
                ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("$slot_set_soc()", (Object)_self, (Object)Invoker.bootstrap("spatial_object_controller()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "gis_program_manager"), soc_name)));
                if (Invoker.bootstrapPrivate("$slot_get_soc()", (Object)_self) == null) {
                    ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrap("open_datasets()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "gis_program_manager"), (Object)soc_name));
                    ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("$slot_set_soc()", (Object)_self, (Object)Invoker.bootstrap("spatial_object_controller()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "gis_program_manager"), soc_name)));
                }
            } else {
                CallSite app_soc = Invoker.superBootstrap("spatial_object_controller", "sw_component", "sw", (Object)_self);
                if (app_soc != null) {
                    ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("$slot_set_soc()", (Object)_self, (Object)Invoker.bootstrap("replicate()", app_soc)));
                }
            }
            if (Invoker.bootstrapPrivate("$slot_get_soc()", (Object)_self) != null) {
                ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrap("add_dependent()", (Object)Invoker.bootstrapPrivate("$slot_get_soc()", (Object)_self), (Object)_self, (Object)ConstantBuilder.symbolBootstrap("symbol", "view")));
                CallSite dsm = Invoker.bootstrap("main_dataset_manager", Invoker.bootstrapPrivate("$slot_get_soc()", (Object)_self));
                boolean bl2 = MagikObjectUtils.isnt(dsm, null);
                Boolean bl3 = new Boolean(bl2);
                if (bl2) {
                    a_world = Invoker.bootstrap("world", dsm);
                    bl3 = new Boolean(MagikObjectUtils.isnt(a_world, null));
                }
                if (MagikObjectUtils.should_be_boolean(bl3)) {
                    ResultTuple cfr_ignored_5 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("select_coordinate_system()", (Object)_self, (Object)Invoker.bootstrap("coordinate_system", a_world)));
                }
            }
        }
        return (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("$slot_get_soc()", (Object)_self));
    }

    @SourceHash(value=1178755037)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__select_world_by_name(Object _self, Object universe_name, Object world_name, Object ... dataset_names) {
        CallSite my_soc = Invoker.bootstrapPrivate("spatial_object_controller", (Object)_self);
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrap("select_world_by_name()", (Object)my_soc, (Object)universe_name, (Object)world_name, (Object[])((Object[])Invoker.bootstrapPrivate("for_scatter()", (Object)dataset_names))));
        CallSite callSite = Invoker.bootstrap("coordinate_system", Invoker.bootstrap("current_world()", my_soc));
        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("coordinate_system\\l\\l", (Object)_self, (Object)callSite));
        ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("changed()", (Object)_self, (Object)ConstantBuilder.symbolBootstrap("symbol", "world_changed"), (Object)world_name, (Object)universe_name));
        ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("generate_event()", (Object)_self, (Object)ConstantBuilder.symbolBootstrap("symbol", "world_changed"), (Object)world_name, (Object)universe_name));
        return ResultTuple.EMPTY_TUPLE;
    }

    @SourceHash(value=364081033)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__select_world(Object _self, Object a_world, Object object) {
        Boolean bl = new Boolean(MagikObjectUtils.is(object, Boolean.FALSE));
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrap("select_world()", (Object)Invoker.bootstrapPrivate("spatial_object_controller", (Object)_self), (Object)a_world, (Object)bl));
        CallSite callSite = Invoker.bootstrap("coordinate_system", a_world);
        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("coordinate_system\\l\\l", (Object)_self, (Object)callSite));
        return ResultTuple.EMPTY_TUPLE;
    }

    @SourceHash(value=633385022)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__get_world(Object _self, Object dataset_name, Object universe_name, Object world_name) {
        boolean bl = MagikObjectUtils.is(universe_name, null);
        Object object = new Boolean(bl);
        if (!bl) {
            object = BinaryDispatcher.bootstrap("=", universe_name, ConstantBuilder.stringBootstrap("string", ""));
        }
        Object universe_id = MagikObjectUtils.should_be_boolean(object) ? Integer.valueOf(0) : universe_name;
        boolean bl2 = MagikObjectUtils.is(world_name, null);
        Object object2 = new Boolean(bl2);
        if (!bl2) {
            object2 = BinaryDispatcher.bootstrap("=", world_name, ConstantBuilder.stringBootstrap("string", ""));
        }
        Object world_id = MagikObjectUtils.should_be_boolean(object2) ? Integer.valueOf(0) : world_name;
        return (ResultTuple)((Object)Invoker.tupleBootstrap("world()", (Object)Invoker.bootstrapPrivate("spatial_object_controller", (Object)_self), (Object)dataset_name, (Object)universe_id, (Object)world_id));
    }

    @SourceHash(value=1121926953)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__current_world(Object _self) {
        return (ResultTuple)((Object)Invoker.tupleBootstrap("current_world()", (Object)Invoker.bootstrapPrivate("spatial_object_controller", (Object)_self)));
    }

    @SourceHash(value=-959048248)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__register_dynamic_spatial_object_data(Object _self, Object sods, Object parent_sod) {
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrap("register_dynamic_spatial_object_data()", (Object)Invoker.bootstrapPrivate("ace_control", (Object)_self), (Object)sods, (Object)parent_sod));
        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("generate_event()", (Object)_self, (Object)ConstantBuilder.symbolBootstrap("symbol", "spatial_objects_added"), (Object)sods, (Object)parent_sod));
        return ResultTuple.EMPTY_TUPLE;
    }

    @SourceHash(value=-1516004959)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__unregister_dynamic_spatial_object_data(Object _self, Object sods) {
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrap("unregister_dynamic_spatial_object_data()", (Object)Invoker.bootstrapPrivate("ace_control", (Object)_self), (Object)sods));
        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("generate_event()", (Object)_self, (Object)ConstantBuilder.symbolBootstrap("symbol", "spatial_objects_removed"), (Object)sods));
        return ResultTuple.EMPTY_TUPLE;
    }

    @SourceHash(value=-43072522)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__used_bounds_(Object _self) {
        return (ResultTuple)((Object)Invoker.tupleBootstrap("used_bounds", (Object)Invoker.bootstrapPrivate("spatial_object_controller", (Object)_self)));
    }

    @SourceHash(value=-56142239)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__set_visibility(Object _self, Object spatial_object_descriptors, Object object, Object display_scale_names) {
        boolean bl = MagikObjectUtils.is(display_scale_names, null);
        Object object2 = new Boolean(bl);
        if (!bl) {
            object2 = BinaryDispatcher.bootstrap("=", Invoker.bootstrap("size", display_scale_names), Integer.valueOf(0));
        }
        if (MagikObjectUtils.should_be_boolean(object2)) {
            display_scale_names = VectorBuilder.bootstrap("vb", Invoker.bootstrapPrivate("display_scale_name", (Object)_self));
        }
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrap("set_visibility_for_display_scales()", (Object)Invoker.bootstrapPrivate("ace_control", (Object)_self), (Object)spatial_object_descriptors, (Object)object, (Object[])((Object[])Invoker.bootstrapPrivate("for_scatter()", (Object)display_scale_names))));
        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("generate_event()", (Object)_self, (Object)ConstantBuilder.symbolBootstrap("symbol", "visibility_changed")));
        return ResultTuple.EMPTY_TUPLE;
    }

    @SourceHash(value=-1048298541)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__set_visibility_override(Object _self, Object spatial_object_descriptors, Object object, Object priority) {
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrap("set_visibility_override()", (Object)Invoker.bootstrapPrivate("ace_control", (Object)_self), (Object)spatial_object_descriptors, (Object)object, (Object)priority));
        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("generate_event()", (Object)_self, (Object)ConstantBuilder.symbolBootstrap("symbol", "visibility_changed")));
        return ResultTuple.EMPTY_TUPLE;
    }

    @SourceHash(value=-500889538)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__remove_visibility_override(Object _self, Object spatial_object_descriptors, Object object, Object priority) {
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrap("set_visibility_override()", (Object)Invoker.bootstrapPrivate("ace_control", (Object)_self), (Object)spatial_object_descriptors, (Object)ConstantBuilder.maybeBootstrap("_maybe")));
        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("generate_event()", (Object)_self, (Object)ConstantBuilder.symbolBootstrap("symbol", "visibility_changed")));
        return ResultTuple.EMPTY_TUPLE;
    }

    @SourceHash(value=-371451400)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__set_selectability(Object _self, Object spatial_object_descriptors, Object object, Object display_scale_names) {
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrap("set_selectability_for_display_scales()", (Object)Invoker.bootstrapPrivate("ace_control", (Object)_self), (Object)spatial_object_descriptors, (Object)object, (Object[])((Object[])Invoker.bootstrapPrivate("for_scatter()", (Object)display_scale_names))));
        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("generate_event()", (Object)_self, (Object)ConstantBuilder.symbolBootstrap("symbol", "visibility_changed")));
        return ResultTuple.EMPTY_TUPLE;
    }

    @SourceHash(value=1664846949)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__set_hittability(Object _self, Object spatial_object_descriptors, Object object, Object display_scale_names) {
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrap("set_hittability_for_display_scales()", (Object)Invoker.bootstrapPrivate("ace_control", (Object)_self), (Object)spatial_object_descriptors, (Object)object, (Object[])((Object[])Invoker.bootstrapPrivate("for_scatter()", (Object)display_scale_names))));
        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("generate_event()", (Object)_self, (Object)ConstantBuilder.symbolBootstrap("symbol", "visibility_changed")));
        return ResultTuple.EMPTY_TUPLE;
    }

    @SourceHash(value=-1943812631)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__get_rwo_status_for(Object _self, Object display_scale_name) {
        block1: {
            boolean bl = MagikObjectUtils.is(display_scale_name, null);
            Object object = new Boolean(bl);
            if (!bl) {
                object = BinaryDispatcher.bootstrap("=", display_scale_name, ConstantBuilder.stringBootstrap("string", ""));
            }
            if (!MagikObjectUtils.should_be_boolean(object)) break block1;
            display_scale_name = Invoker.bootstrapPrivate("display_scale_name", (Object)_self);
        }
        return (ResultTuple)((Object)Invoker.tupleBootstrap("rwo_status_for()", (Object)Invoker.bootstrapPrivate("ace_control", (Object)_self), (Object)display_scale_name));
    }

    @SourceHash(value=492897009)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__set_priority(Object _self, Object spatial_object_descriptors, Object priority, Object display_scale_names) {
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrap("set_priority_for_display_scales()", (Object)Invoker.bootstrapPrivate("ace_control", (Object)_self), (Object)spatial_object_descriptors, (Object)priority, (Object[])((Object[])Invoker.bootstrapPrivate("for_scatter()", (Object)display_scale_names))));
        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("generate_event()", (Object)_self, (Object)ConstantBuilder.symbolBootstrap("symbol", "visibility_changed")));
        return ResultTuple.EMPTY_TUPLE;
    }

    @SourceHash(value=1288376889)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__change_priority(Object _self, Object spatial_object_descriptors, Object priority_change, Object display_scale_names) {
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrap("change_priority_for_display_scales()", (Object)Invoker.bootstrapPrivate("ace_control", (Object)_self), (Object)spatial_object_descriptors, (Object)priority_change, (Object[])((Object[])Invoker.bootstrapPrivate("for_scatter()", (Object)display_scale_names))));
        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("generate_event()", (Object)_self, (Object)ConstantBuilder.symbolBootstrap("symbol", "visibility_changed")));
        return ResultTuple.EMPTY_TUPLE;
    }

    @SourceHash(value=1431027742)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__set_display_scale_for_viewing_scale(Object _self, Object viewing_scale) {
        CallSite callSite = Invoker.bootstrap("display_scale_for()", Invoker.bootstrapPrivate("ace_control", (Object)_self), viewing_scale);
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("display_scale\\l\\l", (Object)_self, (Object)callSite));
        return ResultTuple.EMPTY_TUPLE;
    }

    @SourceHash(value=2139575455)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__display_scale_name\l\l_(Object _self, Object display_scale_name) {
        CallSite callSite = Invoker.bootstrap("display_scale()", Invoker.bootstrapPrivate("ace", (Object)_self), display_scale_name);
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("display_scale\\l\\l", (Object)_self, (Object)callSite));
        return ResultTuple.EMPTY_TUPLE;
    }

    @SourceHash(value=-425875381)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__display_scale_name_(Object _self) {
        return (ResultTuple)((Object)Invoker.tupleBootstrap("write_string", (Object)Invoker.bootstrap("name", Invoker.bootstrapPrivate("display_scale", (Object)_self))));
    }

    @SourceHash(value=1752336952)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__display_scale_(Object _self) {
        CallSite ds = Invoker.bootstrapPrivate("property()", (Object)_self, (Object)ConstantBuilder.symbolBootstrap("symbol", "display_scale"));
        return ds != null ? ds : (ResultTuple)((Object)Invoker.tupleBootstrap("display_scale()", (Object)Invoker.bootstrapPrivate("ace_control", (Object)_self), (Object)ConstantBuilder.symbolBootstrap("symbol", "auto")));
    }

    @SourceHash(value=366678514)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__display_scale\l\l_(Object _self, Object a_display_scale) {
        if (a_display_scale == null) {
            return ResultTuple.EMPTY_TUPLE;
        }
        CallSite scale_name = Invoker.bootstrap("write_string", Invoker.bootstrap("scale_id", a_display_scale));
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("set_property()", (Object)_self, (Object)ConstantBuilder.symbolBootstrap("symbol", "display_scale_name"), (Object)scale_name));
        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("set_property()", (Object)_self, (Object)ConstantBuilder.symbolBootstrap("symbol", "display_scale"), (Object)a_display_scale));
        ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("generate_event()", (Object)_self, (Object)ConstantBuilder.symbolBootstrap("symbol", "display_scale_changed"), (Object)scale_name));
        return ResultTuple.EMPTY_TUPLE;
    }

    @SourceHash(value=772386770)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__display_scale_names_(Object _self) {
        return (ResultTuple)((Object)Invoker.tupleBootstrap("scale_label_list", (Object)Invoker.bootstrapPrivate("ace_control", (Object)_self)));
    }

    @SourceHash(value=-697932370)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__display_scale_names\l\l_(Object _self, Object names) {
        return ResultTuple.EMPTY_TUPLE;
    }

    @SourceHash(value=486224048)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__objects_contained_stream(Object _self, Object x1, Object y1, Object x2, Object y2) {
        CallSite interest_box = Invoker.bootstrap("new()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "bounding_box"), x1, y1, x2, y2);
        CallSite str = Invoker.bootstrap("new()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "elements_stream"), Invoker.bootstrapPrivate("spatial_object_controller", (Object)_self), ConstantBuilder.symbolBootstrap("symbol", "all_objects_contained()"), Invoker.bootstrapPrivate("ace_control", (Object)_self), Invoker.bootstrapPrivate("display_scale", (Object)_self), interest_box);
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrap("return_at_eof()", (Object)str, null));
        return str;
    }

    @SourceHash(value=684630540)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__objects_overlapping_stream(Object _self, Object x1, Object y1, Object x2, Object y2) {
        return (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("objects_interacting_stream()", (Object)_self, (Object)x1, (Object)y1, (Object)x2, (Object)y2));
    }

    @SourceHash(value=351107451)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="__dynamic_frame__", type=Object.class, start=33, end=69, index=0), @EnvVar(name="__loopenv__", type=Object.class, start=24, end=70, index=2), @EnvVar(name="__loopbody__", type=Object.class, start=15, end=70, index=1)})
    public static Object database_context_component__all_objects_overlapping(MethodHandle __loopbody__, Object[] __loopenv__, Object _self, Object x1, Object y1, Object x2, Object y2) {
        Object[] __env__ = new Object[3];
        EnvAccessor.bootstrapReseter("resetEnv", (Object)__loopbody__, (Object[])__env__, (int)1);
        EnvAccessor.bootstrapReseter("resetEnv", (Object)__loopenv__, (Object[])__env__, (int)2);
        EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
        EnvAccessor.bootstrapStorer("storeEnv", (Object)DynamicScope.getFrame(), (Object[])__env__, (int)0);
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("all_objects_interacting_with()", (MethodHandle)cfr_ldc_0(), (Object[])__env__, (Object)_self, (Object)x1, (Object)y1, (Object)x2, (Object)y2));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="database_context_component__all_objects_overlapping")
    @Debugger(value="MagikDebug")
    @CodeType(value="LoopBody")
    public static Object __loopbody_(Object[] __env__, Object a_geom) {
        ResultTuple resultTuple;
        DynamicScope __iterator_frame__ = DynamicScope.interjectFrame((DynamicScope)((Object)EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0)));
        try {
            LoopBodyInvoker.naturalBootstrap("_loopbody", (MethodHandle)((MethodHandle)((Object)EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)1))), (Object[])((Object[])EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)2)), (Object)a_geom);
            resultTuple = ResultTuple.EMPTY_TUPLE;
        }
        catch (Throwable throwable) {
            DynamicScope.interjectFrame(__iterator_frame__);
            throw throwable;
        }
        DynamicScope.interjectFrame(__iterator_frame__);
        return resultTuple;
    }

    @SourceHash(value=-117618641)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="__dynamic_frame__", type=Object.class, start=33, end=100, index=0), @EnvVar(name="__loopbody__", type=Object.class, start=15, end=101, index=1), @EnvVar(name="__loopenv__", type=Object.class, start=24, end=101, index=2)})
    public static Object database_context_component__all_objects_contained(MethodHandle __loopbody__, Object[] __loopenv__, Object _self, Object x1, Object y1, Object x2, Object y2) {
        Object[] __env__ = new Object[3];
        EnvAccessor.bootstrapReseter("resetEnv", (Object)__loopbody__, (Object[])__env__, (int)1);
        EnvAccessor.bootstrapReseter("resetEnv", (Object)__loopenv__, (Object[])__env__, (int)2);
        EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
        CallSite interest_box = Invoker.bootstrap("new()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "bounding_box"), x1, y1, x2, y2);
        EnvAccessor.bootstrapStorer("storeEnv", (Object)DynamicScope.getFrame(), (Object[])__env__, (int)0);
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrap("all_objects_contained()", (MethodHandle)cfr_ldc_1(), (Object[])__env__, (Object)Invoker.bootstrapPrivate("spatial_object_controller", (Object)_self), (Object)Invoker.bootstrapPrivate("ace_control", (Object)_self), (Object)Invoker.bootstrapPrivate("display_scale", (Object)_self), (Object)interest_box));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="database_context_component__all_objects_contained")
    @Debugger(value="MagikDebug")
    @CodeType(value="LoopBody")
    public static Object __loopbody_2(Object[] __env__, Object a_geom) {
        ResultTuple resultTuple;
        DynamicScope __iterator_frame__ = DynamicScope.interjectFrame((DynamicScope)((Object)EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0)));
        try {
            LoopBodyInvoker.naturalBootstrap("_loopbody", (MethodHandle)((MethodHandle)((Object)EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)1))), (Object[])((Object[])EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)2)), (Object)a_geom);
            resultTuple = ResultTuple.EMPTY_TUPLE;
        }
        catch (Throwable throwable) {
            DynamicScope.interjectFrame(__iterator_frame__);
            throw throwable;
        }
        DynamicScope.interjectFrame(__iterator_frame__);
        return resultTuple;
    }

    @SourceHash(value=-1804242250)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__objects_contained(Object _self, Object x1, Object y1, Object x2, Object y2, Object max_num) {
        CallSite interest_box = Invoker.bootstrap("new()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "bounding_box"), x1, y1, x2, y2);
        ResultTuple resultTuple = (ResultTuple)((Object)Invoker.tupleBootstrap("objects_contained()", (Object)Invoker.bootstrapPrivate("spatial_object_controller", (Object)_self), (Object)Invoker.bootstrapPrivate("ace_control", (Object)_self), (Object)Invoker.bootstrapPrivate("display_scale", (Object)_self), (Object)interest_box, (Object)max_num));
        Object geoms = resultTuple.pop();
        Boolean bl = new Boolean(MagikObjectUtils.is(resultTuple.pop(), ConstantBuilder.maybeBootstrap("_maybe")));
        return VectorBuilder.bootstrap("vb", geoms, bl);
    }

    @SourceHash(value=-1174698923)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__objects_overlapping(Object _self, Object x1, Object y1, Object x2, Object y2, Object max_num) {
        return (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("objects_interacting_with()", (Object)_self, (Object)x1, (Object)y1, (Object)x2, (Object)y2, (Object)max_num));
    }

    @SourceHash(value=34697903)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__hit_type_vector(Object _self, Object hit_type_integer) {
        CallSite rvalue;
        block11: {
            block10: {
                Invoker.bootstrap("new()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "integer_vector"), Integer.valueOf(11));
                if (!MagikObjectUtils.should_be_boolean(BinaryDispatcher.bootstrap("=", hit_type_integer, Invoker.bootstrap("\\b]", Invoker.bootstrapPrivate("hit_types", (Object)_self), ConstantBuilder.symbolBootstrap("symbol", "all"))))) break block10;
                rvalue = Invoker.bootstrap("new_with()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "integer_vector"), Integer.valueOf(1), Integer.valueOf(1), Integer.valueOf(1), Integer.valueOf(1), Integer.valueOf(1), Integer.valueOf(1), Integer.valueOf(1), Integer.valueOf(1), Integer.valueOf(1), Integer.valueOf(1), Integer.valueOf(1));
                break block11;
            }
            rvalue = Invoker.bootstrap("new()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "integer_vector"), Integer.valueOf(11));
            if (MagikObjectUtils.should_be_boolean(BinaryDispatcher.bootstrap("and", hit_type_integer, new Boolean(MagikObjectUtils.isnt(Invoker.bootstrap("\\b]", Invoker.bootstrapPrivate("hit_types", (Object)_self), ConstantBuilder.symbolBootstrap("symbol", "near")), 0))))) {
                Integer n = 1;
                ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrap("\\b]\\l\\l", (Object)rvalue, (Object)n, (Object)1));
            }
            if (MagikObjectUtils.should_be_boolean(BinaryDispatcher.bootstrap("and", hit_type_integer, new Boolean(MagikObjectUtils.isnt(Invoker.bootstrap("\\b]", Invoker.bootstrapPrivate("hit_types", (Object)_self), ConstantBuilder.symbolBootstrap("symbol", "con")), 0))))) {
                Integer n = 1;
                ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrap("\\b]\\l\\l", (Object)rvalue, (Object)n, (Object)2));
            }
            if (MagikObjectUtils.should_be_boolean(BinaryDispatcher.bootstrap("and", hit_type_integer, new Boolean(MagikObjectUtils.isnt(Invoker.bootstrap("\\b]", Invoker.bootstrapPrivate("hit_types", (Object)_self), ConstantBuilder.symbolBootstrap("symbol", "centre")), 0))))) {
                Integer n = 1;
                ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrap("\\b]\\l\\l", (Object)rvalue, (Object)n, (Object)3));
            }
            if (MagikObjectUtils.should_be_boolean(BinaryDispatcher.bootstrap("and", hit_type_integer, new Boolean(MagikObjectUtils.isnt(Invoker.bootstrap("\\b]", Invoker.bootstrapPrivate("hit_types", (Object)_self), ConstantBuilder.symbolBootstrap("symbol", "intersection")), 0))))) {
                Integer n = 1;
                ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrap("\\b]\\l\\l", (Object)rvalue, (Object)n, (Object)4));
            }
            if (MagikObjectUtils.should_be_boolean(BinaryDispatcher.bootstrap("and", hit_type_integer, new Boolean(MagikObjectUtils.isnt(Invoker.bootstrap("\\b]", Invoker.bootstrapPrivate("hit_types", (Object)_self), ConstantBuilder.symbolBootstrap("symbol", "tangent")), 0))))) {
                Integer n = 1;
                ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrap("\\b]\\l\\l", (Object)rvalue, (Object)n, (Object)5));
            }
            if (MagikObjectUtils.should_be_boolean(BinaryDispatcher.bootstrap("and", hit_type_integer, new Boolean(MagikObjectUtils.isnt(Invoker.bootstrap("\\b]", Invoker.bootstrapPrivate("hit_types", (Object)_self), ConstantBuilder.symbolBootstrap("symbol", "perpendicular")), 0))))) {
                Integer n = 1;
                ResultTuple cfr_ignored_5 = (ResultTuple)((Object)Invoker.tupleBootstrap("\\b]\\l\\l", (Object)rvalue, (Object)n, (Object)6));
            }
            if (MagikObjectUtils.should_be_boolean(BinaryDispatcher.bootstrap("and", hit_type_integer, new Boolean(MagikObjectUtils.isnt(Invoker.bootstrap("\\b]", Invoker.bootstrapPrivate("hit_types", (Object)_self), ConstantBuilder.symbolBootstrap("symbol", "mid")), 0))))) {
                Integer n = 1;
                ResultTuple cfr_ignored_6 = (ResultTuple)((Object)Invoker.tupleBootstrap("\\b]\\l\\l", (Object)rvalue, (Object)n, (Object)7));
            }
            if (MagikObjectUtils.should_be_boolean(BinaryDispatcher.bootstrap("and", hit_type_integer, new Boolean(MagikObjectUtils.isnt(Invoker.bootstrap("\\b]", Invoker.bootstrapPrivate("hit_types", (Object)_self), ConstantBuilder.symbolBootstrap("symbol", "segment")), 0))))) {
                Integer n = 1;
                ResultTuple cfr_ignored_7 = (ResultTuple)((Object)Invoker.tupleBootstrap("\\b]\\l\\l", (Object)rvalue, (Object)n, (Object)8));
            }
            if (MagikObjectUtils.should_be_boolean(BinaryDispatcher.bootstrap("and", hit_type_integer, new Boolean(MagikObjectUtils.isnt(Invoker.bootstrap("\\b]", Invoker.bootstrapPrivate("hit_types", (Object)_self), ConstantBuilder.symbolBootstrap("symbol", "protractor_rel")), 0))))) {
                Integer n = 1;
                ResultTuple cfr_ignored_8 = (ResultTuple)((Object)Invoker.tupleBootstrap("\\b]\\l\\l", (Object)rvalue, (Object)n, (Object)9));
            }
            if (MagikObjectUtils.should_be_boolean(BinaryDispatcher.bootstrap("and", hit_type_integer, new Boolean(MagikObjectUtils.isnt(Invoker.bootstrap("\\b]", Invoker.bootstrapPrivate("hit_types", (Object)_self), ConstantBuilder.symbolBootstrap("symbol", "protractor_abs")), 0))))) {
                Integer n = 1;
                ResultTuple cfr_ignored_9 = (ResultTuple)((Object)Invoker.tupleBootstrap("\\b]\\l\\l", (Object)rvalue, (Object)n, (Object)10));
            }
            if (!MagikObjectUtils.should_be_boolean(BinaryDispatcher.bootstrap("and", hit_type_integer, new Boolean(MagikObjectUtils.isnt(Invoker.bootstrap("\\b]", Invoker.bootstrapPrivate("hit_types", (Object)_self), ConstantBuilder.symbolBootstrap("symbol", "grid")), 0))))) break block11;
            Integer n = 1;
            ResultTuple cfr_ignored_10 = (ResultTuple)((Object)Invoker.tupleBootstrap("\\b]\\l\\l", (Object)rvalue, (Object)n, (Object)11));
        }
        return rvalue;
    }

    @SourceHash(value=-1416915686)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__hit_list(Object _self, Object x, Object y, Object hitrad, Object max_num, Object hit_types, Object perp_x, Object perp_y) {
        return (ResultTuple)((Object)Invoker.tupleBootstrap("hit_list()", (Object)Invoker.bootstrapPrivate("spatial_object_controller", (Object)_self), (Object)Invoker.bootstrapPrivate("ace_control", (Object)_self), (Object)Invoker.bootstrapPrivate("display_scale", (Object)_self), (Object)ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "coordinate"), x, y), (Object)hitrad, (Object)max_num, (Object)Invoker.bootstrapPrivate("hit_type_vector()", (Object)_self, (Object)hit_types), (Object)ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "coordinate"), GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "last_x"), GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "last_y"))));
    }

    @SourceHash(value=-384395299)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__collection(Object _self, Object dataset_name, Object collection_name) {
        return (ResultTuple)((Object)Invoker.tupleBootstrap("collection()", (Object)Invoker.bootstrapPrivate("spatial_object_controller", (Object)_self), (Object)dataset_name, (Object)collection_name));
    }

    @SourceHash(value=1168551646)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__commit(Object _self) {
        return (ResultTuple)((Object)Invoker.tupleBootstrap("commit()", (Object)Invoker.bootstrapPrivate("spatial_object_controller", (Object)_self)));
    }

    @SourceHash(value=-659950069)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__rollback(Object _self) {
        return (ResultTuple)((Object)Invoker.tupleBootstrap("rollback()", (Object)Invoker.bootstrapPrivate("spatial_object_controller", (Object)_self)));
    }

    @SourceHash(value=2141665789)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__rollforward(Object _self) {
        return (ResultTuple)((Object)Invoker.tupleBootstrap("rollforward()", (Object)Invoker.bootstrapPrivate("spatial_object_controller", (Object)_self)));
    }

    @SourceHash(value=28241894)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__writable?_(Object _self) {
        return (ResultTuple)((Object)Invoker.tupleBootstrap("writable?", (Object)Invoker.bootstrapPrivate("spatial_object_controller", (Object)_self)));
    }

    @SourceHash(value=1079660019)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__render_map(Object _self, Object map, Object world_bounds) {
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("render_data()", (Object)_self, (Object)map, (Object)world_bounds));
        return ResultTuple.EMPTY_TUPLE;
    }

    @SourceHash(value=249794652)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="rwo_preds", type=Object[].class, start=345, end=413, index=5), @EnvVar(name="mpd_size", type=Object[].class, start=361, end=413, index=4), @EnvVar(name="count", type=Object[].class, start=382, end=413, index=3), @EnvVar(name="__dynamic_frame__", type=Object.class, start=278, end=417, index=1), @EnvVar(name="rwo_preds", type=Object[].class, start=417, end=426, index=5), @EnvVar(name="mpd_size", type=Object[].class, start=417, end=426, index=4), @EnvVar(name="count", type=Object[].class, start=417, end=426, index=3), @EnvVar(name="rwo_preds", type=Object[].class, start=430, end=431, index=5), @EnvVar(name="mpd_size", type=Object[].class, start=430, end=431, index=4), @EnvVar(name="map", type=Object.class, start=15, end=431, index=6), @EnvVar(name="bounds", type=Object.class, start=23, end=431, index=2), @EnvVar(name="count", type=Object[].class, start=430, end=431, index=3)})
    public static Object database_context_component__render_data(Object _self, Object map, Object bounds) {
        ResultTuple resultTuple;
        Object[] __env__ = new Object[7];
        EnvAccessor.bootstrapReseter("resetEnv", (Object)map, (Object[])__env__, (int)6);
        EnvAccessor.bootstrapReseter("resetEnv", (Object)bounds, (Object[])__env__, (int)2);
        DynamicAccessor.bootstrapBinder("!current_sts!", "sw", 1);
        DynamicAccessor.bootstrapBinder("!current_database_context!", "sw", 0);
        DynamicAccessor.bootstrapBinder("!current_view!", "sw", 0);
        DynamicAccessor.bootstrapBinder("!current_drawing_application!", "sw", 0);
        DynamicAccessor.bootstrapBinder("!damage_area!", "sw", 0);
        DynamicAccessor.bootstrapBinder("!current_map_view!", "sw", 0);
        DynamicAccessor.bootstrapBinder("!current_rendering_context!", "sw", 0);
        try {
            if (EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)2) == null) {
                ResultTuple resultTuple2 = ResultTuple.EMPTY_TUPLE;
                DynamicScope.destroyFrame();
                return resultTuple2;
            }
            CallSite my_ace_control = Invoker.bootstrapPrivate("ace_control", (Object)_self);
            DynamicAccessor.bootstrapStorer("!damage_area!", "sw", (Object)EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)2));
            DynamicAccessor.bootstrapStorer("!current_map_view!", "sw", (Object)EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)6));
            DynamicAccessor.bootstrapStorer("!current_database_context!", "sw", (Object)_self);
            DynamicAccessor.bootstrapStorer("!current_rendering_context!", "sw", (Object)Invoker.bootstrap("new()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "rendering_context"), ConstantBuilder.symbolBootstrap("symbol", "geometry_set_factory"), null, ConstantBuilder.symbolBootstrap("symbol", "ace_name"), Invoker.bootstrap("name", Invoker.bootstrap("ace", my_ace_control)), ConstantBuilder.symbolBootstrap("symbol", "vhs_context"), Invoker.bootstrapPrivate("ace_control", (Object)_self), ConstantBuilder.symbolBootstrap("symbol", "world"), Invoker.bootstrapPrivate("current_world()", (Object)_self), ConstantBuilder.symbolBootstrap("symbol", "display_style_name"), Invoker.bootstrap("scale_id", Invoker.bootstrapPrivate("display_scale", (Object)_self)), ConstantBuilder.symbolBootstrap("symbol", "style_category"), DynamicAccessor.bootstrapFetcher("!current_drawing_application!", "sw"), ConstantBuilder.symbolBootstrap("symbol", "view_scale"), Invoker.bootstrap("view_scale", EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)6))));
            CallSite dsp = Invoker.bootstrapPrivate("display_scale", (Object)_self);
            CallSite multi_pass_data = Invoker.bootstrap("multi_pass_data_for()", my_ace_control, dsp);
            DynamicAccessor.bootstrapStorer("!current_sts!", "sw", (Object)Invoker.bootstrap("style_system_for()", my_ace_control, dsp, DynamicAccessor.bootstrapFetcher("!current_drawing_application!", "sw")));
            DynamicAccessor.bootstrapBinder("!evaluate_drawing_function!", "sw", 1);
            DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 0);
            EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)1);
            try {
                ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "style_warning"), ConstantBuilder.procWithEmptyEnvBootstrap("proc", (Class<?>)database_context_component_223.class, "proc___", "", 2, 2, 0, 0), ConstantBuilder.symbolBootstrap("symbol", "style_info"), ConstantBuilder.procWithEmptyEnvBootstrap("proc", (Class<?>)database_context_component_223.class, "proc___2", "", 2, 2, 0, 0));
                ResultTuple resultTuple3 = (ResultTuple)((Object)TupleBuilder.bootstrap("tb", (Object[])Invoker.bootstrapPrivate("for_scatter()", (Object)multi_pass_data)));
                EnvAccessor.bootstrapStorer("storeEnv", (Object)resultTuple3.pop(), (Object[])__env__, (int)5);
                Object mpd = resultTuple3.pop();
                EnvAccessor.bootstrapStorer("storeEnv", (Object)Invoker.bootstrap("size", mpd), (Object[])__env__, (int)4);
                DynamicAccessor.bootstrapStorer("!evaluate_drawing_function!", "sw", (Object)ConstantBuilder.symbolBootstrap("symbol", "all"));
                EnvAccessor.bootstrapStorer("storeEnv", (Object)0, (Object[])__env__, (int)3);
                EnvAccessor.bootstrapStorer("storeEnv", (Object)DynamicScope.getFrame(), (Object[])__env__, (int)1);
                ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrap("fast_elements()", (MethodHandle)cfr_ldc_2(), (Object[])__env__, (Object)mpd));
            }
            catch (Throwable throwable) {
                DynamicScope.destroyFrame();
                throw throwable;
            }
            DynamicScope.destroyFrame();
            resultTuple = ResultTuple.EMPTY_TUPLE;
        }
        catch (Throwable throwable) {
            DynamicScope.destroyFrame();
            throw throwable;
        }
        DynamicScope.destroyFrame();
        return resultTuple;
    }

    @Parent(method="database_context_component__render_data")
    @SourceHash(value=1480815921)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    public static Object proc___(Object _self, Object a_warning) {
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrap("report_on()", (Object)a_warning, (Object)DynamicAccessor.bootstrapFetcher("!terminal!", "sw")));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="database_context_component__render_data")
    @SourceHash(value=1433838903)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    public static Object proc___2(Object _self, Object a_info) {
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrap("report_on()", (Object)a_info, (Object)DynamicAccessor.bootstrapFetcher("!terminal!", "sw")));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="database_context_component__render_data")
    @Debugger(value="MagikDebug")
    @CodeType(value="LoopBody")
    @EnvVars(value={@EnvVar(name="count", type=Object[].class, start=67, end=139, index=3), @EnvVar(name="__dynamic_frame__", type=Object.class, start=22, end=166, index=0)})
    public static Object __loopbody_3(Object[] __env__, Object priority_data) {
        ResultTuple resultTuple;
        DynamicScope __iterator_frame__ = DynamicScope.interjectFrame((DynamicScope)((Object)EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)1)));
        try {
            EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
            if (MagikObjectUtils.should_be_boolean(BinaryDispatcher.bootstrap("\\g", EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)4), Integer.valueOf(1)))) {
                EnvAccessor.bootstrapStorer("storeEnv", (Object)BinaryDispatcher.bootstrap("+", EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)3), Integer.valueOf(1)), (Object[])__env__, (int)3);
                DynamicAccessor.bootstrapStorer("!evaluate_drawing_function!", "sw", (Object)(MagikObjectUtils.should_be_boolean(BinaryDispatcher.bootstrap("=", EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)3), Integer.valueOf(1))) ? ConstantBuilder.symbolBootstrap("symbol", "pre") : (MagikObjectUtils.should_be_boolean(BinaryDispatcher.bootstrap("=", EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)3), EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)4))) ? ConstantBuilder.symbolBootstrap("symbol", "post") : null)));
            }
            EnvAccessor.bootstrapStorer("storeEnv", (Object)DynamicScope.getFrame(), (Object[])__env__, (int)0);
            ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrap("fast_keys_and_elements()", (MethodHandle)cfr_ldc_3(), (Object[])__env__, (Object)priority_data));
            resultTuple = ResultTuple.EMPTY_TUPLE;
        }
        catch (Throwable throwable) {
            DynamicScope.interjectFrame(__iterator_frame__);
            throw throwable;
        }
        DynamicScope.interjectFrame(__iterator_frame__);
        return resultTuple;
    }

    @Parent(method="__loopbody_3")
    @Debugger(value="MagikDebug")
    @CodeType(value="LoopBody")
    public static Object __loopbody_4(Object[] __env__, Object ds, Object vhs_data) {
        ResultTuple resultTuple;
        DynamicScope __iterator_frame__ = DynamicScope.interjectFrame((DynamicScope)((Object)EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0)));
        try {
            ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrap("render_in()", (Object)ds, (Object)EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)6), (Object)vhs_data, (Object)EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)2), (Object)EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)5)));
            resultTuple = ResultTuple.EMPTY_TUPLE;
        }
        catch (Throwable throwable) {
            DynamicScope.interjectFrame(__iterator_frame__);
            throw throwable;
        }
        DynamicScope.interjectFrame(__iterator_frame__);
        return resultTuple;
    }

    @SourceHash(value=-1201515395)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__draw_object_on(Object _self, Object a_map_view, Object a_geom, Object drawing_type, Object drawing_application) {
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("int!draw_object_on()", (Object)_self, (Object)a_map_view, (Object)a_geom, (Object)drawing_type, (Object)drawing_application, (Object)Boolean.FALSE));
        return ResultTuple.EMPTY_TUPLE;
    }

    @SourceHash(value=-795466162)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__undraw_object_on(Object _self, Object a_map_view, Object a_geom, Object drawing_type, Object drawing_application) {
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("int!draw_object_on()", (Object)_self, (Object)a_map_view, (Object)a_geom, (Object)drawing_type, (Object)drawing_application, (Object)Boolean.TRUE));
        return ResultTuple.EMPTY_TUPLE;
    }

    @SourceHash(value=975202967)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="3adb3b6f-c4c6-406c-9eba-a37e6f1ffee0", type=Object.class, start=41, end=279, index=0), @EnvVar(name="3adb3b6f-c4c6-406c-9eba-a37e6f1ffee0", type=Object.class, start=352, end=361, index=0), @EnvVar(name="3adb3b6f-c4c6-406c-9eba-a37e6f1ffee0", type=Object.class, start=365, end=366, index=0)})
    public static Object database_context_component__int!draw_object_on(Object _self, Object a_map_view, Object a_geom, Object drawing_type, Object drawing_application, Object object) {
        ResultTuple resultTuple;
        Object[] __env__ = new Object[1];
        DynamicAccessor.bootstrapBinder("!current_database_context!", "sw", 1);
        try {
            block15: {
                Object object2;
                DynamicAccessor.bootstrapStorer("!current_database_context!", "sw", (Object)_self);
                if (a_geom == null) {
                    ResultTuple resultTuple2 = ResultTuple.EMPTY_TUPLE;
                    DynamicScope.destroyFrame();
                    return resultTuple2;
                }
                EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
                EnvAccessor.bootstrapStorer("storeEnv", (Object)new Object(), (Object[])__env__, (int)0);
                DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
                CallSite callSite = EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0);
                DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
                try {
                    try {
                        DynamicAccessor.bootstrapBinder("!sys!condition_handler_cluster!", "sw", 1);
                        try {
                            block14: {
                                Object[] objectArray = new Object[]{__env__[0]};
                                ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sys!install_handlers"), ConstantBuilder.symbolBootstrap("symbol", "error"), ConstantBuilder.procBootstrap("proc", (Class<?>)database_context_component_223.class, "proc___3", "", 3, 3, 0, 0, (Object[])objectArray));
                                DynamicAccessor.bootstrapBinder("!current_sts!", "sw", 1);
                                DynamicAccessor.bootstrapBinder("!current_view!", "sw", 0);
                                try {
                                    CallSite sts = Invoker.bootstrap("style_system_for()", Invoker.bootstrapPrivate("ace_control", (Object)_self), Invoker.bootstrapPrivate("display_scale", (Object)_self), drawing_application);
                                    CallSite style = Invoker.bootstrap("style_in()", a_geom, sts, drawing_type);
                                    DynamicAccessor.bootstrapStorer("!current_sts!", "sw", (Object)sts);
                                    DynamicAccessor.bootstrapStorer("!current_view!", "sw", (Object)a_map_view);
                                    if (style == null) break block14;
                                    if (MagikObjectUtils.is(object, Boolean.TRUE)) {
                                        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrap("undraw_on()", (Object)a_geom, (Object)Invoker.bootstrap("window", a_map_view), (Object)style, (Object)drawing_type));
                                        break block14;
                                    }
                                    ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrap("draw_on()", (Object)a_geom, (Object)Invoker.bootstrap("window", a_map_view), (Object)style, (Object)drawing_type));
                                }
                                catch (Throwable throwable) {
                                    DynamicScope.destroyFrame();
                                    throw throwable;
                                }
                            }
                            DynamicScope.destroyFrame();
                            DynamicScope.destroyFrame();
                            DynamicScope.destroyFrame();
                            break block15;
                        }
                        catch (Throwable throwable) {
                            DynamicScope.destroyFrame();
                            throw throwable;
                        }
                    }
                    catch (Thrower.Throw throw_) {
                        Object object3;
                        object2 = object3 = Thrower.checkTag(throw_, callSite).peek();
                        DynamicScope.destroyFrame();
                    }
                }
                catch (Throwable throwable) {
                    DynamicScope.destroyFrame();
                    throw throwable;
                }
                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("taxonomy_includes?()", (Object)object2, (Object)ConstantBuilder.symbolBootstrap("symbol", "error")))) {
                    Object cond = object2;
                    ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrap("raise()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "condition"), (Object)ConstantBuilder.symbolBootstrap("symbol", "dbx_geometry_draw_failed"), (Object)ConstantBuilder.symbolBootstrap("symbol", "geom"), (Object)a_geom, (Object)ConstantBuilder.symbolBootstrap("symbol", "error_condition"), (Object)Invoker.bootstrap("report_contents_string", cond)));
                } else {
                    throw new Error("Try block caught unexpected error.");
                }
            }
            resultTuple = ResultTuple.EMPTY_TUPLE;
        }
        catch (Throwable throwable) {
            DynamicScope.destroyFrame();
            throw throwable;
        }
        DynamicScope.destroyFrame();
        return resultTuple;
    }

    @Parent(method="database_context_component__int!draw_object_on")
    @SourceHash(value=91382809)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    @EnvVars(value={@EnvVar(name="3adb3b6f-c4c6-406c-9eba-a37e6f1ffee0", type=Object.class, start=0, end=20, index=0)})
    public static Object proc___3(Object[] __env__, Object _self, Object cond) {
        InterruptInfrastructure.checkAndProcessInterrupts();
        throw Thrower.make(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", cond)));
    }

    @SourceHash(value=639775134)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__current_dsview_(Object _self) {
        CallSite the_soc = Invoker.bootstrapPrivate("spatial_object_controller", (Object)_self);
        return the_soc != null ? (ResultTuple)((Object)Invoker.tupleBootstrap("main_dataset_manager", (Object)the_soc)) : null;
    }

    @SourceHash(value=1751617171)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__style_dsview_(Object _self) {
        return (ResultTuple)((Object)Invoker.tupleBootstrap("style_view", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "gis_program_manager")));
    }

    @SourceHash(value=-439161988)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    public static Object proc__selection_order_proc_(Object _self, Object a, Object b) {
        CallSite class_b;
        ResultTuple resultTuple = (ResultTuple)((Object)TupleBuilder.bootstrap("tb", Invoker.bootstrap("\\b]", a, Integer.valueOf(1)), Invoker.bootstrap("geom_category", Invoker.bootstrap("\\b]", a, Integer.valueOf(2)))));
        Object cat_a = resultTuple.pop();
        Object dist_a = resultTuple.pop();
        ResultTuple resultTuple2 = (ResultTuple)((Object)TupleBuilder.bootstrap("tb", Invoker.bootstrap("\\b]", b, Integer.valueOf(1)), Invoker.bootstrap("geom_category", Invoker.bootstrap("\\b]", b, Integer.valueOf(2)))));
        Object cat_b = resultTuple2.pop();
        Object dist_b = resultTuple2.pop();
        if (MagikObjectUtils.is(cat_a, cat_b)) {
            return BinaryDispatcher.bootstrap("\\l=", dist_a, dist_b);
        }
        CallSite class_a = BinaryDispatcher.bootstrap("or", new Boolean(MagikObjectUtils.is(cat_a, ConstantBuilder.symbolBootstrap("symbol", "point"))), new Boolean(MagikObjectUtils.is(cat_a, ConstantBuilder.symbolBootstrap("symbol", "text"))));
        if (MagikObjectUtils.is(class_a, class_b = BinaryDispatcher.bootstrap("or", new Boolean(MagikObjectUtils.is(cat_b, ConstantBuilder.symbolBootstrap("symbol", "point"))), new Boolean(MagikObjectUtils.is(cat_b, ConstantBuilder.symbolBootstrap("symbol", "text")))))) {
            return BinaryDispatcher.bootstrap("\\l=", dist_a, dist_b);
        }
        return class_a;
    }

    @SourceHash(value=-1964763756)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="__dynamic_frame__", type=Object.class, start=56, end=322, index=0), @EnvVar(name="range", type=Object.class, start=26, end=323, index=8), @EnvVar(name="geom_set", type=Object[].class, start=181, end=323, index=9), @EnvVar(name="world_coord", type=Object[].class, start=153, end=323, index=2), @EnvVar(name="selection_candidates", type=Object[].class, start=221, end=323, index=1), @EnvVar(name="max_num", type=Object.class, start=47, end=323, index=7), @EnvVar(name="_self", type=Object.class, start=16, end=323, index=4), @EnvVar(name="geom_category", type=Object.class, start=36, end=323, index=3)})
    public static Object database_context_component__point_selection_candidates(Object _self, Object x, Object y, Object range, Object geom_category, Object max_num) {
        Object[] __env__ = new Object[10];
        EnvAccessor.bootstrapReseter("resetEnv", (Object)_self, (Object[])__env__, (int)4);
        EnvAccessor.bootstrapReseter("resetEnv", (Object)range, (Object[])__env__, (int)8);
        EnvAccessor.bootstrapReseter("resetEnv", (Object)geom_category, (Object[])__env__, (int)3);
        EnvAccessor.bootstrapReseter("resetEnv", (Object)max_num, (Object[])__env__, (int)7);
        EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
        Object object = BinaryDispatcher.bootstrap("=", EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)3), ConstantBuilder.stringBootstrap("string", ""));
        if (!MagikObjectUtils.should_be_boolean(object)) {
            object = new Boolean(MagikObjectUtils.is(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)3), null));
        }
        EnvAccessor.bootstrapStorer("storeEnv", (Object)(MagikObjectUtils.should_be_boolean(object) ? null : Invoker.bootstrap("as_symbol()", EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)3))), (Object[])__env__, (int)3);
        EnvAccessor.bootstrapStorer("storeEnv", (Object)ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "coordinate"), x, y), (Object[])__env__, (int)2);
        EnvAccessor.bootstrapStorer("storeEnv", (Object)Invoker.bootstrap("new()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "equality_set"), EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)7)), (Object[])__env__, (int)9);
        EnvAccessor.bootstrapStorer("storeEnv", (Object)Invoker.bootstrap("new()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sorted_collection"), EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)7), Invoker.bootstrapPrivate("selection_order_proc", (Object)EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)4))), (Object[])__env__, (int)1);
        EnvAccessor.bootstrapStorer("storeEnv", (Object)DynamicScope.getFrame(), (Object[])__env__, (int)0);
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("all_objects_interacting_with()", (MethodHandle)cfr_ldc_4(), (Object[])__env__, (Object)EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)4), (Object)BinaryDispatcher.bootstrap("-", x, EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)8)), (Object)BinaryDispatcher.bootstrap("-", y, EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)8)), (Object)BinaryDispatcher.bootstrap("+", x, EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)8)), (Object)BinaryDispatcher.bootstrap("+", y, EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)8))));
        return EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)1);
    }

    @Parent(method="database_context_component__point_selection_candidates")
    @Debugger(value="MagikDebug")
    @CodeType(value="LoopBody")
    @EnvVars(value={@EnvVar(name="geom_cat", type=Object[].class, start=76, end=350, index=5), @EnvVar(name="dist", type=Object[].class, start=237, end=350, index=6)})
    public static Object __loopbody_5(Object[] __env__, Object geom) {
        ResultTuple resultTuple;
        DynamicScope __iterator_frame__ = DynamicScope.interjectFrame((DynamicScope)((Object)EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0)));
        try {
            Boolean bl;
            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrap("includes?()", EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)9), geom))) {
                ResultTuple resultTuple2 = ResultTuple.EMPTY_TUPLE;
                DynamicScope.interjectFrame(__iterator_frame__);
                return resultTuple2;
            }
            ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrap("add()", (Object)EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)9), (Object)geom));
            EnvAccessor.bootstrapStorer("storeEnv", (Object)Invoker.bootstrap("geom_category", geom), (Object[])__env__, (int)5);
            boolean bl2 = MagikObjectUtils.is(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)3), null);
            Boolean bl3 = new Boolean(bl2);
            if (bl2) {
                bl3 = bl = new Boolean(MagikObjectUtils.is(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)5), ConstantBuilder.symbolBootstrap("symbol", "raster")));
            }
            if (!MagikObjectUtils.should_be_boolean(bl3)) {
                boolean bl4 = MagikObjectUtils.isnt(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)3), null);
                bl = new Boolean(bl4);
                if (bl4) {
                    bl = new Boolean(MagikObjectUtils.isnt(EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)3), EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)5)));
                }
            }
            if (MagikObjectUtils.should_be_boolean(bl)) {
                ResultTuple resultTuple3 = ResultTuple.EMPTY_TUPLE;
                DynamicScope.interjectFrame(__iterator_frame__);
                return resultTuple3;
            }
            EnvAccessor.bootstrapStorer("storeEnv", (Object)Invoker.bootstrapPrivate("selection_score()", (Object)EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)4), (Object)EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)2), (Object)EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)8), (Object)geom), (Object[])__env__, (int)6);
            if (EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)6) == null) {
                ResultTuple resultTuple4 = ResultTuple.EMPTY_TUPLE;
                DynamicScope.interjectFrame(__iterator_frame__);
                return resultTuple4;
            }
            ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrap("add()", (Object)EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)1), (Object)VectorBuilder.bootstrap("vb", EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)6), geom)));
            if (MagikObjectUtils.should_be_boolean(BinaryDispatcher.bootstrap("\\g", Invoker.bootstrap("size", EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)1)), EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)7)))) {
                ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrap("remove_last()", (Object)EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)1)));
            }
            resultTuple = ResultTuple.EMPTY_TUPLE;
        }
        catch (Throwable throwable) {
            DynamicScope.interjectFrame(__iterator_frame__);
            throw throwable;
        }
        DynamicScope.interjectFrame(__iterator_frame__);
        return resultTuple;
    }

    @SourceHash(value=-1251433775)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__get_dataset_manager_names(Object _self) {
        return (ResultTuple)((Object)Invoker.tupleBootstrap("dataset_manager_names", (Object)Invoker.bootstrapPrivate("spatial_object_controller", (Object)_self)));
    }

    @SourceHash(value=292153011)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object spatial_object_controller__dataset_manager_names_(Object _self) {
        return (ResultTuple)((Object)Invoker.tupleBootstrap("keys", (Object)Invoker.bootstrapPrivate("$slot_get_dataset_managers()", (Object)_self)));
    }

    @SourceHash(value=861246472)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__get_rwo_status_for_dataset_manager(Object _self, Object dataset_manager_name, Object display_scale_name) {
        ResultTuple resultTuple;
        CallSite a_dataset_manager = Invoker.bootstrap("dataset_manager()", Invoker.bootstrapPrivate("spatial_object_controller", (Object)_self), dataset_manager_name);
        if (a_dataset_manager != null) {
            CallSite rwo_status = Invoker.bootstrapPrivate("get_rwo_status_for()", (Object)_self, (Object)Invoker.bootstrap("as_symbol()", display_scale_name));
            ProcInvoker.naturalBootstrap("()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "show"), (Object)ConstantBuilder.stringBootstrap("string", "rwo_status"), (Object)rwo_status);
            resultTuple = (ResultTuple)((Object)Invoker.tupleBootstrap("\\b]", (Object)rwo_status, (Object)a_dataset_manager));
        } else {
            resultTuple = null;
        }
        return resultTuple;
    }

    @SourceHash(value=1199907693)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__get_dataset_manager(Object _self, Object name) {
        return (ResultTuple)((Object)Invoker.tupleBootstrap("dataset_manager()", (Object)Invoker.bootstrapPrivate("spatial_object_controller", (Object)_self), (Object)Invoker.bootstrap("as_symbol()", name)));
    }

    @SourceHash(value=1199096841)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__note_change(Object _self, Object who, Object what, Object ... data) {
        block1: {
            Object change_type;
            Object[] stuff;
            block2: {
                boolean bl = MagikObjectUtils.is(who, Invoker.bootstrapPrivate("$slot_get_soc()", (Object)_self));
                Boolean bl2 = new Boolean(bl);
                if (bl) {
                    bl2 = new Boolean(MagikObjectUtils.is(what, ConstantBuilder.symbolBootstrap("symbol", "view")));
                }
                if (!MagikObjectUtils.should_be_boolean(bl2)) break block1;
                ResultTuple resultTuple = (ResultTuple)((Object)TupleBuilder.bootstrap("tb", (Object[])Invoker.bootstrapPrivate("for_scatter()", (Object)data)));
                stuff = resultTuple.remainder(1);
                change_type = resultTuple.pop();
                if (change_type != ConstantBuilder.symbolBootstrap("symbol", "added_dsm")) break block2;
                Object dsm = ((ResultTuple)((Object)TupleBuilder.bootstrap("tb", (Object[])Invoker.bootstrapPrivate("for_scatter()", (Object)stuff)))).pop();
                ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("generate_event()", (Object)_self, (Object)ConstantBuilder.symbolBootstrap("symbol", "dataset_manager_added"), (Object)dsm));
                break block1;
            }
            if (change_type != ConstantBuilder.symbolBootstrap("symbol", "removed_dsm")) break block1;
            Object dsm = ((ResultTuple)((Object)TupleBuilder.bootstrap("tb", (Object[])Invoker.bootstrapPrivate("for_scatter()", (Object)stuff)))).pop();
            ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("generate_event()", (Object)_self, (Object)ConstantBuilder.symbolBootstrap("symbol", "dataset_manager_removed"), (Object)dsm));
        }
        return ResultTuple.EMPTY_TUPLE;
    }

    @SourceHash(value=-301997683)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__reset(Object _self) {
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrap("reset()", (Object)Invoker.bootstrapPrivate("ace_control", (Object)_self)));
        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("generate_event()", (Object)_self, (Object)ConstantBuilder.symbolBootstrap("symbol", "visibility_changed")));
        return ResultTuple.EMPTY_TUPLE;
    }

    @SourceHash(value=1028914299)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__terminate(Object _self) {
        block0: {
            if (Invoker.bootstrapPrivate("$slot_get_soc()", (Object)_self) == null) break block0;
            ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrap("remove_dependent()", (Object)Invoker.bootstrapPrivate("$slot_get_soc()", (Object)_self), (Object)_self));
        }
        return ResultTuple.EMPTY_TUPLE;
    }

    @SourceHash(value=-1871355228)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__coordinate_system_(Object _self) {
        return (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("$slot_get_coordinate_system()", (Object)_self));
    }

    @SourceHash(value=1100154383)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__coordinate_system\l\l_(Object _self, Object a_coordinate_system) {
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("$slot_set_coordinate_system()", (Object)_self, (Object)a_coordinate_system));
        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("generate_event()", (Object)_self, (Object)ConstantBuilder.symbolBootstrap("symbol", "coordinate_system_changed"), (Object)a_coordinate_system));
        return ResultTuple.EMPTY_TUPLE;
    }

    @SourceHash(value=-2045509022)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__select_coordinate_system(Object _self, Object a_coordinate_system) {
        return ResultTuple.EMPTY_TUPLE;
    }

    @SourceHash(value=-1951938723)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__field_print_width(Object _self, Object a_collection, Object field_name) {
        CallSite value;
        block1: {
            value = null;
            CallSite the_collection = Invoker.bootstrap("source", a_collection);
            CallSite dataset_name = Invoker.bootstrap("dataset_name", the_collection);
            boolean bl = MagikObjectUtils.is(dataset_name, null);
            Boolean bl2 = new Boolean(bl);
            if (!bl) {
                value = Invoker.bootstrap("field_print_width()", Invoker.bootstrapPrivate("ace", (Object)_self), dataset_name, Invoker.bootstrap("name", the_collection), field_name);
                bl2 = new Boolean(MagikObjectUtils.is(value, null));
            }
            if (!MagikObjectUtils.should_be_boolean(bl2)) break block1;
            value = Invoker.bootstrap("print_width", Invoker.bootstrap("field()", the_collection, Invoker.bootstrap("as_symbol()", field_name)));
        }
        return value;
    }

    @SourceHash(value=1864172571)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__table_non_geometry_visible_field_names(Object _self, Object a_collection, Object tag, Object object) {
        return (ResultTuple)((Object)Invoker.tupleBootstrap("map()", (Object)Invoker.bootstrapPrivate("table_non_geometry_visible_fields()", (Object)_self, (Object)Invoker.bootstrap("source", a_collection), (Object)tag, (Object)object), (Object)ConstantBuilder.procWithEmptyEnvBootstrap("proc", (Class<?>)database_context_component_223.class, "proc___4", "", 2, 2, 0, 0)));
    }

    @Parent(method="database_context_component__table_non_geometry_visible_field_names")
    @SourceHash(value=-138281173)
    @Debugger(value="MagikDebug")
    @CodeType(value="Proc")
    public static Object proc___4(Object _self, Object fd) {
        return (ResultTuple)((Object)Invoker.tupleBootstrap("name", (Object)fd));
    }

    @SourceHash(value=1720948318)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="__dynamic_frame__", type=Object.class, start=15, end=79, index=0), @EnvVar(name="result", type=Object[].class, start=44, end=80, index=1)})
    public static Object database_context_component__table_non_geometry_visible_fields(Object _self, Object a_collection, Object tag, Object object) {
        Object[] __env__ = new Object[2];
        EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
        CallSite vis_fields = Invoker.bootstrapPrivate("table_visible_fields()", (Object)_self, (Object)a_collection, (Object)tag, (Object)object);
        EnvAccessor.bootstrapStorer("storeEnv", (Object)Invoker.bootstrap("new()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "rope")), (Object[])__env__, (int)1);
        EnvAccessor.bootstrapStorer("storeEnv", (Object)DynamicScope.getFrame(), (Object[])__env__, (int)0);
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrap("fast_elements()", (MethodHandle)cfr_ldc_5(), (Object[])__env__, (Object)vis_fields));
        return EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)1);
    }

    @Parent(method="database_context_component__table_non_geometry_visible_fields")
    @Debugger(value="MagikDebug")
    @CodeType(value="LoopBody")
    public static Object __loopbody_6(Object[] __env__, Object fd) {
        ResultTuple resultTuple;
        DynamicScope __iterator_frame__ = DynamicScope.interjectFrame((DynamicScope)((Object)EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0)));
        try {
            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrap("not", Invoker.bootstrap("is_geometry?", fd)))) {
                ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrap("add_last()", (Object)EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)1), (Object)fd));
            }
            resultTuple = ResultTuple.EMPTY_TUPLE;
        }
        catch (Throwable throwable) {
            DynamicScope.interjectFrame(__iterator_frame__);
            throw throwable;
        }
        DynamicScope.interjectFrame(__iterator_frame__);
        return resultTuple;
    }

    @SourceHash(value=-493716509)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="__dynamic_frame__", type=Object.class, start=15, end=117, index=0), @EnvVar(name="td", type=Object[].class, start=82, end=118, index=2), @EnvVar(name="field_descriptors", type=Object[].class, start=67, end=118, index=3)})
    public static Object database_context_component__table_visible_fields(Object _self, Object a_collection, Object tag, Object object) {
        Object[] __env__ = new Object[4];
        EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
        CallSite the_collection = Invoker.bootstrap("source", a_collection);
        CallSite field_names = Invoker.bootstrapPrivate("table_visible_field_names()", (Object)_self, (Object)the_collection, (Object)tag, (Object)object);
        if (field_names == null) {
            return null;
        }
        EnvAccessor.bootstrapStorer("storeEnv", (Object)Invoker.bootstrap("new_for()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "rope"), Invoker.bootstrap("size", field_names)), (Object[])__env__, (int)3);
        EnvAccessor.bootstrapStorer("storeEnv", (Object)Invoker.bootstrap("descriptor", the_collection), (Object[])__env__, (int)2);
        EnvAccessor.bootstrapStorer("storeEnv", (Object)DynamicScope.getFrame(), (Object[])__env__, (int)0);
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrap("fast_elements()", (MethodHandle)cfr_ldc_6(), (Object[])__env__, (Object)field_names));
        return EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)3);
    }

    @Parent(method="database_context_component__table_visible_fields")
    @Debugger(value="MagikDebug")
    @CodeType(value="LoopBody")
    @EnvVars(value={@EnvVar(name="fd", type=Object[].class, start=40, end=78, index=1)})
    public static Object __loopbody_7(Object[] __env__, Object a_name) {
        ResultTuple resultTuple;
        DynamicScope __iterator_frame__ = DynamicScope.interjectFrame((DynamicScope)((Object)EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0)));
        try {
            CallSite callSite = Invoker.bootstrap("field()", EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)2), Invoker.bootstrap("as_symbol()", a_name));
            EnvAccessor.bootstrapStorer("storeEnv", (Object)callSite, (Object[])__env__, (int)1);
            if (callSite != null) {
                ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrap("add_last()", (Object)EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)3), (Object)EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)1)));
            }
            resultTuple = ResultTuple.EMPTY_TUPLE;
        }
        catch (Throwable throwable) {
            DynamicScope.interjectFrame(__iterator_frame__);
            throw throwable;
        }
        DynamicScope.interjectFrame(__iterator_frame__);
        return resultTuple;
    }

    @SourceHash(value=-1522351318)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__table_visible_field_names(Object _self, Object a_collection, Object tag, Object object) {
        CallSite names;
        block2: {
            CallSite dataset_name;
            CallSite the_collection;
            block1: {
                the_collection = Invoker.bootstrap("source", a_collection);
                dataset_name = Invoker.bootstrap("dataset_name", the_collection);
                if (dataset_name == null) {
                    return ResultTuple.EMPTY_TUPLE;
                }
                if (!MagikObjectUtils.is(object, Boolean.TRUE)) break block1;
                names = Invoker.bootstrap("table_visible_field_names_with_defaults()", Invoker.bootstrapPrivate("ace", (Object)_self), dataset_name, Invoker.bootstrap("name", the_collection), Invoker.bootstrap("default()", tag, ConstantBuilder.symbolBootstrap("symbol", "default")));
                break block2;
            }
            names = Invoker.bootstrap("table_visible_field_names()", Invoker.bootstrapPrivate("ace", (Object)_self), dataset_name, Invoker.bootstrap("name", the_collection), tag);
            if (names != null) break block2;
            names = Invoker.bootstrap("visible_field_names()", Invoker.bootstrap("descriptor", the_collection), tag);
        }
        return names;
    }

    @SourceHash(value=-1440294261)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__field_default_value(Object _self, Object a_collection, Object field_name) {
        CallSite value;
        block1: {
            value = null;
            CallSite the_collection = Invoker.bootstrap("source", a_collection);
            CallSite dataset_name = Invoker.bootstrap("dataset_name", the_collection);
            boolean bl = MagikObjectUtils.is(dataset_name, null);
            Boolean bl2 = new Boolean(bl);
            if (!bl) {
                value = Invoker.bootstrap("field_default_value()", Invoker.bootstrapPrivate("ace", (Object)_self), dataset_name, Invoker.bootstrap("name", the_collection), field_name);
                bl2 = new Boolean(MagikObjectUtils.is(value, null));
            }
            if (!MagikObjectUtils.should_be_boolean(bl2)) break block1;
            value = Invoker.bootstrap("default_value", Invoker.bootstrap("field()", the_collection, Invoker.bootstrap("as_symbol()", field_name)));
        }
        return value;
    }

    @SourceHash(value=-1100120765)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__objects_interacting_stream(Object _self, Object x1, Object y1, Object x2, Object y2) {
        CallSite interest_box = Invoker.bootstrap("new()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "bounding_box"), x1, y1, x2, y2);
        CallSite str = Invoker.bootstrap("new()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "elements_stream"), Invoker.bootstrapPrivate("spatial_object_controller", (Object)_self), ConstantBuilder.symbolBootstrap("symbol", "all_objects_interacting_with()"), Invoker.bootstrapPrivate("ace_control", (Object)_self), Invoker.bootstrapPrivate("display_scale", (Object)_self), interest_box);
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrap("return_at_eof()", (Object)str, null));
        return str;
    }

    @SourceHash(value=-1843926588)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="__dynamic_frame__", type=Object.class, start=33, end=100, index=0), @EnvVar(name="__loopenv__", type=Object.class, start=24, end=101, index=1), @EnvVar(name="__loopbody__", type=Object.class, start=15, end=101, index=2)})
    public static Object database_context_component__all_objects_interacting_with(MethodHandle __loopbody__, Object[] __loopenv__, Object _self, Object x1, Object y1, Object x2, Object y2) {
        Object[] __env__ = new Object[3];
        EnvAccessor.bootstrapReseter("resetEnv", (Object)__loopbody__, (Object[])__env__, (int)2);
        EnvAccessor.bootstrapReseter("resetEnv", (Object)__loopenv__, (Object[])__env__, (int)1);
        EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
        CallSite interest_box = Invoker.bootstrap("new()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "bounding_box"), x1, y1, x2, y2);
        EnvAccessor.bootstrapStorer("storeEnv", (Object)DynamicScope.getFrame(), (Object[])__env__, (int)0);
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrap("all_objects_interacting_with()", (MethodHandle)cfr_ldc_7(), (Object[])__env__, (Object)Invoker.bootstrapPrivate("spatial_object_controller", (Object)_self), (Object)Invoker.bootstrapPrivate("ace_control", (Object)_self), (Object)Invoker.bootstrapPrivate("display_scale", (Object)_self), (Object)interest_box));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="database_context_component__all_objects_interacting_with")
    @Debugger(value="MagikDebug")
    @CodeType(value="LoopBody")
    public static Object __loopbody_8(Object[] __env__, Object a_geom) {
        ResultTuple resultTuple;
        DynamicScope __iterator_frame__ = DynamicScope.interjectFrame((DynamicScope)((Object)EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0)));
        try {
            LoopBodyInvoker.naturalBootstrap("_loopbody", (MethodHandle)((MethodHandle)((Object)EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)2))), (Object[])((Object[])EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)1)), (Object)a_geom);
            resultTuple = ResultTuple.EMPTY_TUPLE;
        }
        catch (Throwable throwable) {
            DynamicScope.interjectFrame(__iterator_frame__);
            throw throwable;
        }
        DynamicScope.interjectFrame(__iterator_frame__);
        return resultTuple;
    }

    @SourceHash(value=-1457564205)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__objects_interacting_with(Object _self, Object x1, Object y1, Object x2, Object y2, Object max_num) {
        CallSite interest_box = Invoker.bootstrap("new()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "bounding_box"), x1, y1, x2, y2);
        ResultTuple resultTuple = (ResultTuple)((Object)Invoker.tupleBootstrap("objects_interacting_with()", (Object)Invoker.bootstrapPrivate("spatial_object_controller", (Object)_self), (Object)Invoker.bootstrapPrivate("ace_control", (Object)_self), (Object)Invoker.bootstrapPrivate("display_scale", (Object)_self), (Object)interest_box, (Object)max_num));
        Object geoms = resultTuple.pop();
        Boolean bl = new Boolean(MagikObjectUtils.is(resultTuple.pop(), ConstantBuilder.maybeBootstrap("_maybe")));
        return VectorBuilder.bootstrap("vb", geoms, bl);
    }

    @SourceHash(value=218940164)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="__dynamic_frame__", type=Object.class, start=22, end=124, index=1), @EnvVar(name="theme_geometries", type=Object[].class, start=63, end=125, index=3), @EnvVar(name="theme_names", type=Object[].class, start=80, end=125, index=6), @EnvVar(name="_self", type=Object.class, start=14, end=125, index=5)})
    public static Object database_context_component__setup_themes(Object _self) {
        Object[] __env__ = new Object[9];
        EnvAccessor.bootstrapReseter("resetEnv", (Object)_self, (Object[])__env__, (int)5);
        EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)1);
        CallSite defined_themes = Invoker.bootstrap("theme_definitions", Invoker.bootstrapPrivate("ace", (Object)EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)5)));
        CallSite n_themes = Invoker.bootstrap("size", defined_themes);
        EnvAccessor.bootstrapStorer("storeEnv", (Object)Invoker.bootstrap("new()", VectorBuilder.EMPTY_VECTOR, n_themes), (Object[])__env__, (int)3);
        EnvAccessor.bootstrapStorer("storeEnv", (Object)Invoker.bootstrap("new()", VectorBuilder.EMPTY_VECTOR, n_themes), (Object[])__env__, (int)6);
        EnvAccessor.bootstrapStorer("storeEnv", (Object)DynamicScope.getFrame(), (Object[])__env__, (int)1);
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrap("fast_keys_and_elements()", (MethodHandle)cfr_ldc_8(), (Object[])__env__, (Object)defined_themes));
        return TupleBuilder.bootstrap("tb", EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)6), EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)3));
    }

    @Parent(method="database_context_component__setup_themes")
    @Debugger(value="MagikDebug")
    @CodeType(value="LoopBody")
    @EnvVars(value={@EnvVar(name="__dynamic_frame__", type=Object.class, start=22, end=155, index=0), @EnvVar(name="fds", type=Object[].class, start=98, end=161, index=7), @EnvVar(name="geom_recs", type=Object[].class, start=66, end=161, index=8)})
    public static Object __loopbody_9(Object[] __env__, Object i, Object theme) {
        ResultTuple resultTuple;
        DynamicScope __iterator_frame__ = DynamicScope.interjectFrame((DynamicScope)((Object)EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)1)));
        try {
            EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
            CallSite callSite = Invoker.bootstrap("name", theme);
            ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrap("\\b]\\l\\l", (Object)EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)6), (Object)callSite, (Object)i));
            EnvAccessor.bootstrapStorer("storeEnv", (Object)Invoker.bootstrap("geometries", theme), (Object[])__env__, (int)8);
            CallSite callSite2 = Invoker.bootstrap("new_for()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "rope"), Invoker.bootstrap("size", EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)8)));
            EnvAccessor.bootstrapStorer("storeEnv", (Object)callSite2, (Object[])__env__, (int)7);
            callSite = callSite2;
            ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrap("\\b]\\l\\l", (Object)EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)3), (Object)callSite, (Object)i));
            EnvAccessor.bootstrapStorer("storeEnv", (Object)DynamicScope.getFrame(), (Object[])__env__, (int)0);
            ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrap("fast_elements()", (MethodHandle)cfr_ldc_9(), (Object[])__env__, (Object)EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)8)));
            resultTuple = ResultTuple.EMPTY_TUPLE;
        }
        catch (Throwable throwable) {
            DynamicScope.interjectFrame(__iterator_frame__);
            throw throwable;
        }
        DynamicScope.interjectFrame(__iterator_frame__);
        return resultTuple;
    }

    @Parent(method="__loopbody_9")
    @Debugger(value="MagikDebug")
    @CodeType(value="LoopBody")
    @EnvVars(value={@EnvVar(name="dataset_manager", type=Object[].class, start=49, end=151, index=2), @EnvVar(name="fd", type=Object[].class, start=112, end=151, index=4)})
    public static Object __loopbody_10(Object[] __env__, Object g) {
        ResultTuple resultTuple;
        DynamicScope __iterator_frame__ = DynamicScope.interjectFrame((DynamicScope)((Object)EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0)));
        try {
            EnvAccessor.bootstrapStorer("storeEnv", (Object)Invoker.bootstrap("dataset_manager()", Invoker.bootstrapPrivate("$slot_get_soc()", (Object)EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)5)), Invoker.bootstrap("as_symbol()", Invoker.bootstrap("dataset_name", g))), (Object[])__env__, (int)2);
            if (EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)2) == null) {
                ResultTuple resultTuple2 = ResultTuple.EMPTY_TUPLE;
                DynamicScope.interjectFrame(__iterator_frame__);
                return resultTuple2;
            }
            CallSite callSite = Invoker.bootstrap("object_descriptor_for()", EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)2), Invoker.bootstrap("as_symbol()", Invoker.bootstrap("object_name", g)), Invoker.bootstrap("as_symbol()", Invoker.bootstrap("sub_name", g)));
            EnvAccessor.bootstrapStorer("storeEnv", (Object)callSite, (Object[])__env__, (int)4);
            if (callSite != null) {
                ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrap("add_last()", (Object)EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)7), (Object)EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)4)));
            }
            resultTuple = ResultTuple.EMPTY_TUPLE;
        }
        catch (Throwable throwable) {
            DynamicScope.interjectFrame(__iterator_frame__);
            throw throwable;
        }
        DynamicScope.interjectFrame(__iterator_frame__);
        return resultTuple;
    }

    @SourceHash(value=-6216143)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__ace_name\l\l_(Object _self, Object new_name) {
        block2: {
            if (!MagikObjectUtils.should_be_boolean(BinaryDispatcher.bootstrap("~=", Invoker.bootstrapPrivate("ace_name", (Object)_self), new_name))) break block2;
            CallSite new_ace = Invoker.bootstrap("ace()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "gis_program_manager"), new_name);
            if (new_ace != null) {
                CallSite callSite = new_ace;
                ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("ace\\l\\l", (Object)_self, (Object)callSite));
            } else {
                ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrap("raise()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "condition"), (Object)ConstantBuilder.symbolBootstrap("symbol", "dbx_no_such_ace"), (Object)ConstantBuilder.symbolBootstrap("symbol", "ace_name"), (Object)new_name));
            }
        }
        return ResultTuple.EMPTY_TUPLE;
    }

    @SourceHash(value=-1870074029)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__ace\l\l_(Object _self, Object an_ace) {
        block0: {
            if (!MagikObjectUtils.should_be_boolean(BinaryDispatcher.bootstrap("~=", an_ace, Invoker.bootstrapPrivate("$slot_get_ace()", (Object)_self)))) break block0;
            ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("$slot_set_ace()", (Object)_self, (Object)an_ace));
            ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("$slot_set_ace_control()", (Object)_self, null));
            ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("set_property()", (Object)_self, (Object)ConstantBuilder.symbolBootstrap("symbol", "ace_name"), (Object)Invoker.bootstrap("write_string", Invoker.bootstrap("name", an_ace))));
        }
        return ResultTuple.EMPTY_TUPLE;
    }

    @SourceHash(value=1354120187)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    @EnvVars(value={@EnvVar(name="__dynamic_frame__", type=Object.class, start=21, end=258, index=0), @EnvVar(name="active_themes", type=Object[].class, start=157, end=259, index=3), @EnvVar(name="theme_geoms", type=Object[].class, start=75, end=259, index=4), @EnvVar(name="filter", type=Object[].class, start=136, end=259, index=2), @EnvVar(name="selected_theme_names", type=Object.class, start=13, end=259, index=1)})
    public static Object database_context_component__selected_themes\l\l_(Object _self, Object selected_theme_names) {
        Object[] __env__ = new Object[5];
        EnvAccessor.bootstrapReseter("resetEnv", (Object)selected_theme_names, (Object[])__env__, (int)1);
        EnvAccessor.bootstrapReseter("resetEnv", null, (Object[])__env__, (int)0);
        EnvAccessor.bootstrapStorer("storeEnv", (Object)Invoker.bootstrap("new_from()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "equality_set"), EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)1)), (Object[])__env__, (int)1);
        ResultTuple resultTuple = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("setup_themes()", (Object)_self));
        EnvAccessor.bootstrapStorer("storeEnv", (Object)resultTuple.pop(), (Object[])__env__, (int)4);
        Object theme_names = resultTuple.pop();
        if (MagikObjectUtils.is(Invoker.bootstrap("size", theme_names), 0)) {
            ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrap("set_filter()", (Object)Invoker.bootstrapPrivate("ace_control", (Object)_self), (Object)VectorBuilder.EMPTY_VECTOR));
            return ResultTuple.EMPTY_TUPLE;
        }
        EnvAccessor.bootstrapStorer("storeEnv", (Object)Invoker.bootstrap("new()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "set"), Integer.valueOf(50)), (Object[])__env__, (int)2);
        EnvAccessor.bootstrapStorer("storeEnv", (Object)Invoker.bootstrap("new_for()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "rope"), Integer.valueOf(5)), (Object[])__env__, (int)3);
        EnvAccessor.bootstrapStorer("storeEnv", (Object)DynamicScope.getFrame(), (Object[])__env__, (int)0);
        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrap("fast_keys_and_elements()", (MethodHandle)cfr_ldc_10(), (Object[])__env__, (Object)theme_names));
        EnvAccessor.bootstrapStorer("storeEnv", (Object)DynamicScope.getFrame(), (Object[])__env__, (int)0);
        ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrap("fast_elements()", (MethodHandle)cfr_ldc_11(), (Object[])__env__, (Object)EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)3)));
        ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrap("set_filter()", (Object)Invoker.bootstrapPrivate("ace_control", (Object)_self), (Object)EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)2)));
        ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("set_property()", (Object)_self, (Object)ConstantBuilder.symbolBootstrap("symbol", "selected_themes"), (Object)EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)3)));
        return ResultTuple.EMPTY_TUPLE;
    }

    @Parent(method="database_context_component__selected_themes\\l\\l_")
    @Debugger(value="MagikDebug")
    @CodeType(value="LoopBody")
    public static Object __loopbody_11(Object[] __env__, Object i, Object theme_name) {
        ResultTuple resultTuple;
        DynamicScope __iterator_frame__ = DynamicScope.interjectFrame((DynamicScope)((Object)EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0)));
        try {
            if (MagikObjectUtils.should_be_boolean(Invoker.bootstrap("includes?()", EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)1), theme_name))) {
                ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrap("add_last()", (Object)EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)3), (Object)i));
            } else {
                ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrap("add_all()", (Object)EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)2), (Object)Invoker.bootstrap("\\b]", EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)4), i)));
            }
            resultTuple = ResultTuple.EMPTY_TUPLE;
        }
        catch (Throwable throwable) {
            DynamicScope.interjectFrame(__iterator_frame__);
            throw throwable;
        }
        DynamicScope.interjectFrame(__iterator_frame__);
        return resultTuple;
    }

    @Parent(method="database_context_component__selected_themes\\l\\l_")
    @Debugger(value="MagikDebug")
    @CodeType(value="LoopBody")
    public static Object __loopbody_12(Object[] __env__, Object i) {
        ResultTuple resultTuple;
        DynamicScope __iterator_frame__ = DynamicScope.interjectFrame((DynamicScope)((Object)EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)0)));
        try {
            ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrap("remove_all()", (Object)EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)2), (Object)Invoker.bootstrap("\\b]", EnvAccessor.bootstrapFetcher("fetchEnv", (Object[])__env__, (int)4), i)));
            resultTuple = ResultTuple.EMPTY_TUPLE;
        }
        catch (Throwable throwable) {
            DynamicScope.interjectFrame(__iterator_frame__);
            throw throwable;
        }
        DynamicScope.interjectFrame(__iterator_frame__);
        return resultTuple;
    }

    @SourceHash(value=-475632296)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__selection_score(Object _self, Object coord, Object range, Object geom) {
        return (ResultTuple)((Object)Invoker.tupleBootstrap("selection_score()", (Object)geom, (Object)coord, (Object)range));
    }

    @SourceHash(value=542734378)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object database_context_component__select_version_for_dataset(Object _self, Object dataset_name, Object version_spec) {
        block0: {
            if (!MagikObjectUtils.should_be_boolean(Invoker.bootstrap("select_version_for_dataset()", Invoker.bootstrapPrivate("$slot_get_soc()", (Object)_self), dataset_name, version_spec))) break block0;
            ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrap("dataset_manager_changed()", (Object)Invoker.bootstrapPrivate("$slot_get_ace_control()", (Object)_self), (Object)dataset_name));
        }
        return ResultTuple.EMPTY_TUPLE;
    }

    /*
     * Works around MethodHandle LDC.
     */
    static MethodHandle cfr_ldc_0() {
        try {
            return MethodHandles.lookup().findStatic(database_context_component_223.class, "__loopbody_", MethodType.fromMethodDescriptorString("([Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", null));
        }
        catch (NoSuchMethodException | IllegalAccessException except) {
            throw new IllegalArgumentException(except);
        }
    }

    /*
     * Works around MethodHandle LDC.
     */
    static MethodHandle cfr_ldc_1() {
        try {
            return MethodHandles.lookup().findStatic(database_context_component_223.class, "__loopbody_2", MethodType.fromMethodDescriptorString("([Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", null));
        }
        catch (NoSuchMethodException | IllegalAccessException except) {
            throw new IllegalArgumentException(except);
        }
    }

    /*
     * Works around MethodHandle LDC.
     */
    static MethodHandle cfr_ldc_2() {
        try {
            return MethodHandles.lookup().findStatic(database_context_component_223.class, "__loopbody_3", MethodType.fromMethodDescriptorString("([Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", null));
        }
        catch (NoSuchMethodException | IllegalAccessException except) {
            throw new IllegalArgumentException(except);
        }
    }

    /*
     * Works around MethodHandle LDC.
     */
    static MethodHandle cfr_ldc_3() {
        try {
            return MethodHandles.lookup().findStatic(database_context_component_223.class, "__loopbody_4", MethodType.fromMethodDescriptorString("([Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", null));
        }
        catch (NoSuchMethodException | IllegalAccessException except) {
            throw new IllegalArgumentException(except);
        }
    }

    /*
     * Works around MethodHandle LDC.
     */
    static MethodHandle cfr_ldc_4() {
        try {
            return MethodHandles.lookup().findStatic(database_context_component_223.class, "__loopbody_5", MethodType.fromMethodDescriptorString("([Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", null));
        }
        catch (NoSuchMethodException | IllegalAccessException except) {
            throw new IllegalArgumentException(except);
        }
    }

    /*
     * Works around MethodHandle LDC.
     */
    static MethodHandle cfr_ldc_5() {
        try {
            return MethodHandles.lookup().findStatic(database_context_component_223.class, "__loopbody_6", MethodType.fromMethodDescriptorString("([Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", null));
        }
        catch (NoSuchMethodException | IllegalAccessException except) {
            throw new IllegalArgumentException(except);
        }
    }

    /*
     * Works around MethodHandle LDC.
     */
    static MethodHandle cfr_ldc_6() {
        try {
            return MethodHandles.lookup().findStatic(database_context_component_223.class, "__loopbody_7", MethodType.fromMethodDescriptorString("([Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", null));
        }
        catch (NoSuchMethodException | IllegalAccessException except) {
            throw new IllegalArgumentException(except);
        }
    }

    /*
     * Works around MethodHandle LDC.
     */
    static MethodHandle cfr_ldc_7() {
        try {
            return MethodHandles.lookup().findStatic(database_context_component_223.class, "__loopbody_8", MethodType.fromMethodDescriptorString("([Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", null));
        }
        catch (NoSuchMethodException | IllegalAccessException except) {
            throw new IllegalArgumentException(except);
        }
    }

    /*
     * Works around MethodHandle LDC.
     */
    static MethodHandle cfr_ldc_8() {
        try {
            return MethodHandles.lookup().findStatic(database_context_component_223.class, "__loopbody_9", MethodType.fromMethodDescriptorString("([Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", null));
        }
        catch (NoSuchMethodException | IllegalAccessException except) {
            throw new IllegalArgumentException(except);
        }
    }

    /*
     * Works around MethodHandle LDC.
     */
    static MethodHandle cfr_ldc_9() {
        try {
            return MethodHandles.lookup().findStatic(database_context_component_223.class, "__loopbody_10", MethodType.fromMethodDescriptorString("([Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", null));
        }
        catch (NoSuchMethodException | IllegalAccessException except) {
            throw new IllegalArgumentException(except);
        }
    }

    /*
     * Works around MethodHandle LDC.
     */
    static MethodHandle cfr_ldc_10() {
        try {
            return MethodHandles.lookup().findStatic(database_context_component_223.class, "__loopbody_11", MethodType.fromMethodDescriptorString("([Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", null));
        }
        catch (NoSuchMethodException | IllegalAccessException except) {
            throw new IllegalArgumentException(except);
        }
    }

    /*
     * Works around MethodHandle LDC.
     */
    static MethodHandle cfr_ldc_11() {
        try {
            return MethodHandles.lookup().findStatic(database_context_component_223.class, "__loopbody_12", MethodType.fromMethodDescriptorString("([Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", null));
        }
        catch (NoSuchMethodException | IllegalAccessException except) {
            throw new IllegalArgumentException(except);
        }
    }
}

/*
 * Decompiled with CFR 0.151-SNAPSHOT (${git.commit.id.abbrev}).
 */
package magik.sw_core.ace_components;

import com.gesmallworld.magik.commons.runtime.annotations.CodeType;
import com.gesmallworld.magik.commons.runtime.annotations.Debugger;
import com.gesmallworld.magik.language.ResultTuple;
import com.gesmallworld.magik.language.invokers.BinaryDispatcher;
import com.gesmallworld.magik.language.invokers.ConstantBuilder;
import com.gesmallworld.magik.language.invokers.DynamicAccessor;
import com.gesmallworld.magik.language.invokers.GlobalAccessor;
import com.gesmallworld.magik.language.invokers.Invoker;
import com.gesmallworld.magik.language.invokers.ProcInvoker;
import com.gesmallworld.magik.language.invokers.TupleBuilder;
import com.gesmallworld.magik.language.invokers.VectorBuilder;
import com.gesmallworld.magik.language.utils.ExecutableMagik;
import com.gesmallworld.magik.language.utils.MagikObjectUtils;
import magik.sw_core.ace_components.database_context_component_223;

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class database_context_component_222
implements ExecutableMagik {
    @Debugger(value="MagikDebug")
    @CodeType(value="EmptyConstructor")
    public database_context_component_222() {
    }

    @Override
    @Debugger(value="MagikDebug")
    @CodeType(value="TopLevel")
    public Object execute() {
        DynamicAccessor.bootstrapStorer("!source_file!", "sw", (Object)ConstantBuilder.stringBootstrap("string", "/projects/hg/corerepo/sw_core/modules/sw_core/ace_components/source/database_context_component.magik"));
        DynamicAccessor.bootstrapStorer("!current_package!", "sw", (Object)ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "package"), ConstantBuilder.stringBootstrap("string", "sw")));
        ProcInvoker.naturalBootstrap("()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "def_slotted_exemplar"), (Object)ConstantBuilder.symbolBootstrap("symbol", "database_context_component"), (Object)VectorBuilder.bootstrap("vb", VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "ace"), null), VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "ace_control"), null), VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "soc"), null), VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "coordinate_system"), null)), (Object)ConstantBuilder.symbolBootstrap("symbol", "sw_component"));
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_shared_constant()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "database_context_component"), (Object)ConstantBuilder.symbolBootstrap("symbol", "category"), (Object)ConstantBuilder.symbolBootstrap("symbol", "database"), (Object)ConstantBuilder.symbolBootstrap("symbol", "public")));
        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_interface()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "database_context_component"), (Object)ConstantBuilder.symbolBootstrap("symbol", "spatial"), (Object)ConstantBuilder.symbolBootstrap("symbol", "inherits"), (Object)ConstantBuilder.symbolBootstrap("symbol", "standard"), (Object)ConstantBuilder.symbolBootstrap("symbol", "description"), (Object)ConstantBuilder.stringBootstrap("string", "provides spatial access and control of access to spatial objects"), (Object)ConstantBuilder.symbolBootstrap("symbol", "events"), (Object)VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "world_changed"), ConstantBuilder.symbolBootstrap("symbol", "coordinate_system_changed"), ConstantBuilder.symbolBootstrap("symbol", "display_scale_changed"), ConstantBuilder.symbolBootstrap("symbol", "spatial_objects_added"), ConstantBuilder.symbolBootstrap("symbol", "spatial_objects_removed"), ConstantBuilder.symbolBootstrap("symbol", "dataset_manager_added"), ConstantBuilder.symbolBootstrap("symbol", "dataset_manager_removed"), ConstantBuilder.symbolBootstrap("symbol", "visibility_changed")), (Object)ConstantBuilder.symbolBootstrap("symbol", "methods"), (Object)new Object[]{ConstantBuilder.symbolBootstrap("symbol", "select_world()"), ConstantBuilder.symbolBootstrap("symbol", "select_world_by_name()"), ConstantBuilder.symbolBootstrap("symbol", "get_world()"), ConstantBuilder.symbolBootstrap("symbol", "select_coordinate_system()"), ConstantBuilder.symbolBootstrap("symbol", "register_dynamic_spatial_object_data()"), ConstantBuilder.symbolBootstrap("symbol", "unregister_dynamic_spatial_object_data()"), ConstantBuilder.symbolBootstrap("symbol", "set_display_scale_for_viewing_scale()"), ConstantBuilder.symbolBootstrap("symbol", "get_dataset_manager_names()"), ConstantBuilder.symbolBootstrap("symbol", "get_dataset_manager()"), ConstantBuilder.symbolBootstrap("symbol", "get_rwo_status_for()"), ConstantBuilder.symbolBootstrap("symbol", "get_rwo_status_for_dataset_manager()"), ConstantBuilder.symbolBootstrap("symbol", "set_visibility()"), ConstantBuilder.symbolBootstrap("symbol", "set_visibility_override()"), ConstantBuilder.symbolBootstrap("symbol", "remove_visibility_override()"), ConstantBuilder.symbolBootstrap("symbol", "set_hittability()"), ConstantBuilder.symbolBootstrap("symbol", "set_selectability()"), ConstantBuilder.symbolBootstrap("symbol", "set_priority()"), ConstantBuilder.symbolBootstrap("symbol", "change_priority()"), ConstantBuilder.symbolBootstrap("symbol", "reset()"), ConstantBuilder.symbolBootstrap("symbol", "objects_contained_stream()"), ConstantBuilder.symbolBootstrap("symbol", "objects_overlapping_stream()"), ConstantBuilder.symbolBootstrap("symbol", "objects_contained()"), ConstantBuilder.symbolBootstrap("symbol", "objects_overlapping()"), ConstantBuilder.symbolBootstrap("symbol", "hit_list()"), ConstantBuilder.symbolBootstrap("symbol", "point_selection_candidates()")}, (Object)ConstantBuilder.symbolBootstrap("symbol", "properties"), (Object)VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "ace_name"), ConstantBuilder.symbolBootstrap("symbol", "soc_name"), ConstantBuilder.symbolBootstrap("symbol", "display_scale_name"), ConstantBuilder.symbolBootstrap("symbol", "display_scale_names"))));
        ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_event_signature()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "database_context_component"), (Object)ConstantBuilder.symbolBootstrap("symbol", "world_changed"), (Object)ConstantBuilder.stringBootstrap("string", "a different world has been selected"), (Object)VectorBuilder.bootstrap("vb", VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "world_name"), ConstantBuilder.symbolBootstrap("symbol", "string"), ConstantBuilder.stringBootstrap("string", "the name of the selected world")), VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "universe_name"), ConstantBuilder.symbolBootstrap("symbol", "string"), ConstantBuilder.stringBootstrap("string", "the name of the selected world's universe")))));
        ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_event_signature()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "database_context_component"), (Object)ConstantBuilder.symbolBootstrap("symbol", "coordinate_system_changed"), (Object)ConstantBuilder.stringBootstrap("string", "a different coordinate_system has been selected"), (Object)VectorBuilder.bootstrap("vb", VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "coordinate_system"), ConstantBuilder.symbolBootstrap("symbol", "object"), ConstantBuilder.stringBootstrap("string", "the selected coordinate system")))));
        ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_event_signature()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "database_context_component"), (Object)ConstantBuilder.symbolBootstrap("symbol", "display_scale_changed"), (Object)ConstantBuilder.stringBootstrap("string", "a different display_scale has been selected"), (Object)VectorBuilder.bootstrap("vb", VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "display_scale_name"), ConstantBuilder.symbolBootstrap("symbol", "string"), ConstantBuilder.stringBootstrap("string", "the name of the selected display_scale")))));
        ResultTuple cfr_ignored_5 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_event_signature()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "database_context_component"), (Object)ConstantBuilder.symbolBootstrap("symbol", "spatial_objects_added"), (Object)ConstantBuilder.stringBootstrap("string", "some spatial objects have been added"), (Object)VectorBuilder.bootstrap("vb", VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "sods"), ConstantBuilder.symbolBootstrap("symbol", "object"), ConstantBuilder.stringBootstrap("string", "a vector of spatial object descriptors")), VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "parent_sod"), ConstantBuilder.symbolBootstrap("symbol", "object"), ConstantBuilder.stringBootstrap("string", "an optional parent spatial object descriptor")))));
        ResultTuple cfr_ignored_6 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_event_signature()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "database_context_component"), (Object)ConstantBuilder.symbolBootstrap("symbol", "spatial_objects_removed"), (Object)ConstantBuilder.stringBootstrap("string", "some spatial objects have been removed"), (Object)VectorBuilder.bootstrap("vb", VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "sods"), ConstantBuilder.symbolBootstrap("symbol", "object"), ConstantBuilder.stringBootstrap("string", "a vector of spatial object descriptors")))));
        ResultTuple cfr_ignored_7 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_event_signature()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "database_context_component"), (Object)ConstantBuilder.symbolBootstrap("symbol", "dataset_manager_added"), (Object)ConstantBuilder.stringBootstrap("string", "a dataset manager has been added to the SOC"), (Object)VectorBuilder.bootstrap("vb", VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "dsm"), ConstantBuilder.symbolBootstrap("symbol", "object"), ConstantBuilder.stringBootstrap("string", "the new dataset manager")))));
        ResultTuple cfr_ignored_8 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_event_signature()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "database_context_component"), (Object)ConstantBuilder.symbolBootstrap("symbol", "dataset_manager_removed"), (Object)ConstantBuilder.stringBootstrap("string", "a dataset manager has been removed from the SOC"), (Object)VectorBuilder.bootstrap("vb", VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "dsm"), ConstantBuilder.symbolBootstrap("symbol", "object"), ConstantBuilder.stringBootstrap("string", "the removed dataset manager")))));
        ResultTuple cfr_ignored_9 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_event_signature()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "database_context_component"), (Object)ConstantBuilder.symbolBootstrap("symbol", "visibility_changed"), (Object)ConstantBuilder.stringBootstrap("string", "visibility, hittability, selectability, priority changes have occurred"), (Object)VectorBuilder.EMPTY_VECTOR));
        ResultTuple cfr_ignored_10 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_property()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "database_context_component"), (Object)ConstantBuilder.symbolBootstrap("symbol", "ace_name"), (Object)ConstantBuilder.symbolBootstrap("symbol", "string"), (Object)ConstantBuilder.stringBootstrap("string", "MANDATORY - the name of an ACE"), (Object)Boolean.TRUE, (Object)Boolean.FALSE, (Object)ConstantBuilder.stringBootstrap("string", "default")));
        ResultTuple cfr_ignored_11 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_property()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "database_context_component"), (Object)ConstantBuilder.symbolBootstrap("symbol", "soc_name"), (Object)ConstantBuilder.symbolBootstrap("symbol", "string"), (Object)ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "write_string"), ConstantBuilder.stringBootstrap("string", "OPTIONAL - the name of a SOC definition. "), ConstantBuilder.stringBootstrap("string", "If this is specified, the component will use the named SOC, "), ConstantBuilder.stringBootstrap("string", "otherwise, it will clone the application's SOC"), Boolean.FALSE, Boolean.FALSE, ConstantBuilder.stringBootstrap("string", "gis"))));
        ResultTuple cfr_ignored_12 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_property()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "database_context_component"), (Object)ConstantBuilder.symbolBootstrap("symbol", "dataset_names"), (Object)ConstantBuilder.symbolBootstrap("symbol", "vec"), (Object)ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "write_string"), ConstantBuilder.stringBootstrap("string", "OPTIONAL - a vector of names of datasets to be included"), ConstantBuilder.stringBootstrap("string", "If not specified, the all of the SOC's datasets will be included"))));
        ResultTuple cfr_ignored_13 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_property()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "database_context_component"), (Object)ConstantBuilder.symbolBootstrap("symbol", "selected_themes"), (Object)ConstantBuilder.symbolBootstrap("symbol", "object"), (Object)ConstantBuilder.stringBootstrap("string", "Themes selected for Rendering, Hitting and Selection")));
        MagikObjectUtils.createMethod("database_context_component", "ace_control", database_context_component_223.class, "database_context_component__ace_control_", 1, 1);
        MagikObjectUtils.createMethod("database_context_component", "ace", database_context_component_223.class, "database_context_component__ace_", 1, 1);
        MagikObjectUtils.createMethod("database_context_component", "spatial_object_controller", database_context_component_223.class, "database_context_component__spatial_object_controller_", 1, 1);
        ResultTuple cfr_ignored_14 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_method_signature()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "database_context_component"), (Object)ConstantBuilder.symbolBootstrap("symbol", "select_world_by_name()"), (Object)ConstantBuilder.symbolBootstrap("symbol", "unset"), (Object)ConstantBuilder.stringBootstrap("string", "Selects the named world for spatial access"), (Object)VectorBuilder.bootstrap("vb", VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "universe_name"), ConstantBuilder.symbolBootstrap("symbol", "string"), ConstantBuilder.stringBootstrap("string", "Universe name")), VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "world_name"), ConstantBuilder.symbolBootstrap("symbol", "string"), ConstantBuilder.stringBootstrap("string", "world name")), VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "dataset_names"), ConstantBuilder.symbolBootstrap("symbol", "arglist"), ConstantBuilder.stringBootstrap("string", "optional dataset names. Specifies which datasets will be included. Defaults to all")))));
        MagikObjectUtils.createMethod("database_context_component", "select_world_by_name()", database_context_component_223.class, "database_context_component__select_world_by_name", 4, 3);
        ResultTuple cfr_ignored_15 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_method_signature()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "database_context_component"), (Object)ConstantBuilder.symbolBootstrap("symbol", "select_world()"), (Object)ConstantBuilder.symbolBootstrap("symbol", "unset"), (Object)ConstantBuilder.stringBootstrap("string", "Selects the given world for spatial access"), (Object)VectorBuilder.bootstrap("vb", VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "a_world"), ConstantBuilder.symbolBootstrap("symbol", "object"), ConstantBuilder.stringBootstrap("string", "a world object")), VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "matching?"), ConstantBuilder.symbolBootstrap("symbol", "boolean"), ConstantBuilder.stringBootstrap("string", "match worlds in other datasets?")))));
        MagikObjectUtils.createMethod("database_context_component", "select_world()", database_context_component_223.class, "database_context_component__select_world", 3, 2);
        ResultTuple cfr_ignored_16 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_method_signature()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "database_context_component"), (Object)ConstantBuilder.symbolBootstrap("symbol", "get_world()"), (Object)ConstantBuilder.symbolBootstrap("symbol", "object"), (Object)ConstantBuilder.stringBootstrap("string", "Returns the named world from the named dataset"), (Object)VectorBuilder.bootstrap("vb", VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "dataset_name"), ConstantBuilder.symbolBootstrap("symbol", "string"), ConstantBuilder.stringBootstrap("string", "dataset name")), VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "universe_name"), ConstantBuilder.symbolBootstrap("symbol", "string"), ConstantBuilder.stringBootstrap("string", "universe name")), VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "world_name"), ConstantBuilder.symbolBootstrap("symbol", "string"), ConstantBuilder.stringBootstrap("string", "world name")))));
        MagikObjectUtils.createMethod("database_context_component", "get_world()", database_context_component_223.class, "database_context_component__get_world", 4, 4);
        ResultTuple cfr_ignored_17 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_method_signature()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "database_context_component"), (Object)ConstantBuilder.symbolBootstrap("symbol", "current_world()"), (Object)ConstantBuilder.symbolBootstrap("symbol", "object"), (Object)ConstantBuilder.stringBootstrap("string", "Returns the current world for spatial access and rendering"), (Object)VectorBuilder.EMPTY_VECTOR));
        MagikObjectUtils.createMethod("database_context_component", "current_world()", database_context_component_223.class, "database_context_component__current_world", 1, 1);
        ResultTuple cfr_ignored_18 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_method_signature()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "database_context_component"), (Object)ConstantBuilder.symbolBootstrap("symbol", "register_dynamic_spatial_object_data()"), (Object)ConstantBuilder.symbolBootstrap("symbol", "unset"), (Object)ConstantBuilder.stringBootstrap("string", "Dynamically registers Spatial Object Data to the dataset_manager"), (Object)VectorBuilder.bootstrap("vb", VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "sods"), ConstantBuilder.symbolBootstrap("symbol", "vector"), ConstantBuilder.stringBootstrap("string", "a vector of spatial object data cookies")), VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "parent"), ConstantBuilder.symbolBootstrap("symbol", "object"), ConstantBuilder.stringBootstrap("string", "Optional parent Sod cooky")))));
        MagikObjectUtils.createMethod("database_context_component", "register_dynamic_spatial_object_data()", database_context_component_223.class, "database_context_component__register_dynamic_spatial_object_data", 3, 2);
        ResultTuple cfr_ignored_19 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_method_signature()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "database_context_component"), (Object)ConstantBuilder.symbolBootstrap("symbol", "unregister_dynamic_spatial_object_data()"), (Object)ConstantBuilder.symbolBootstrap("symbol", "unset"), (Object)ConstantBuilder.stringBootstrap("string", "Dynamically unregisters Spatial Object Data from the dataset_manager"), (Object)VectorBuilder.bootstrap("vb", VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "sods"), ConstantBuilder.symbolBootstrap("symbol", "vector"), ConstantBuilder.stringBootstrap("string", "a vector of spatial object data cookies")))));
        MagikObjectUtils.createMethod("database_context_component", "unregister_dynamic_spatial_object_data()", database_context_component_223.class, "database_context_component__unregister_dynamic_spatial_object_data", 2, 2);
        ResultTuple cfr_ignored_20 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_method_signature()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "database_context_component"), (Object)ConstantBuilder.symbolBootstrap("symbol", "used_bounds"), (Object)ConstantBuilder.symbolBootstrap("symbol", "object"), (Object)ConstantBuilder.stringBootstrap("string", "Returns the overall bounds of the spatial data in the database as a bounding_box"), (Object)VectorBuilder.EMPTY_VECTOR));
        MagikObjectUtils.createMethod("database_context_component", "used_bounds", database_context_component_223.class, "database_context_component__used_bounds_", 1, 1);
        ResultTuple cfr_ignored_21 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_method_signature()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "database_context_component"), (Object)ConstantBuilder.symbolBootstrap("symbol", "set_visibility()"), (Object)ConstantBuilder.symbolBootstrap("symbol", "unset"), (Object)ConstantBuilder.stringBootstrap("string", "Sets visibility of spatial objects"), (Object)VectorBuilder.bootstrap("vb", VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "sods"), ConstantBuilder.symbolBootstrap("symbol", "vector"), ConstantBuilder.stringBootstrap("string", "Spatial Object Data Cookies")), VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "visible"), ConstantBuilder.symbolBootstrap("symbol", "boolean"), ConstantBuilder.stringBootstrap("string", "Visible flag")), VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "display_names"), ConstantBuilder.symbolBootstrap("symbol", "vector"), ConstantBuilder.stringBootstrap("string", "Optional display scale names. Specifies which display scales will be affected. Defaults to all")))));
        MagikObjectUtils.createMethod("database_context_component", "set_visibility()", database_context_component_223.class, "database_context_component__set_visibility", 4, 4);
        ResultTuple cfr_ignored_22 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_method_signature()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "database_context_component"), (Object)ConstantBuilder.symbolBootstrap("symbol", "set_visibility_override()"), (Object)ConstantBuilder.symbolBootstrap("symbol", "unset"), (Object)ConstantBuilder.stringBootstrap("string", "Sets visibility/priority override of spatial objects"), (Object)VectorBuilder.bootstrap("vb", VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "sods"), ConstantBuilder.symbolBootstrap("symbol", "vector"), ConstantBuilder.stringBootstrap("string", "Spatial Object Data Cookies")), VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "visible?"), ConstantBuilder.symbolBootstrap("symbol", "boolean"), ConstantBuilder.stringBootstrap("string", "Visibility override flag")), VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "priority"), ConstantBuilder.symbolBootstrap("symbol", "integer"), ConstantBuilder.stringBootstrap("string", "Optional priority at which sods will be rendered. Defaults to 0")))));
        MagikObjectUtils.createMethod("database_context_component", "set_visibility_override()", database_context_component_223.class, "database_context_component__set_visibility_override", 4, 4);
        ResultTuple cfr_ignored_23 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_method_signature()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "database_context_component"), (Object)ConstantBuilder.symbolBootstrap("symbol", "remove_visibility_override()"), (Object)ConstantBuilder.symbolBootstrap("symbol", "unset"), (Object)ConstantBuilder.stringBootstrap("string", "Removes visibility/priority override of spatial objects"), (Object)VectorBuilder.bootstrap("vb", VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "sods"), ConstantBuilder.symbolBootstrap("symbol", "vector"), ConstantBuilder.stringBootstrap("string", "Spatial Object Data Cookies")))));
        MagikObjectUtils.createMethod("database_context_component", "remove_visibility_override()", database_context_component_223.class, "database_context_component__remove_visibility_override", 4, 4);
        ResultTuple cfr_ignored_24 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_method_signature()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "database_context_component"), (Object)ConstantBuilder.symbolBootstrap("symbol", "set_selectability()"), (Object)ConstantBuilder.symbolBootstrap("symbol", "unset"), (Object)ConstantBuilder.stringBootstrap("string", "Sets selectability of spatial objects"), (Object)VectorBuilder.bootstrap("vb", VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "sods"), ConstantBuilder.symbolBootstrap("symbol", "vector"), ConstantBuilder.stringBootstrap("string", "Spatial Object Data Cookies")), VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "selectable"), ConstantBuilder.symbolBootstrap("symbol", "boolean"), ConstantBuilder.stringBootstrap("string", "selectable flag")), VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "display_names"), ConstantBuilder.symbolBootstrap("symbol", "vector"), ConstantBuilder.stringBootstrap("string", "Optional display scale names. Specifies which display scales will be affected. Defaults to all")))));
        MagikObjectUtils.createMethod("database_context_component", "set_selectability()", database_context_component_223.class, "database_context_component__set_selectability", 4, 4);
        ResultTuple cfr_ignored_25 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_method_signature()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "database_context_component"), (Object)ConstantBuilder.symbolBootstrap("symbol", "set_hittability()"), (Object)ConstantBuilder.symbolBootstrap("symbol", "unset"), (Object)ConstantBuilder.stringBootstrap("string", "Sets hittability of spatial object"), (Object)VectorBuilder.bootstrap("vb", VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "sods"), ConstantBuilder.symbolBootstrap("symbol", "vector"), ConstantBuilder.stringBootstrap("string", "Spatial Object Data Cookies")), VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "hittable"), ConstantBuilder.symbolBootstrap("symbol", "boolean"), ConstantBuilder.stringBootstrap("string", "Hittable flag")), VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "display_names"), ConstantBuilder.symbolBootstrap("symbol", "vector"), ConstantBuilder.stringBootstrap("string", "optional display scale names. Specifies which display scales will be affected. Defaults to all")))));
        MagikObjectUtils.createMethod("database_context_component", "set_hittability()", database_context_component_223.class, "database_context_component__set_hittability", 4, 4);
        ResultTuple cfr_ignored_26 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_method_signature()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "database_context_component"), (Object)ConstantBuilder.symbolBootstrap("symbol", "get_rwo_status_for()"), (Object)ConstantBuilder.symbolBootstrap("symbol", "object"), (Object)ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "write_string"), ConstantBuilder.stringBootstrap("string", "Returns visibility, hitability and selectability information for the named display scale. "), ConstantBuilder.stringBootstrap("string", "Returns a property_list keyed on dataset_manager. The elements are vhs_trees "), ConstantBuilder.stringBootstrap("string", "containing visibility, hitability and selectability information")), (Object)VectorBuilder.bootstrap("vb", VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "display_scale_name"), ConstantBuilder.symbolBootstrap("symbol", "string"), ConstantBuilder.stringBootstrap("string", "display scale name")))));
        MagikObjectUtils.createMethod("database_context_component", "get_rwo_status_for()", database_context_component_223.class, "database_context_component__get_rwo_status_for", 2, 2);
        ResultTuple cfr_ignored_27 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_method_signature()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "database_context_component"), (Object)ConstantBuilder.symbolBootstrap("symbol", "set_priority()"), (Object)ConstantBuilder.symbolBootstrap("symbol", "unset"), (Object)ConstantBuilder.stringBootstrap("string", "Sets the priority of the given spatial objects for the named display scales."), (Object)VectorBuilder.bootstrap("vb", VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "spatial_object_descriptors"), ConstantBuilder.symbolBootstrap("symbol", "vector"), ConstantBuilder.stringBootstrap("string", "a vector of descriptors of spatial objects")), VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "priority"), ConstantBuilder.symbolBootstrap("symbol", "integer"), ConstantBuilder.stringBootstrap("string", "the required priority ( a non-negative integer)")), VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "display_scale_names"), ConstantBuilder.symbolBootstrap("symbol", "vector"), ConstantBuilder.stringBootstrap("string", "a vector of display scale names (defaults to all if empty)")))));
        MagikObjectUtils.createMethod("database_context_component", "set_priority()", database_context_component_223.class, "database_context_component__set_priority", 4, 4);
        ResultTuple cfr_ignored_28 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_method_signature()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "database_context_component"), (Object)ConstantBuilder.symbolBootstrap("symbol", "change_priority()"), (Object)ConstantBuilder.symbolBootstrap("symbol", "unset"), (Object)ConstantBuilder.stringBootstrap("string", "Changes the priority of the given spatial objects for the named display scales."), (Object)VectorBuilder.bootstrap("vb", VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "spatial_object_descriptors"), ConstantBuilder.symbolBootstrap("symbol", "vector"), ConstantBuilder.stringBootstrap("string", "a vector of descriptors of spatial objects")), VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "priority_change"), ConstantBuilder.symbolBootstrap("symbol", "integer"), ConstantBuilder.stringBootstrap("string", "the required change in priority ( integer)")), VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "display_scale_names"), ConstantBuilder.symbolBootstrap("symbol", "vector"), ConstantBuilder.stringBootstrap("string", "a vector of display scale names (defaults to all if empty)")))));
        MagikObjectUtils.createMethod("database_context_component", "change_priority()", database_context_component_223.class, "database_context_component__change_priority", 4, 4);
        ResultTuple cfr_ignored_29 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_method_signature()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "database_context_component"), (Object)ConstantBuilder.symbolBootstrap("symbol", "set_display_scale_for_viewing_scale()"), (Object)ConstantBuilder.symbolBootstrap("symbol", "unset"), (Object)ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "write_string"), ConstantBuilder.stringBootstrap("string", "Sets the current display scale by looking up the mapping"), ConstantBuilder.stringBootstrap("string", "between actual viewing scale ranges and display scales.")), (Object)VectorBuilder.bootstrap("vb", VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "viewing_scale"), ConstantBuilder.symbolBootstrap("symbol", "integer"), ConstantBuilder.stringBootstrap("string", "nominal viewing scale")))));
        MagikObjectUtils.createMethod("database_context_component", "set_display_scale_for_viewing_scale()", database_context_component_223.class, "database_context_component__set_display_scale_for_viewing_scale", 2, 2);
        ResultTuple cfr_ignored_30 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_property_signature()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "database_context_component"), (Object)ConstantBuilder.symbolBootstrap("symbol", "display_scale_name"), (Object)ConstantBuilder.symbolBootstrap("symbol", "string"), (Object)ConstantBuilder.stringBootstrap("string", "set/get the name of the current display scale")));
        MagikObjectUtils.createMethod("database_context_component", "display_scale_name<<", database_context_component_223.class, "database_context_component__display_scale_name\\l\\l_", 2, 2);
        MagikObjectUtils.createMethod("database_context_component", "display_scale_name", database_context_component_223.class, "database_context_component__display_scale_name_", 1, 1);
        MagikObjectUtils.createMethod("database_context_component", "display_scale", database_context_component_223.class, "database_context_component__display_scale_", 1, 1, false, false, true, 0);
        MagikObjectUtils.createMethod("database_context_component", "display_scale<<", database_context_component_223.class, "database_context_component__display_scale\\l\\l_", 2, 2, false, false, true, 0);
        ResultTuple cfr_ignored_31 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_property_signature()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "database_context_component"), (Object)ConstantBuilder.symbolBootstrap("symbol", "display_scale_names"), (Object)ConstantBuilder.symbolBootstrap("symbol", "object"), (Object)ConstantBuilder.stringBootstrap("string", "A vector of display scale names")));
        MagikObjectUtils.createMethod("database_context_component", "display_scale_names", database_context_component_223.class, "database_context_component__display_scale_names_", 1, 1);
        MagikObjectUtils.createMethod("database_context_component", "display_scale_names<<", database_context_component_223.class, "database_context_component__display_scale_names\\l\\l_", 2, 2);
        ResultTuple cfr_ignored_32 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_method_signature()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "database_context_component"), (Object)ConstantBuilder.symbolBootstrap("symbol", "objects_contained_stream()"), (Object)ConstantBuilder.symbolBootstrap("symbol", "object"), (Object)ConstantBuilder.stringBootstrap("string", "Returns an elements_stream on geometries contained by the given bounding box"), (Object)VectorBuilder.bootstrap("vb", VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "x1"), ConstantBuilder.symbolBootstrap("symbol", "float"), ConstantBuilder.stringBootstrap("string", "x ordinate of first corner of box")), VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "y1"), ConstantBuilder.symbolBootstrap("symbol", "loat"), ConstantBuilder.stringBootstrap("string", "y ordinate of first corner of box")), VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "x2"), ConstantBuilder.symbolBootstrap("symbol", "float"), ConstantBuilder.stringBootstrap("string", "x ordinate of second corner of box")), VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "y2"), ConstantBuilder.symbolBootstrap("symbol", "float"), ConstantBuilder.stringBootstrap("string", "y ordinate of second cornder of box")))));
        MagikObjectUtils.createMethod("database_context_component", "objects_contained_stream()", database_context_component_223.class, "database_context_component__objects_contained_stream", 5, 5);
        ResultTuple cfr_ignored_33 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_method_signature()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "database_context_component"), (Object)ConstantBuilder.symbolBootstrap("symbol", "objects_overlapping_stream()"), (Object)ConstantBuilder.symbolBootstrap("symbol", "object"), (Object)ConstantBuilder.stringBootstrap("string", "Returns an elements_stream on geometries contained in the given box"), (Object)VectorBuilder.bootstrap("vb", VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "x1"), ConstantBuilder.symbolBootstrap("symbol", "float"), ConstantBuilder.stringBootstrap("string", "x ordinate of first corner of box")), VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "y1"), ConstantBuilder.symbolBootstrap("symbol", "loat"), ConstantBuilder.stringBootstrap("string", "y ordinate of first corner of box")), VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "x2"), ConstantBuilder.symbolBootstrap("symbol", "float"), ConstantBuilder.stringBootstrap("string", "x ordinate of second corner of box")), VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "y2"), ConstantBuilder.symbolBootstrap("symbol", "float"), ConstantBuilder.stringBootstrap("string", "y ordinate of second cornder of box")))));
        MagikObjectUtils.createMethod("database_context_component", "objects_overlapping_stream()", database_context_component_223.class, "database_context_component__objects_overlapping_stream", 5, 5);
        MagikObjectUtils.createMethod("database_context_component", "all_objects_overlapping()", database_context_component_223.class, "database_context_component__all_objects_overlapping", 7, 7, true, false, false, 0);
        MagikObjectUtils.createMethod("database_context_component", "all_objects_contained()", database_context_component_223.class, "database_context_component__all_objects_contained", 7, 7, true, false, false, 0);
        ResultTuple cfr_ignored_34 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_method_signature()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "database_context_component"), (Object)ConstantBuilder.symbolBootstrap("symbol", "objects_contained()"), (Object)ConstantBuilder.symbolBootstrap("symbol", "object"), (Object)ConstantBuilder.stringBootstrap("string", ""), (Object)VectorBuilder.bootstrap("vb", VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "x1"), ConstantBuilder.symbolBootstrap("symbol", "float"), ConstantBuilder.stringBootstrap("string", "x ordinate of first corner of box")), VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "y1"), ConstantBuilder.symbolBootstrap("symbol", "loat"), ConstantBuilder.stringBootstrap("string", "y ordinate of first corner of box")), VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "x2"), ConstantBuilder.symbolBootstrap("symbol", "float"), ConstantBuilder.stringBootstrap("string", "x ordinate of second corner of box")), VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "y2"), ConstantBuilder.symbolBootstrap("symbol", "float"), ConstantBuilder.stringBootstrap("string", "y ordinate of second cornder of box")), VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "max_num"), ConstantBuilder.symbolBootstrap("symbol", "integer"), ConstantBuilder.stringBootstrap("string", "maximum number of objects to return")))));
        MagikObjectUtils.createMethod("database_context_component", "objects_contained()", database_context_component_223.class, "database_context_component__objects_contained", 6, 6);
        ResultTuple cfr_ignored_35 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_method_signature()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "database_context_component"), (Object)ConstantBuilder.symbolBootstrap("symbol", "objects_overlapping()"), (Object)ConstantBuilder.symbolBootstrap("symbol", "object"), (Object)ConstantBuilder.stringBootstrap("string", "Returns the overall bounds of the spatial data in the database as a bounding_box"), (Object)VectorBuilder.bootstrap("vb", VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "x1"), ConstantBuilder.symbolBootstrap("symbol", "float"), ConstantBuilder.stringBootstrap("string", "x ordinate of first corner of box")), VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "y1"), ConstantBuilder.symbolBootstrap("symbol", "loat"), ConstantBuilder.stringBootstrap("string", "y ordinate of first corner of box")), VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "x2"), ConstantBuilder.symbolBootstrap("symbol", "float"), ConstantBuilder.stringBootstrap("string", "x ordinate of second corner of box")), VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "y2"), ConstantBuilder.symbolBootstrap("symbol", "float"), ConstantBuilder.stringBootstrap("string", "y ordinate of second cornder of box")), VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "max_num"), ConstantBuilder.symbolBootstrap("symbol", "integer"), ConstantBuilder.stringBootstrap("string", "maximum number of objects to return")))));
        MagikObjectUtils.createMethod("database_context_component", "objects_overlapping()", database_context_component_223.class, "database_context_component__objects_overlapping", 6, 6);
        ResultTuple cfr_ignored_36 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_shared_constant()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "database_context_component"), (Object)ConstantBuilder.symbolBootstrap("symbol", "hit_types"), (Object)Invoker.bootstrap("new_with()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "property_list"), ConstantBuilder.symbolBootstrap("symbol", "near"), BinaryDispatcher.bootstrap("**", Integer.valueOf(2), Integer.valueOf(10)), ConstantBuilder.symbolBootstrap("symbol", "con"), BinaryDispatcher.bootstrap("**", Integer.valueOf(2), Integer.valueOf(9)), ConstantBuilder.symbolBootstrap("symbol", "centre"), BinaryDispatcher.bootstrap("**", Integer.valueOf(2), Integer.valueOf(8)), ConstantBuilder.symbolBootstrap("symbol", "intersection"), BinaryDispatcher.bootstrap("**", Integer.valueOf(2), Integer.valueOf(7)), ConstantBuilder.symbolBootstrap("symbol", "tangent"), BinaryDispatcher.bootstrap("**", Integer.valueOf(2), Integer.valueOf(6)), ConstantBuilder.symbolBootstrap("symbol", "perpendicular"), BinaryDispatcher.bootstrap("**", Integer.valueOf(2), Integer.valueOf(5)), ConstantBuilder.symbolBootstrap("symbol", "mid"), BinaryDispatcher.bootstrap("**", Integer.valueOf(2), Integer.valueOf(4)), ConstantBuilder.symbolBootstrap("symbol", "segment"), BinaryDispatcher.bootstrap("**", Integer.valueOf(2), Integer.valueOf(3)), ConstantBuilder.symbolBootstrap("symbol", "protractor_rel"), BinaryDispatcher.bootstrap("**", Integer.valueOf(2), Integer.valueOf(2)), ConstantBuilder.symbolBootstrap("symbol", "protractor_abs"), BinaryDispatcher.bootstrap("**", Integer.valueOf(2), Integer.valueOf(1)), ConstantBuilder.symbolBootstrap("symbol", "grid"), BinaryDispatcher.bootstrap("**", Integer.valueOf(2), Integer.valueOf(0)), ConstantBuilder.symbolBootstrap("symbol", "free"), Integer.valueOf(0), ConstantBuilder.symbolBootstrap("symbol", "all"), BinaryDispatcher.bootstrap("-", BinaryDispatcher.bootstrap("**", Integer.valueOf(2), Integer.valueOf(11)), Integer.valueOf(1))), (Object)ConstantBuilder.symbolBootstrap("symbol", "private")));
        MagikObjectUtils.createMethod("database_context_component", "hit_type_vector()", database_context_component_223.class, "database_context_component__hit_type_vector", 2, 2, false, false, true, 0);
        ResultTuple cfr_ignored_37 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_method_signature()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "database_context_component"), (Object)ConstantBuilder.symbolBootstrap("symbol", "hit_list()"), (Object)ConstantBuilder.symbolBootstrap("symbol", "object"), (Object)ConstantBuilder.stringBootstrap("string", "Returns a list of geometries near the given coordinate"), (Object)VectorBuilder.bootstrap("vb", VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "x"), ConstantBuilder.symbolBootstrap("symbol", "float"), ConstantBuilder.stringBootstrap("string", "x ordinate of the probe")), VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "y"), ConstantBuilder.symbolBootstrap("symbol", "float"), ConstantBuilder.stringBootstrap("string", "y ordinate of the probe")), VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "hitrad"), ConstantBuilder.symbolBootstrap("symbol", "fload"), ConstantBuilder.stringBootstrap("string", "hit radius")), VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "max_num"), ConstantBuilder.symbolBootstrap("symbol", "integer"), ConstantBuilder.stringBootstrap("string", "maximum number of candidates to return")), VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "hit_types"), ConstantBuilder.symbolBootstrap("symbol", "vector"), ConstantBuilder.stringBootstrap("string", "vector of 11 integers. Each element represents a probe type")), VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "perp_x"), ConstantBuilder.symbolBootstrap("symbol", "float"), ConstantBuilder.stringBootstrap("string", "for perpendicular probes")), VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "perp_y"), ConstantBuilder.symbolBootstrap("symbol", "float"), ConstantBuilder.stringBootstrap("string", "for perpendicular probes")))));
        MagikObjectUtils.createMethod("database_context_component", "hit_list()", database_context_component_223.class, "database_context_component__hit_list", 8, 8);
        ResultTuple cfr_ignored_38 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_method_signature()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "database_context_component"), (Object)ConstantBuilder.symbolBootstrap("symbol", "collection()"), (Object)ConstantBuilder.symbolBootstrap("symbol", "object"), (Object)ConstantBuilder.stringBootstrap("string", "Returns a database collection"), (Object)VectorBuilder.bootstrap("vb", VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "dataset_name"), ConstantBuilder.symbolBootstrap("symbol", "string"), ConstantBuilder.stringBootstrap("string", "the name of the collection's dataset")), VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "collection_name"), ConstantBuilder.symbolBootstrap("symbol", "string"), ConstantBuilder.stringBootstrap("string", "the name of the collection")))));
        MagikObjectUtils.createMethod("database_context_component", "collection()", database_context_component_223.class, "database_context_component__collection", 3, 3);
        ResultTuple cfr_ignored_39 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_method_signature()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "database_context_component"), (Object)ConstantBuilder.symbolBootstrap("symbol", "commit()"), (Object)ConstantBuilder.symbolBootstrap("symbol", "unset"), (Object)ConstantBuilder.stringBootstrap("string", "Commits changes to the database"), (Object)VectorBuilder.EMPTY_VECTOR));
        MagikObjectUtils.createMethod("database_context_component", "commit()", database_context_component_223.class, "database_context_component__commit", 1, 1);
        ResultTuple cfr_ignored_40 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_method_signature()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "database_context_component"), (Object)ConstantBuilder.symbolBootstrap("symbol", "rollback()"), (Object)ConstantBuilder.symbolBootstrap("symbol", "unset"), (Object)ConstantBuilder.stringBootstrap("string", "Rolls back the database, discarding all changes since the last commit"), (Object)VectorBuilder.EMPTY_VECTOR));
        MagikObjectUtils.createMethod("database_context_component", "rollback()", database_context_component_223.class, "database_context_component__rollback", 1, 1);
        ResultTuple cfr_ignored_41 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_method_signature()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "database_context_component"), (Object)ConstantBuilder.symbolBootstrap("symbol", "rollforward()"), (Object)ConstantBuilder.symbolBootstrap("symbol", "unset"), (Object)ConstantBuilder.stringBootstrap("string", "Makes the most up to date version of the current alternative visible"), (Object)VectorBuilder.EMPTY_VECTOR));
        MagikObjectUtils.createMethod("database_context_component", "rollforward()", database_context_component_223.class, "database_context_component__rollforward", 1, 1);
        ResultTuple cfr_ignored_42 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_method_signature()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "database_context_component"), (Object)ConstantBuilder.symbolBootstrap("symbol", "writable?"), (Object)ConstantBuilder.symbolBootstrap("symbol", "object"), (Object)ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "write_string"), ConstantBuilder.stringBootstrap("string", "Returns kleenean depending on writability of all datasets:"), ConstantBuilder.stringBootstrap("string", "True  -> all datasets writable,"), ConstantBuilder.stringBootstrap("string", "False -> no writable datasets"), ConstantBuilder.stringBootstrap("string", "Maybe -> some datasets (at least one) writable")), (Object)VectorBuilder.EMPTY_VECTOR));
        MagikObjectUtils.createMethod("database_context_component", "writable?", database_context_component_223.class, "database_context_component__writable?_", 1, 1);
        MagikObjectUtils.createMethod("database_context_component", "render_map()", database_context_component_223.class, "database_context_component__render_map", 3, 3);
        MagikObjectUtils.createMethod("database_context_component", "render_data()", database_context_component_223.class, "database_context_component__render_data", 3, 3, false, false, true, 0);
        MagikObjectUtils.createMethod("database_context_component", "draw_object_on()", database_context_component_223.class, "database_context_component__draw_object_on", 5, 3);
        MagikObjectUtils.createMethod("database_context_component", "undraw_object_on()", database_context_component_223.class, "database_context_component__undraw_object_on", 5, 3);
        MagikObjectUtils.createMethod("database_context_component", "int!draw_object_on()", database_context_component_223.class, "database_context_component__int!draw_object_on", 6, 5, false, false, true, 0);
        MagikObjectUtils.createMethod("database_context_component", "current_dsview", database_context_component_223.class, "database_context_component__current_dsview_", 1, 1);
        MagikObjectUtils.createMethod("database_context_component", "style_dsview", database_context_component_223.class, "database_context_component__style_dsview_", 1, 1);
        ResultTuple cfr_ignored_43 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_shared_constant()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "database_context_component"), (Object)ConstantBuilder.symbolBootstrap("symbol", "selection_order_proc"), (Object)ConstantBuilder.procWithEmptyEnvBootstrap("proc", (Class<?>)database_context_component_223.class, "proc__selection_order_proc_", "selection_order_proc", 3, 3, 0, 0), (Object)ConstantBuilder.symbolBootstrap("symbol", "private")));
        ResultTuple cfr_ignored_44 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_method_signature()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "database_context_component"), (Object)ConstantBuilder.symbolBootstrap("symbol", "point_selection_candidates()"), (Object)ConstantBuilder.symbolBootstrap("symbol", "object"), (Object)ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "write_string"), ConstantBuilder.stringBootstrap("string", "Finds geometries within range of a coordinate. "), ConstantBuilder.stringBootstrap("string", "Returns a sorted_collection of elements of the form: "), ConstantBuilder.stringBootstrap("string", " {distance,geom}. Elements are ordered by distance, "), ConstantBuilder.stringBootstrap("string", "nearest first.")), (Object)VectorBuilder.bootstrap("vb", VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "x"), ConstantBuilder.symbolBootstrap("symbol", "float"), ConstantBuilder.stringBootstrap("string", "x ordinate of the probe")), VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "y"), ConstantBuilder.symbolBootstrap("symbol", "float"), ConstantBuilder.stringBootstrap("string", "y ordinate of the probe")), VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "range"), ConstantBuilder.symbolBootstrap("symbol", "float"), ConstantBuilder.stringBootstrap("string", "selection range")), VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "geom_category"), ConstantBuilder.symbolBootstrap("symbol", "string"), ConstantBuilder.stringBootstrap("string", "the name of a geom category. An empty string means all categories except raster.")), VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "max_num"), ConstantBuilder.symbolBootstrap("symbol", "integer"), ConstantBuilder.stringBootstrap("string", "the maximum number of candidates to return")))));
        MagikObjectUtils.createMethod("database_context_component", "point_selection_candidates()", database_context_component_223.class, "database_context_component__point_selection_candidates", 6, 6);
        ResultTuple cfr_ignored_45 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_method_signature()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "database_context_component"), (Object)ConstantBuilder.symbolBootstrap("symbol", "get_dataset_manager_names()"), (Object)ConstantBuilder.symbolBootstrap("symbol", "object"), (Object)ConstantBuilder.stringBootstrap("string", "Returns a vector of names of dataset managers"), (Object)VectorBuilder.EMPTY_VECTOR));
        MagikObjectUtils.createMethod("database_context_component", "get_dataset_manager_names()", database_context_component_223.class, "database_context_component__get_dataset_manager_names", 1, 1);
        MagikObjectUtils.createMethod("spatial_object_controller", "dataset_manager_names", database_context_component_223.class, "spatial_object_controller__dataset_manager_names_", 1, 1);
        ResultTuple cfr_ignored_46 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_method_signature()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "database_context_component"), (Object)ConstantBuilder.symbolBootstrap("symbol", "get_rwo_status_for_dataset_manager()"), (Object)ConstantBuilder.symbolBootstrap("symbol", "object"), (Object)ConstantBuilder.stringBootstrap("string", "Returns a VHS tree for a dataset manager"), (Object)VectorBuilder.bootstrap("vb", VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "dataset_manager_name"), ConstantBuilder.symbolBootstrap("symbol", "string"), ConstantBuilder.stringBootstrap("string", "the name of a dataset_manager")), VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "display_scale_name"), ConstantBuilder.symbolBootstrap("symbol", "string"), ConstantBuilder.stringBootstrap("string", "a display scale name")))));
        MagikObjectUtils.createMethod("database_context_component", "get_rwo_status_for_dataset_manager()", database_context_component_223.class, "database_context_component__get_rwo_status_for_dataset_manager", 3, 3);
        ResultTuple cfr_ignored_47 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_method_signature()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "database_context_component"), (Object)ConstantBuilder.symbolBootstrap("symbol", "get_dataset_manager()"), (Object)ConstantBuilder.symbolBootstrap("symbol", "object"), (Object)ConstantBuilder.stringBootstrap("string", "Returns the named dataset_manager"), (Object)VectorBuilder.bootstrap("vb", VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "name"), ConstantBuilder.symbolBootstrap("symbol", "string"), ConstantBuilder.stringBootstrap("string", "name of required dataset manager")))));
        MagikObjectUtils.createMethod("database_context_component", "get_dataset_manager()", database_context_component_223.class, "database_context_component__get_dataset_manager", 2, 2);
        MagikObjectUtils.createMethod("database_context_component", "note_change()", database_context_component_223.class, "database_context_component__note_change", 4, 3);
        ResultTuple cfr_ignored_48 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_method_signature()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "database_context_component"), (Object)ConstantBuilder.symbolBootstrap("symbol", "reset()"), (Object)ConstantBuilder.symbolBootstrap("symbol", "unset"), (Object)ConstantBuilder.stringBootstrap("string", "Resets visibilities, hittabilities, selectabilities and priority from the ACE "), (Object)VectorBuilder.EMPTY_VECTOR));
        MagikObjectUtils.createMethod("database_context_component", "reset()", database_context_component_223.class, "database_context_component__reset", 1, 1);
        MagikObjectUtils.createMethod("database_context_component", "terminate()", database_context_component_223.class, "database_context_component__terminate", 1, 1);
        MagikObjectUtils.createMethod("database_context_component", "coordinate_system", database_context_component_223.class, "database_context_component__coordinate_system_", 1, 1);
        MagikObjectUtils.createMethod("database_context_component", "coordinate_system<<", database_context_component_223.class, "database_context_component__coordinate_system\\l\\l_", 2, 2, false, false, true, 0);
        ResultTuple cfr_ignored_49 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_method_signature()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "database_context_component"), (Object)ConstantBuilder.symbolBootstrap("symbol", "select_coordinate_system()"), (Object)ConstantBuilder.symbolBootstrap("symbol", "unset"), (Object)ConstantBuilder.stringBootstrap("string", "Selects the given coordinate_system as the coordinate system in which data will be accessed."), (Object)VectorBuilder.bootstrap("vb", VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "a_coordinate_system"), ConstantBuilder.symbolBootstrap("symbol", "object"), ConstantBuilder.stringBootstrap("string", "a coordinate_system magik object")))));
        MagikObjectUtils.createMethod("database_context_component", "select_coordinate_system()", database_context_component_223.class, "database_context_component__select_coordinate_system", 2, 2);
        ResultTuple cfr_ignored_50 = (ResultTuple)((Object)Invoker.tupleBootstrap("define_slot_access()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "database_context_component"), (Object)ConstantBuilder.symbolBootstrap("symbol", "coordinate_system"), (Object)ConstantBuilder.symbolBootstrap("symbol", "read"), (Object)ConstantBuilder.symbolBootstrap("symbol", "public")));
        MagikObjectUtils.createMethod("database_context_component", "field_print_width()", database_context_component_223.class, "database_context_component__field_print_width", 3, 3);
        MagikObjectUtils.createMethod("database_context_component", "table_non_geometry_visible_field_names()", database_context_component_223.class, "database_context_component__table_non_geometry_visible_field_names", 4, 2);
        MagikObjectUtils.createMethod("database_context_component", "table_non_geometry_visible_fields()", database_context_component_223.class, "database_context_component__table_non_geometry_visible_fields", 4, 2);
        MagikObjectUtils.createMethod("database_context_component", "table_visible_fields()", database_context_component_223.class, "database_context_component__table_visible_fields", 4, 2);
        MagikObjectUtils.createMethod("database_context_component", "table_visible_field_names()", database_context_component_223.class, "database_context_component__table_visible_field_names", 4, 2);
        MagikObjectUtils.createMethod("database_context_component", "field_default_value()", database_context_component_223.class, "database_context_component__field_default_value", 3, 3);
        MagikObjectUtils.createMethod("database_context_component", "objects_interacting_stream()", database_context_component_223.class, "database_context_component__objects_interacting_stream", 5, 5);
        MagikObjectUtils.createMethod("database_context_component", "all_objects_interacting_with()", database_context_component_223.class, "database_context_component__all_objects_interacting_with", 7, 7, true, false, false, 0);
        MagikObjectUtils.createMethod("database_context_component", "objects_interacting_with()", database_context_component_223.class, "database_context_component__objects_interacting_with", 6, 6);
        MagikObjectUtils.createMethod("database_context_component", "setup_themes()", database_context_component_223.class, "database_context_component__setup_themes", 1, 1, false, false, true, 0);
        MagikObjectUtils.createMethod("database_context_component", "ace_name<<", database_context_component_223.class, "database_context_component__ace_name\\l\\l_", 2, 2);
        MagikObjectUtils.createMethod("database_context_component", "ace<<", database_context_component_223.class, "database_context_component__ace\\l\\l_", 2, 2);
        MagikObjectUtils.createMethod("database_context_component", "selected_themes<<", database_context_component_223.class, "database_context_component__selected_themes\\l\\l_", 2, 2);
        MagikObjectUtils.createMethod("database_context_component", "selection_score()", database_context_component_223.class, "database_context_component__selection_score", 4, 4, false, false, true, 0);
        return TupleBuilder.bootstrap("tb", MagikObjectUtils.createMethod("database_context_component", "select_version_for_dataset()", database_context_component_223.class, "database_context_component__select_version_for_dataset", 3, 3));
    }

    @Override
    public void preload() {
    }
}

#############
#############
