## jpn_method_test_simple_catch_throw
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_3861 {
    @SourceHash(value=-1479963659)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object deco_test__test_simple_catch_throw(Object _self) {
        DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
        CallSite callSite = ConstantBuilder.globalAccessorBootstrap("findCell", "user", "ball");
        DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
        try {
            try {
                ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("run1()", (Object)_self));
                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("test?", (Object)_self))) {
                    InterruptInfrastructure.checkAndProcessInterrupts();
                    throw Thrower.make(ConstantBuilder.globalAccessorBootstrap("findCell", "user", "ball"), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", null)));
                }
                ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("run2()", (Object)_self));
                ProcInvoker.naturalBootstrap("()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "show"), (Object)ConstantBuilder.stringBootstrap("string", "ball"));
            }
            catch (Thrower.Throw throw_) {
                Thrower.checkTag(throw_, callSite);
            }
        }
        catch (Throwable throwable) {
            DynamicScope.destroyFrame();
            throw throwable;
        }
        DynamicScope.destroyFrame();
        return ResultTuple.EMPTY_TUPLE;
    }
}


@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_3860
implements ExecutableMagik {
    @Debugger(value="MagikDebug")
    @CodeType(value="EmptyConstructor")
    public deco_test_3860() {
    }

    @Override
    @Debugger(value="MagikDebug")
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "test_simple_catch_throw()", deco_test_3861.class, "deco_test__test_simple_catch_throw", 1, 1);
    }
}
###########
_pragma(classify_level=restricted, topic={jar_decompiler})
_method deco_test.test_simple_catch_throw()
	## 
	_catch @ball
		_self.run1()
		_if _self.test? _then _throw @ball _endif 
		_self.run2()
		show("ball")
	_endcatch
_endmethod
$
###########
## jpn_method_test_simple_catch_throw_with_gather_result
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_3861 {
    @SourceHash(value=3072222)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object deco_test__test_simple_catch_throw_with_result(Object _self) {
        Object object;
        DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
        CallSite callSite = ConstantBuilder.globalAccessorBootstrap("findCell", "user", "ball");
        DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
        try {
            try {
                ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("run1()", (Object)_self));
                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("test?", (Object)_self))) {
                    InterruptInfrastructure.checkAndProcessInterrupts();
                    throw Thrower.make(ConstantBuilder.globalAccessorBootstrap("findCell", "user", "ball"), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", ConstantBuilder.stringBootstrap("string", "waarde"))));
                }
                ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("run2()", (Object)_self));
                object = null;
            }
            catch (Thrower.Throw throw_) {
                Object object2;
                object = object2 = Thrower.checkTag(throw_, callSite).peek();
            }
        }
        catch (Throwable throwable) {
            DynamicScope.destroyFrame();
            throw throwable;
        }
        DynamicScope.destroyFrame();
        Object res = object;
        ProcInvoker.naturalBootstrap("()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "show"), (Object)res);
        return ResultTuple.EMPTY_TUPLE;
    }
}


@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_3860
implements ExecutableMagik {
    @Debugger(value="MagikDebug")
    @CodeType(value="EmptyConstructor")
    public deco_test_3860() {
    }

    @Override
    @Debugger(value="MagikDebug")
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "test_simple_catch_throw_with_result()", deco_test_3861.class, "deco_test__test_simple_catch_throw_with_result", 1, 1);
    }
}
###########
_pragma(classify_level=restricted, topic={jar_decompiler})
_method deco_test.test_simple_catch_throw_with_result()
	## 
	_local res << _catch @ball
			      _self.run1()
			      _if _self.test? _then _throw @ball _with "waarde" _endif 
			      _self.run2()
		      _endcatch
	show(res)
_endmethod
$
###########
## jpn_method_test_simple_catch_throw_with_result
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_3861 {
    @SourceHash(value=185250139)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object deco_test__test_simple_catch_throw_with_gather_result(Object _self) {
        Object object;
        DynamicAccessor.bootstrapBinder("__catch_tags_dynamic__", "sw", 1);
        CallSite callSite = ConstantBuilder.globalAccessorBootstrap("findCell", "user", "ball");
        DynamicAccessor.bootstrapStorer("__catch_tags_dynamic__", "sw", (Object)callSite);
        try {
            try {
                ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("run1()", (Object)_self));
                if (MagikObjectUtils.should_be_boolean(Invoker.bootstrapPrivate("test?", (Object)_self))) {
                    InterruptInfrastructure.checkAndProcessInterrupts();
                    throw Thrower.make(ConstantBuilder.globalAccessorBootstrap("findCell", "user", "ball"), (ResultTuple)((Object)TupleBuilder.bootstrap("tb", ConstantBuilder.stringBootstrap("string", "fail1"), ConstantBuilder.stringBootstrap("string", "fail2"))));
                }
                ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("run2()", (Object)_self));
                object = TupleBuilder.bootstrap("tb", ConstantBuilder.stringBootstrap("string", "ok1"), ConstantBuilder.stringBootstrap("string", "ok2"));
            }
            catch (Thrower.Throw throw_) {
                ResultTuple resultTuple = Thrower.checkTag(throw_, callSite);
                object = resultTuple;
            }
        }
        catch (Throwable throwable) {
            DynamicScope.destroyFrame();
            throw throwable;
        }
        DynamicScope.destroyFrame();
        Object b = ((ResultTuple)object).pop();
        Object a = ((ResultTuple)object).pop();
        ProcInvoker.naturalBootstrap("()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "show"), (Object)a, (Object)b);
        return ResultTuple.EMPTY_TUPLE;
    }
}


@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_3860
implements ExecutableMagik {
    @Debugger(value="MagikDebug")
    @CodeType(value="EmptyConstructor")
    public deco_test_3860() {
    }

    @Override
    @Debugger(value="MagikDebug")
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "test_simple_catch_throw_with_gather_result()", deco_test_3861.class, "deco_test__test_simple_catch_throw_with_gather_result", 1, 1);
    }
}
###########
_pragma(classify_level=restricted, topic={jar_decompiler})
_method deco_test.test_simple_catch_throw_with_gather_result()
	## 
	(a,b) << _catch @ball
			 _self.run1()
			 _if _self.test? _then _throw @ball _with "fail1", "fail2" _endif 
			 _self.run2()
			 >> "ok1", "ok2"
		 _endcatch
	show(a,b)
_endmethod
$
###########
