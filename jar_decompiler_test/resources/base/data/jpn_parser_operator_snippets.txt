## jpn_method_test_all_operators
@CodeType(value="Subsidiary")
public class deco_test_3468 {
    @CodeType(value="Method")
    public static Object deco_test__test_all_operators(Object _self, Object a, Object b) {
        CallSite c = BinaryDispatcher.bootstrap("+", a, b);
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("use()", (Object)_self, (Object)c));
        c = BinaryDispatcher.bootstrap("-", a, b);
        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("use()", (Object)_self, (Object)c));
        c = BinaryDispatcher.bootstrap("*", a, b);
        ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("use()", (Object)_self, (Object)c));
        c = BinaryDispatcher.bootstrap("\\s", a, b);
        ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("use()", (Object)_self, (Object)c));
        c = BinaryDispatcher.bootstrap("div", a, b);
        ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("use()", (Object)_self, (Object)c));
        c = BinaryDispatcher.bootstrap("mod", a, b);
        ResultTuple cfr_ignored_5 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("use()", (Object)_self, (Object)c));
        c = BinaryDispatcher.bootstrap("**", a, b);
        ResultTuple cfr_ignored_6 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("use()", (Object)_self, (Object)c));
        c = BinaryDispatcher.bootstrap("+", c, b);
        ResultTuple cfr_ignored_7 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("use()", (Object)_self, (Object)c));
        c = BinaryDispatcher.bootstrap("-", c, b);
        ResultTuple cfr_ignored_8 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("use()", (Object)_self, (Object)c));
        c = BinaryDispatcher.bootstrap("*", c, b);
        ResultTuple cfr_ignored_9 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("use()", (Object)_self, (Object)c));
        c = BinaryDispatcher.bootstrap("\\s", c, b);
        ResultTuple cfr_ignored_10 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("use()", (Object)_self, (Object)c));
        c = BinaryDispatcher.bootstrap("div", c, b);
        ResultTuple cfr_ignored_11 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("use()", (Object)_self, (Object)c));
        c = BinaryDispatcher.bootstrap("mod", c, b);
        ResultTuple cfr_ignored_12 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("use()", (Object)_self, (Object)c));
        c = BinaryDispatcher.bootstrap("**", c, b);
        ResultTuple cfr_ignored_13 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("use()", (Object)_self, (Object)c));
        return ResultTuple.EMPTY_TUPLE;
    }
}

@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
    MagikObjectUtils.createMethod("deco_test", "test_all_operators()", deco_test_3468.class, "deco_test__test_all_operators", 3, 3);
    }
}
###########
_method deco_test.test_all_operators(a, b) 
    _local c << (a + b)
    _self.use(c)
    c << (a - b)
    _self.use(c)
    c << (a * b)
    _self.use(c)
    c << (a / b)
    _self.use(c)
    c << (a _div b)
    _self.use(c)
    c << (a _mod b)
    _self.use(c)
    c << (a ** b)
    _self.use(c)
    c << (c + b)
    _self.use(c)
    c << (c - b)
    _self.use(c)
    c << (c * b)
    _self.use(c)
    c << (c / b)
    _self.use(c)
    c << (c _div b)
    _self.use(c)
    c << (c _mod b)
    _self.use(c)
    c << (c ** b)
    _self.use(c)
    _return _unset
_endmethod
$
###########
## jpn_method_test_compare_operators
@CodeType(value="Subsidiary")
public class deco_test_3468 {
    @CodeType(value="Method")
    public static Object deco_test__test_compare_operators(Object _self, Object a, Object b) {
        Object c = BinaryDispatcher.bootstrap("\\l", a, b);
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("use()", (Object)_self, (Object)c));
        c = BinaryDispatcher.bootstrap("\\l=", a, b);
        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("use()", (Object)_self, (Object)c));
        c = BinaryDispatcher.bootstrap("\\g", a, b);
        ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("use()", (Object)_self, (Object)c));
        c = BinaryDispatcher.bootstrap("\\g=", a, b);
        ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("use()", (Object)_self, (Object)c));
        c = BinaryDispatcher.bootstrap("=", a, b);
        ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("use()", (Object)_self, (Object)c));
        c = BinaryDispatcher.bootstrap("~=", a, b);
        ResultTuple cfr_ignored_5 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("use()", (Object)_self, (Object)c));
        c = BinaryDispatcher.bootstrap("~=", a, b);
        ResultTuple cfr_ignored_6 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("use()", (Object)_self, (Object)c));
        c = new Boolean(MagikObjectUtils.is(a, b));
        ResultTuple cfr_ignored_7 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("use()", (Object)_self, (Object)c));
        c = BinaryDispatcher.bootstrap("=", a, b);
        ResultTuple cfr_ignored_8 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("use()", (Object)_self, (Object)c));
        c = new Boolean(MagikObjectUtils.isnt(a, b));
        ResultTuple cfr_ignored_9 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("use()", (Object)_self, (Object)c));
        c = BinaryDispatcher.bootstrap("cf", a, b);
        ResultTuple cfr_ignored_10 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("use()", (Object)_self, (Object)c));
        return ResultTuple.EMPTY_TUPLE;
    }
}

@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
    MagikObjectUtils.createMethod("deco_test", "test_compare_operators()", deco_test_3468.class, "deco_test__test_compare_operators", 3, 3);
    }
}
###########
_method deco_test.test_compare_operators(a, b) 
    _local c << (a < b)
    _self.use(c)
    c << (a <= b)
    _self.use(c)
    c << (a > b)
    _self.use(c)
    c << (a >= b)
    _self.use(c)
    c << (a = b)
    _self.use(c)
    c << (a ~= b)
    _self.use(c)
    c << (a ~= b)
    _self.use(c)
    c << (a _is b)
    _self.use(c)
    c << (a = b)
    _self.use(c)
    c << (a _isnt b)
    _self.use(c)
    c << (a _cf b)
    _self.use(c)
    _return _unset
_endmethod
$
###########
## jpn_method_test_logical_operators
@CodeType(value="Subsidiary")
public class deco_test_3468 {
    @CodeType(value="Method")
    public static Object deco_test__test_logical_operators(Object _self, Object a, Object b) {
        Object c = BinaryDispatcher.bootstrap("and", a, b);
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("use()", (Object)_self, (Object)c));
        Object object = a;
        if (MagikObjectUtils.should_be_boolean(object)) {
            object = b;
        }
        c = object;
        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("use()", (Object)_self, (Object)c));
        c = BinaryDispatcher.bootstrap("or", a, b);
        ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("use()", (Object)_self, (Object)c));
        Object object2 = a;
        if (!MagikObjectUtils.should_be_boolean(object2)) {
            object2 = b;
        }
        c = object2;
        ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("use()", (Object)_self, (Object)c));
        c = BinaryDispatcher.bootstrap("xor", a, b);
        ResultTuple cfr_ignored_4 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("use()", (Object)_self, (Object)c));
        c = BinaryDispatcher.bootstrap("and", c, b);
        ResultTuple cfr_ignored_5 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("use()", (Object)_self, (Object)c));
        c = BinaryDispatcher.bootstrap("or", c, b);
        ResultTuple cfr_ignored_6 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("use()", (Object)_self, (Object)c));
        c = BinaryDispatcher.bootstrap("xor", c, b);
        ResultTuple cfr_ignored_7 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("use()", (Object)_self, (Object)c));
        return ResultTuple.EMPTY_TUPLE;
    }
}

@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
    MagikObjectUtils.createMethod("deco_test", "test_logical_operators()", deco_test_3468.class, "deco_test__test_logical_operators", 3, 3);
    }
}
###########
_method deco_test.test_logical_operators(a, b) 
     _local c << (a _and b)
    _self.use(c)
     _local object << (a _andif b)
    c << object
    _self.use(c)
    c << (a _or b)
    _self.use(c)
     _local object2 << (a _orif b)
    c << object2
    _self.use(c)
    c << (a _xor b)
    _self.use(c)
    c << (c _and b)
    _self.use(c)
    c << (c _or b)
    _self.use(c)
    c << (c _xor b)
    _self.use(c)
    _return _unset
_endmethod
$

###########
## jpn_method_test_unary_operators
@CodeType(value="Subsidiary")
public class deco_test_3468 {
    @CodeType(value="Method")
    public static Object deco_test__test_unary_operators(Object _self, Object a, Object b) {
        CallSite c = Invoker.bootstrap("not", b);
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("use()", (Object)_self, (Object)c));
        c = Invoker.bootstrap("not", b);
        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("use()", (Object)_self, (Object)c));
        return ResultTuple.EMPTY_TUPLE;
    }
}

@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
    MagikObjectUtils.createMethod("deco_test", "test_unary_operators()", deco_test_3468.class, "deco_test__test_unary_operators", 3, 3);
    }
}
###########
_method deco_test.test_unary_operators(a, b) 
    _local c << b.not
    _self.use(c)
    c << b.not
    _self.use(c)
    _return _unset
_endmethod
$
###########
## jpn_method_test_operator
@CodeType(value="Subsidiary")
public class deco_test_3468 {
    @CodeType(value="Method")
    public static Object deco_test__test_operator(Object _self, Object a, Object b) {
        CallSite c = BinaryDispatcher.bootstrap("+", a, b);
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("use()", (Object)_self, (Object)c));
        return ResultTuple.EMPTY_TUPLE;
    }
}

@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
    MagikObjectUtils.createMethod("deco_test", "test_operator()", deco_test_3468.class, "deco_test__test_operator", 3, 3);
    }
}
###########
_method deco_test.test_operator(a, b)
	_local c << (a + b)
	_self.use(c)
    _return _unset
_endmethod
$

###########
## jpn_method_test_operator_and_constant
@CodeType(value="Subsidiary")
public class deco_test_3468 {
    @CodeType(value="Method")
    public static Object deco_test__test_operator_and_constant(Object _self, Object a, Object b) {
        CallSite c = BinaryDispatcher.bootstrap("+", BinaryDispatcher.bootstrap("+", a, b), Integer.valueOf(10));
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("use()", (Object)_self, (Object)c));
        return ResultTuple.EMPTY_TUPLE;
    }
}

@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
    MagikObjectUtils.createMethod("deco_test", "test_operator_and_constant()", deco_test_3468.class, "deco_test__test_operator_and_constant", 3, 3);
    }
}
###########
_method deco_test.test_operator_and_constant(a, b)
	_local c << ((a + b) + 10)
	_self.use(c)
	_return _unset
_endmethod
$
###########
## jpn_method_test_operator_and_method
@CodeType(value="Subsidiary")
public class deco_test_3468 {
    @CodeType(value="Method")
    public static Object deco_test__test_operator_and_method(Object _self, Object a, Object b) {
        CallSite c = BinaryDispatcher.bootstrap("+", BinaryDispatcher.bootstrap("+", a, Invoker.bootstrapPrivate("value", (Object)_self)), b);
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("use()", (Object)_self, (Object)c));
        return ResultTuple.EMPTY_TUPLE;
    }
}

@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
    MagikObjectUtils.createMethod("deco_test", "test_operator_and_method()", deco_test_3468.class, "deco_test__test_operator_and_method", 3, 3);
    }
}
###########
_method deco_test.test_operator_and_method(a, b)
	_local c << ((a + _self.value) + b)
	_self.use(c)
	_return  _unset
_endmethod
$
###########
## jpn_method_test_method_operator
@CodeType(value="Subsidiary")
public class deco_test_3468 {
    @CodeType(value="Method")
    public static Object deco_test__test_method_operator(Object _self, Object a, Object b) {
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("use()", (Object)_self, (Object)BinaryDispatcher.bootstrap("+", a, b)));
        return ResultTuple.EMPTY_TUPLE;
    }
}

@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
    MagikObjectUtils.createMethod("deco_test", "test_method_operator()", deco_test_3468.class, "deco_test__test_method_operator", 3, 3);
    }
}
###########
_method deco_test.test_method_operator(a, b)
	_self.use((a + b))
	_return _unset
_endmethod
$
###########
## jpn_method_test_if_operator
@CodeType(value="Subsidiary")
public class deco_test_3468 {
    @CodeType(value="Method")
    public static Object deco_test__test_if_operator(Object _self, Object a, Object b) {
        if (MagikObjectUtils.should_be_boolean(BinaryDispatcher.bootstrap("\\g", BinaryDispatcher.bootstrap("+", a, b), Integer.valueOf(10)))) {
            ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("do_a()", (Object)_self));
        } else {
            ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("do_b()", (Object)_self));
        }
        return ResultTuple.EMPTY_TUPLE;
    }
}

@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
    MagikObjectUtils.createMethod("deco_test", "test_if_operator()", deco_test_3468.class, "deco_test__test_if_operator", 3, 3);
    }
}
###########
_method deco_test.test_if_operator(a, b) 
    _if ((a + b) > 10)
    _then
        _self.do_a()
    _else
        _self.do_b()
    _endif
    _return _unset
_endmethod
$
###########
## jpn_method_test_return_operator
@CodeType(value="Subsidiary")
public class deco_test_3468 {
    @CodeType(value="Method")
    public static Object deco_test__test_return_operator(Object _self, Object a, Object b) {
        return BinaryDispatcher.bootstrap("+", a, b);
    }
}

@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
    return TupleBuilder.bootstrap("tb", MagikObjectUtils.createMethod("deco_test", "test_return_operator()", deco_test_3468.class, "deco_test__test_return_operator", 3, 3));
    }
}
###########
_method deco_test.test_return_operator(a, b)
	_return (a + b)
_endmethod
$
###########
