## jpn_method_invocation_test_invocation(
@CodeType(value="Subsidiary")
public class deco_test_3458 {
    @CodeType(value="Method")
    public static Object deco_test__test_invocation(Object _self) {
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("do()", (Object)_self));
        return ResultTuple.EMPTY_TUPLE;
    }
}

@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "test_invocation()", deco_test_3458.class, "deco_test__test_invocation", 1, 1);
    }
}
###########
_method deco_test.test_invocation()
	_self.do()
    _return _unset
_endmethod
$

###########
## jpn_method_invocation_test_invocation_with_args(
@CodeType(value="Subsidiary")
public class deco_test_3458 {
    @CodeType(value="Method")
    public static Object deco_test__test_invocation_with_args(Object _self) {
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("do()", (Object)_self, (Object)1, (Object)ConstantBuilder.stringBootstrap("string", "str")));
        return ResultTuple.EMPTY_TUPLE;
    }
}

@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "test_invocation_with_args()", deco_test_3458.class, "deco_test__test_invocation_with_args", 1, 1);
    }
}
###########
_method deco_test.test_invocation_with_args()
	_self.do(1, "str")
    _return _unset
_endmethod
$

###########
## jpn_method_invocation_test_invocation_with_invocation
@CodeType(value="Subsidiary")
public class deco_test_3458 {
    @CodeType(value="Method")
    public static Object deco_test__test_invocation_with_invocation(Object _self) {
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("do()", (Object)_self, (Object)Invoker.bootstrapPrivate("get()", (Object)_self)));
        return ResultTuple.EMPTY_TUPLE;
    }
}

@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "test_invocation_with_invocation()", deco_test_3458.class, "deco_test__test_invocation_with_invocation", 1, 1);
    }
}
###########
_method deco_test.test_invocation_with_invocation()
	_self.do(_self.get())
    _return _unset
_endmethod
$

###########
## jpn_method_invocation_test_invocation_all_results
@CodeType(value="Subsidiary")
public class deco_test_3458 {
    @CodeType(value="Method")
    public static Object deco_test__test_invocation_all_results(Object _self) {
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("do()", (Object)_self, (Object[])((Object[])Invoker.bootstrapPrivate("for_scatter()", (Object)Invoker.bootstrapPrivate("result()", (Object)_self)))));
        return ResultTuple.EMPTY_TUPLE;
    }
}

@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "test_invocation_all_results()", deco_test_3458.class, "deco_test__test_invocation_all_results", 1, 1);
    }
}
###########
_method deco_test.test_invocation_all_results()
	_self.do((_scatter _self.result()))
    _return _unset
_endmethod
$

###########
## jpn_method_invocation_test_invocation_concatenation
@CodeType(value="Subsidiary")
public class deco_test_3458 {
    @CodeType(value="Method")
    public static Object deco_test__test_invocation_concatenation(Object _self) {
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrap("do2()", (Object)Invoker.bootstrap("do1()", Invoker.bootstrapPrivate("do()", (Object)_self))));
        return ResultTuple.EMPTY_TUPLE;
    }
}

@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "test_invocation_concatenation()", deco_test_3458.class, "deco_test__test_invocation_concatenation", 1, 1);
    }
}
###########
_method deco_test.test_invocation_concatenation()
	_self.do().do1().do2()
    _return _unset
_endmethod
$

###########
## jpn_method_invocation_test_invocation_result
@CodeType(value="Subsidiary")
public class deco_test_3458 {
    @CodeType(value="Method")
    public static Object deco_test__test_invocation_result(Object _self) {
        CallSite a = Invoker.bootstrapPrivate("do()", (Object)_self);
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("use()", (Object)_self, (Object)a));
        return ResultTuple.EMPTY_TUPLE;
    }
}

@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "test_invocation_result()", deco_test_3458.class, "deco_test__test_invocation_result", 1, 1);
    }
}
###########
_method deco_test.test_invocation_result()
	_local a << _self.do()
    	_self.use(a)
    _return _unset
_endmethod
$

###########
## jpn_method_invocation_test_multiple_invocation_results
@CodeType(value="Subsidiary")
public class deco_test_3458 {
    @CodeType(value="Method")
    public static Object deco_test__test_multiple_invocation_results(Object _self) {
        ResultTuple resultTuple = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("do()", (Object)_self));
        Object b = resultTuple.pop();
        Object a = resultTuple.pop();
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("use()", (Object)_self, (Object)a, (Object)b));
        return ResultTuple.EMPTY_TUPLE;
    }
}

@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "test_multiple_invocation_results()", deco_test_3458.class, "deco_test__test_multiple_invocation_results", 1, 1);
    }
}
###########
_method deco_test.test_multiple_invocation_results()
	 _local (a,b) << _self.do()
	_self.use(a, b)
	_return _unset
_endmethod
$

###########
## jpn_method_invocation_test_allresults_results
@CodeType(value="Subsidiary")
public class deco_test_3458 {
    @CodeType(value="Method")
    public static Object deco_test__test_allresults_results(Object _self) {
        Object[] a = ((ResultTuple)((Object)Invoker.tupleBootstrapPrivate("do()", (Object)_self))).asAllResults();
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("use()", (Object)_self, (Object)a));
        return ResultTuple.EMPTY_TUPLE;
    }
}

@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "test_allresults_results()", deco_test_3458.class, "deco_test__test_allresults_results", 1, 1);
    }
}
###########
_method deco_test.test_allresults_results()
	 _local a << _allresults _self.do()
	 _self.use(a)
    _return _unset
_endmethod
$
###########
## jpn_method_invocation_test_gather_scatter_results
@CodeType(value="Subsidiary")
public class deco_test_3458 {
    @CodeType(value="Method")
    public static Object deco_test__test_gather_scatter_results(Object _self) {
        Object[] a = ((ResultTuple)((Object)TupleBuilder.bootstrap("tb", (Object[])Invoker.bootstrapPrivate("for_scatter()", (Object)Invoker.bootstrapPrivate("do()", (Object)_self))))).remainder(0);
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("use()", (Object)_self, (Object)a));
        return ResultTuple.EMPTY_TUPLE;
    }
}

@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "test_gather_scatter_results()", deco_test_3458.class, "deco_test__test_gather_scatter_results", 1, 1);
    }
}
###########
_method deco_test.test_gather_scatter_results()
	_local (_gather a) << (_scatter _self.do())
	_self.use(a)
    _return _unset
_endmethod
$

###########
## jpn_method_invocation_test_gather_leftover_invocation
@CodeType(value="Subsidiary")
public class deco_test_3458 {
    @CodeType(value="Method")
     public static Object deco_test__test_gather_leftover_invocation(Object _self) {
        ResultTuple resultTuple = (ResultTuple)((Object)TupleBuilder.bootstrap("tb", (Object[])Invoker.bootstrapPrivate("for_scatter()", (Object)Invoker.bootstrapPrivate("do()", (Object)_self))));
        Object[] c = resultTuple.remainder(2);
        Object b = resultTuple.pop();
        Object a = resultTuple.pop();
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("use()", (Object)_self, (Object)a, (Object)b, (Object)c));
        return ResultTuple.EMPTY_TUPLE;
    }
}

@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "test_gather_leftover_invocation()", deco_test_3458.class, "deco_test__test_gather_leftover_invocation", 1, 1);
    }
}
###########
_method deco_test.test_gather_leftover_invocation()
	_local (a, b, _gather c) << (_scatter _self.do())
	_self.use(a,b,c)
	_return _unset
_endmethod
$
###########
## jpn_method_invocation_test_send_leftover_invocation
@CodeType(value="Subsidiary")
public class deco_test_3458 {
    @CodeType(value="Method")
    public static Object deco_test__test_send_leftover_invocation(Object _self) {
        ResultTuple resultTuple = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("do()", (Object)_self));
        Object[] c = resultTuple.remainder(2);
        Object b = resultTuple.pop();
        Object a = resultTuple.pop();
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("use()", (Object)_self, (Object)a, (Object)b, (Object)c));
        return ResultTuple.EMPTY_TUPLE;
    }
}

@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "test_send_leftover_invocation()", deco_test_3458.class, "deco_test__test_send_leftover_invocation", 1, 1);
    }
}
###########
_method deco_test.test_send_leftover_invocation()
	_local (a, b, _gather c) << _self.do()
	_self.use(a,b,c)
	_return _unset
_endmethod
$
###########
## jpn_method_invocation_test_gather_leftover_invocation2
@CodeType(value="Subsidiary")
public class deco_test_3458 {
    @CodeType(value="Method")
    public static Object deco_test__test_gather_leftover_invocation2(Object _self) {
        ResultTuple resultTuple = (ResultTuple)((Object)TupleBuilder.bootstrap("tb", (Object[])Invoker.bootstrapPrivate("for_scatter()", (Object)Invoker.bootstrapPrivate("do()", (Object)_self))));
        resultTuple.remainder(2);
        Object b = resultTuple.pop();
        Object a = resultTuple.pop();
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("use()", (Object)_self, (Object)a, (Object)b));
        return ResultTuple.EMPTY_TUPLE;
    }
}

@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "test_gather_leftover_invocation2()", deco_test_3458.class, "deco_test__test_gather_leftover_invocation2", 1, 1);
    }
}
########### (_gather c) got lost because c is not used
_method deco_test.test_gather_leftover_invocation2()
	_local (a, b) << (_scatter _self.do())
	_self.use(a,b)
	_return _unset
_endmethod
$
###########
## jpn_method_invocation_test_gather_leftover_invocation3
@CodeType(value="Subsidiary")
public class deco_test_3458 {
    @CodeType(value="Method")
    public static Object deco_test__test_gather_leftover_invocation3(Object _self) {
        ResultTuple resultTuple = (ResultTuple)((Object)TupleBuilder.bootstrap("tb", (Object[])Invoker.bootstrapPrivate("for_scatter()", (Object)Invoker.bootstrapPrivate("do()", (Object)_self))));
        resultTuple.remainder(2);
        resultTuple.pop();
        resultTuple.pop();
        return ResultTuple.EMPTY_TUPLE;
    }
}

@CodeType(value="Primary")
public class deco_test_3457
implements ExecutableMagik {
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "test_gather_leftover_invocation3()", deco_test_3458.class, "deco_test__test_gather_leftover_invocation3", 1, 1);
    }
}
###########  (a, b, _gather c) got lost because that are not used
_method deco_test.test_gather_leftover_invocation3()
	(_scatter _self.do())
	_return _unset
_endmethod
$
###########
## jpn_deco_test__test_variable_block
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_4066 {
    @SourceHash(value=-1651812977)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object deco_test__test_variable_block(Object _self, Object p_value) {
        CallSite a = Invoker.bootstrap("\\b]", p_value, Integer.valueOf(1));
        CallSite b = Invoker.bootstrap("\\b,]", p_value, Integer.valueOf(1), Integer.valueOf(2));
        CallSite c = Invoker.bootstrap("\\b,,]", p_value, Integer.valueOf(1), Integer.valueOf(2), Integer.valueOf(3));
        CallSite d = Invoker.bootstrap("\\b,,,]", p_value, Integer.valueOf(1), Integer.valueOf(2), Integer.valueOf(3), Integer.valueOf(4));
        ProcInvoker.naturalBootstrap("()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "show"), (Object)a, (Object)b, (Object)c, (Object)d);
        return ResultTuple.EMPTY_TUPLE;
    }
}

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_4065
implements ExecutableMagik {
    @Override
    @Debugger(value="MagikDebug")
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "test_variable_block()", deco_test_4066.class, "deco_test__test_variable_block", 2, 2);
    }
}
##########
_method deco_test.test_variable_block(p_value) 
     _local a << p_value[1]
     _local b << p_value[1, 2]
     _local c << p_value[1, 2, 3]
     _local d << p_value[1, 2, 3, 4]
    sw:show(a, b, c, d)
    _return _unset
_endmethod
$
##########
## jpn_deco_deco_test__test_variable_block_assign
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_4066 {

    @SourceHash(value=686233949)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object deco_test__test_variable_block_assign(Object _self, Object p_value) {
        Integer n = 1;
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrap("\\b]\\l\\l", (Object)p_value, (Object)n, (Object)1));
        Integer a = n;
        n = 1;
        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrap("\\b,]\\l\\l", (Object)p_value, (Object)n, (Object)1, (Object)2));
        Integer b = n;
        n = 1;
        ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrap("\\b,,]\\l\\l", (Object)p_value, (Object)n, (Object)1, (Object)2, (Object)3));
        Integer c = n;
        n = 1;
        ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrap("\\b,,,]\\l\\l", (Object)p_value, (Object)n, (Object)1, (Object)2, (Object)3, (Object)4));
        Integer d = n;
        ProcInvoker.naturalBootstrap("()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "show"), (Object)a, (Object)b, (Object)c, (Object)d);
        return ResultTuple.EMPTY_TUPLE;
    }
}

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_4065
implements ExecutableMagik {
    @Override
    @Debugger(value="MagikDebug")
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "test_variable_block_assign()", deco_test_4066.class, "deco_test__test_variable_block_assign", 2, 2);
    }
}
#########
_method deco_test.test_variable_block_assign(p_value) 
     _local n << 1
    p_value[1] << n
     _local a << n
    n << 1
    p_value[1, 2] << n
     _local b << n
    n << 1
    p_value[1, 2, 3] << n
     _local c << n
    n << 1
    p_value[1, 2, 3, 4] << n
     _local d << n
    sw:show(a, b, c, d)
    _return _unset
_endmethod
$
#########
## jpn_test_variable_block_boot_assign
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_4066 {
    @SourceHash(value=-901201198)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object deco_test__test_variable_block_boot_assign(Object _self, Object p_value) {
        CallSite a = Invoker.bootstrap("\\b]^\\l\\l", p_value, Integer.valueOf(1), Integer.valueOf(1));
        CallSite b = Invoker.bootstrap("\\b,]^\\l\\l", p_value, Integer.valueOf(1), Integer.valueOf(1), Integer.valueOf(2));
        CallSite c = Invoker.bootstrap("\\b,,]^\\l\\l", p_value, Integer.valueOf(1), Integer.valueOf(1), Integer.valueOf(2), Integer.valueOf(3));
        CallSite d = Invoker.bootstrap("\\b,,,]^\\l\\l", p_value, Integer.valueOf(1), Integer.valueOf(1), Integer.valueOf(2), Integer.valueOf(3), Integer.valueOf(4));
        ProcInvoker.naturalBootstrap("()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "show"), (Object)a, (Object)b, (Object)c, (Object)d);
        return ResultTuple.EMPTY_TUPLE;
    }
}

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_4065
implements ExecutableMagik {
    @Override
    @Debugger(value="MagikDebug")
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "test_variable_block_boot_assign()", deco_test_4066.class, "deco_test__test_variable_block_boot_assign", 2, 2);
    }
}
#################
_method deco_test.test_variable_block_boot_assign(p_value) 
     _local a << p_value[1] ^<< 1
     _local b << p_value[1, 2] ^<< 1
     _local c << p_value[1, 2, 3] ^<< 1
     _local d << p_value[1, 2, 3, 4] ^<< 1
    sw:show(a, b, c, d)
    _return _unset
_endmethod
$
#################
## jpn_test_method_block
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_4066 {

    @SourceHash(value=-1224275318)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object deco_test__test_method_block(Object _self, Object p_value) {
        CallSite a = Invoker.bootstrap("\\b]", Invoker.bootstrapPrivate("value", (Object)_self), Integer.valueOf(1));
        CallSite b = Invoker.bootstrap("\\b,]", Invoker.bootstrapPrivate("value", (Object)_self), Integer.valueOf(1), Integer.valueOf(2));
        CallSite c = Invoker.bootstrap("\\b,,]", Invoker.bootstrapPrivate("value", (Object)_self), Integer.valueOf(1), Integer.valueOf(2), Integer.valueOf(3));
        CallSite d = Invoker.bootstrap("\\b,,,]", Invoker.bootstrapPrivate("value", (Object)_self), Integer.valueOf(1), Integer.valueOf(2), Integer.valueOf(3), Integer.valueOf(4));
        ProcInvoker.naturalBootstrap("()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "show"), (Object)a, (Object)b, (Object)c, (Object)d);
        return ResultTuple.EMPTY_TUPLE;
    }
}

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_4065
implements ExecutableMagik {
    @Override
    @Debugger(value="MagikDebug")
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "test_method_block()", deco_test_4066.class, "deco_test__test_method_block", 2, 2);
    }
}
###########
_method deco_test.test_method_block(p_value) 
     _local a << _self.value[1]
     _local b << _self.value[1, 2]
     _local c << _self.value[1, 2, 3]
     _local d << _self.value[1, 2, 3, 4]
    sw:show(a, b, c, d)
    _return _unset
_endmethod
$
###########
## jpn_test_method_block_assign
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_4066 {
    @SourceHash(value=-1123928398)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object deco_test__test_method_block_assign(Object _self, Object p_value) {
        Integer n = 1;
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrap("\\b]\\l\\l", (Object)Invoker.bootstrapPrivate("value", (Object)_self), (Object)n, (Object)1));
        Integer a = n;
        n = 1;
        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrap("\\b,]\\l\\l", (Object)Invoker.bootstrapPrivate("value", (Object)_self), (Object)n, (Object)1, (Object)2));
        Integer b = n;
        n = 1;
        ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrap("\\b,,]\\l\\l", (Object)Invoker.bootstrapPrivate("value", (Object)_self), (Object)n, (Object)1, (Object)2, (Object)3));
        Integer c = n;
        n = 1;
        ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrap("\\b,,,]\\l\\l", (Object)Invoker.bootstrapPrivate("value", (Object)_self), (Object)n, (Object)1, (Object)2, (Object)3, (Object)4));
        Integer d = n;
        ProcInvoker.naturalBootstrap("()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "show"), (Object)a, (Object)b, (Object)c, (Object)d);
        return ResultTuple.EMPTY_TUPLE;
    }
}

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_4065
implements ExecutableMagik {
    @Override
    @Debugger(value="MagikDebug")
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "test_method_block_assign()", deco_test_4066.class, "deco_test__test_method_block_assign", 2, 2);
    }
}
#############
_method deco_test.test_method_block_assign(p_value) 
     _local n << 1
    _self.value[1] << n
     _local a << n
    n << 1
    _self.value[1, 2] << n
     _local b << n
    n << 1
    _self.value[1, 2, 3] << n
     _local c << n
    n << 1
    _self.value[1, 2, 3, 4] << n
     _local d << n
    sw:show(a, b, c, d)
    _return _unset
_endmethod
$
#############
## jpn_test_method_block_boot_assign
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_4066 {
    @SourceHash(value=-1686979251)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object deco_test__test_method_block_boot_assign(Object _self, Object p_value) {
        CallSite a = Invoker.bootstrap("\\b]^\\l\\l", Invoker.bootstrapPrivate("value", (Object)_self), Integer.valueOf(1), Integer.valueOf(1));
        CallSite b = Invoker.bootstrap("\\b,]^\\l\\l", Invoker.bootstrapPrivate("value", (Object)_self), Integer.valueOf(1), Integer.valueOf(1), Integer.valueOf(2));
        CallSite c = Invoker.bootstrap("\\b,,]^\\l\\l", Invoker.bootstrapPrivate("value", (Object)_self), Integer.valueOf(1), Integer.valueOf(1), Integer.valueOf(2), Integer.valueOf(3));
        CallSite d = Invoker.bootstrap("\\b,,,]^\\l\\l", Invoker.bootstrapPrivate("value", (Object)_self), Integer.valueOf(1), Integer.valueOf(1), Integer.valueOf(2), Integer.valueOf(3), Integer.valueOf(4));
        ProcInvoker.naturalBootstrap("()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "show"), (Object)a, (Object)b, (Object)c, (Object)d);
        return ResultTuple.EMPTY_TUPLE;
    }
}

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_4065
implements ExecutableMagik {
    @Override
    @Debugger(value="MagikDebug")
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "test_method_block_boot_assign()", deco_test_4066.class, "deco_test__test_method_block_boot_assign", 2, 2);
    }
}
############
_method deco_test.test_method_block_boot_assign(p_value) 
     _local a << _self.value[1] ^<< 1
     _local b << _self.value[1, 2] ^<< 1
     _local c << _self.value[1, 2, 3] ^<< 1
     _local d << _self.value[1, 2, 3, 4] ^<< 1
    sw:show(a, b, c, d)
    _return _unset
_endmethod
$
############
## jpn_test_parenthesis
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_4066 {
    @SourceHash(value=-560742231)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object deco_test__test_parenthesis(Object _self, Object p_value) {
        CallSite a = Invoker.bootstrapPrivate("value()", (Object)_self, (Object)1);
        CallSite b = Invoker.bootstrapPrivate("value()", (Object)_self, (Object)1, (Object)2);
        CallSite c = Invoker.bootstrapPrivate("value()", (Object)_self, (Object)1, (Object)2, (Object)3);
        CallSite d = Invoker.bootstrapPrivate("value()", (Object)_self, (Object)1, (Object)2, (Object)3, (Object)4);
        ProcInvoker.naturalBootstrap("()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "show"), (Object)a, (Object)b, (Object)c, (Object)d);
        return ResultTuple.EMPTY_TUPLE;
    }
}

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_4065
implements ExecutableMagik {
    @Override
    @Debugger(value="MagikDebug")
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "test_parenthesis()", deco_test_4066.class, "deco_test__test_parenthesis", 2, 2);
    }
}
#############
_method deco_test.test_parenthesis(p_value) 
     _local a << _self.value(1)
     _local b << _self.value(1, 2)
     _local c << _self.value(1, 2, 3)
     _local d << _self.value(1, 2, 3, 4)
    sw:show(a, b, c, d)
    _return _unset
_endmethod
$
#############
## jpn_test_parenthesis_assign
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_4066 {
    @SourceHash(value=-1643684465)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object deco_test__test_parenthesis_assign(Object _self, Object p_value) {
        Integer n = 1;
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("value()\\l\\l", (Object)_self, (Object)n, (Object)1));
        Integer a = n;
        n = 1;
        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("value()\\l\\l", (Object)_self, (Object)n, (Object)1, (Object)2));
        Integer b = n;
        n = 1;
        ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("value()\\l\\l", (Object)_self, (Object)n, (Object)1, (Object)2, (Object)3));
        Integer c = n;
        n = 1;
        ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("value()\\l\\l", (Object)_self, (Object)n, (Object)1, (Object)2, (Object)3, (Object)4));
        Integer d = n;
        ProcInvoker.naturalBootstrap("()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "show"), (Object)a, (Object)b, (Object)c, (Object)d);
        return ResultTuple.EMPTY_TUPLE;
    }
}

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_4065
implements ExecutableMagik {
    @Override
    @Debugger(value="MagikDebug")
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "test_parenthesis_assign()", deco_test_4066.class, "deco_test__test_parenthesis_assign", 2, 2);
    }
}
#############
_method deco_test.test_parenthesis_assign(p_value) 
     _local n << 1
    _self.value(1) << n
     _local a << n
    n << 1
    _self.value(1, 2) << n
     _local b << n
    n << 1
    _self.value(1, 2, 3) << n
     _local c << n
    n << 1
    _self.value(1, 2, 3, 4) << n
     _local d << n
    sw:show(a, b, c, d)
    _return _unset
_endmethod
$
#############
## jpn_test_parenthesis_boot_assign
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_4066 {
    @SourceHash(value=-1176523412)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object deco_test__test_parenthesis_boot_assign(Object _self, Object p_value) {
        CallSite a = Invoker.bootstrapPrivate("value()^\\l\\l", (Object)_self, (Object)1, (Object)1);
        CallSite b = Invoker.bootstrapPrivate("value()^\\l\\l", (Object)_self, (Object)1, (Object)1, (Object)2);
        CallSite c = Invoker.bootstrapPrivate("value()^\\l\\l", (Object)_self, (Object)1, (Object)1, (Object)2, (Object)3);
        CallSite d = Invoker.bootstrapPrivate("value()^\\l\\l", (Object)_self, (Object)1, (Object)1, (Object)2, (Object)3, (Object)4);
        ProcInvoker.naturalBootstrap("()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "show"), (Object)a, (Object)b, (Object)c, (Object)d);
        return ResultTuple.EMPTY_TUPLE;
    }
}

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_4065
implements ExecutableMagik {
    @Override
    @Debugger(value="MagikDebug")
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "test_parenthesis_boot_assign()", deco_test_4066.class, "deco_test__test_parenthesis_boot_assign", 2, 2);
    }
}
############
_method deco_test.test_parenthesis_boot_assign(p_value) 
     _local a << _self.value(1) ^<< 1
     _local b << _self.value(1, 2) ^<< 1
     _local c << _self.value(1, 2, 3) ^<< 1
     _local d << _self.value(1, 2, 3, 4) ^<< 1
    sw:show(a, b, c, d)
    _return _unset
_endmethod
$
############
## jpn_test_method
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_4066 {
    @SourceHash(value=-1160003010)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object deco_test__test_method(Object _self, Object p_value) {
        CallSite a = Invoker.bootstrapPrivate("value", (Object)_self);
        Integer n = 1;
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("value\\l\\l", (Object)_self, (Object)n));
        Integer b = n;
        CallSite c = Invoker.bootstrapPrivate("value^\\l\\l", (Object)_self, (Object)1);
        ProcInvoker.naturalBootstrap("()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "show"), (Object)a, (Object)b, (Object)c);
        return ResultTuple.EMPTY_TUPLE;
    }
}

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_4065
implements ExecutableMagik {
    @Override
    @Debugger(value="MagikDebug")
    @CodeType(value="TopLevel")
    public Object execute() {
        MagikObjectUtils.createMethod("deco_test", "test_method()", deco_test_4066.class, "deco_test__test_method", 2, 2);
    }
}
#################
_method deco_test.test_method(p_value) 
     _local a << _self.value
     _local n << 1
    _self.value << n
     _local b << n
     _local c << _self.value ^<< 1
    sw:show(a, b, c)
    _return _unset
_endmethod
$
#################
## jpn_test_action
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_4148 {
    @SourceHash(value=1987263502)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object deco_test__test_action(Object _self) {
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("add_action()", (Object)_self, (Object)Invoker.bootstrap("new()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sw_action"), ConstantBuilder.symbolBootstrap("symbol", "start_explorer"), ConstantBuilder.symbolBootstrap("symbol", "caption"), Invoker.bootstrapPrivate("message()", (Object)_self, (Object)ConstantBuilder.symbolBootstrap("symbol", "explorer")), ConstantBuilder.symbolBootstrap("symbol", "tooltip"), Invoker.bootstrapPrivate("message()", (Object)_self, (Object)ConstantBuilder.symbolBootstrap("symbol", "explorer_tt")), ConstantBuilder.symbolBootstrap("symbol", "short_help_text"), Invoker.bootstrapPrivate("message()", (Object)_self, (Object)ConstantBuilder.symbolBootstrap("symbol", "explorer_sh")), ConstantBuilder.symbolBootstrap("symbol", "engine"), _self, ConstantBuilder.symbolBootstrap("symbol", "image"), VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "explorer_dialog"), Invoker.bootstrapPrivate("module_name", (Object)_self)), ConstantBuilder.symbolBootstrap("symbol", "action_message"), VectorBuilder.bootstrap("vb", ConstantBuilder.symbolBootstrap("symbol", "start_explorer_view()"), Boolean.TRUE))));
	//ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("add_action()", (Object)_self, (Object)Invoker.bootstrap("new()",GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "sw_action"))));
        Object object = VectorBuilder.bootstrap("vb", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "user", "no_categories"));
        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrap("items\\l\\l", (Object)Invoker.bootstrapPrivate("action()", (Object)_self, (Object)ConstantBuilder.symbolBootstrap("symbol", "find_target")), (Object)object));
        object = GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "user", "no_categories");
        ResultTuple cfr_ignored_2 = (ResultTuple)((Object)Invoker.tupleBootstrap("value\\l\\l", (Object)Invoker.bootstrapPrivate("action()", (Object)_self, (Object)ConstantBuilder.symbolBootstrap("symbol", "find_target")), (Object)object));
        object = Boolean.FALSE;
        ResultTuple cfr_ignored_3 = (ResultTuple)((Object)Invoker.tupleBootstrap("enabled?\\l\\l", (Object)Invoker.bootstrapPrivate("action()", (Object)_self, (Object)ConstantBuilder.symbolBootstrap("symbol", "find_target")), (Object)object));
        return ResultTuple.EMPTY_TUPLE;
    }
}


@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_4147
implements ExecutableMagik {
    @Override
    @Debugger(value="MagikDebug")
    @CodeType(value="TopLevel")
    public Object execute() {
        return TupleBuilder.bootstrap("tb", MagikObjectUtils.createMethod("deco_test", "test_action()", deco_test_4148.class, "deco_test__test_action", 1, 1));
    }
}
#############
_method deco_test.test_action() 
    _self.add_action(sw:sw_action.new(:start_explorer, :caption, _self.message(:explorer), :tooltip, _self.message(:explorer_tt), :short_help_text, _self.message(:explorer_sh), :engine, _self, :image, {:explorer_dialog, _self.module_name}, :action_message, {:|start_explorer_view()|, _true}))
     _local object << {user:no_categories}
    _self.action(:find_target).items << object
    object << user:no_categories
    _self.action(:find_target).value << object
    object << _false
    _self.action(:find_target).enabled? << object
    _return _unset
_endmethod
$
#############
## jpn_test_scatter_local
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_4148 {
    @SourceHash(value=-1997737542)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object deco_test__test_scatter_local(Object _self, Object p_args) {
        Object type = ((ResultTuple)((Object)TupleBuilder.bootstrap("tb", (Object[])Invoker.bootstrapPrivate("for_scatter()", (Object)p_args)))).pop();
        ProcInvoker.naturalBootstrap("()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "show"), (Object)type);
        return ResultTuple.EMPTY_TUPLE;
    }
}

@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_4147
implements ExecutableMagik {
    @Override
    @Debugger(value="MagikDebug")
    @CodeType(value="TopLevel")
    public Object execute() {
        return TupleBuilder.bootstrap("tb", MagikObjectUtils.createMethod("deco_test", "test_scatter_local()", deco_test_4148.class, "deco_test__test_scatter_local", 2, 2));
    }
}
##############
_method deco_test.test_scatter_local(p_args) 
     _local type << ( _scatter p_args)
    sw:show(type)
    _return _unset
_endmethod
$
##############
## jpn_test_callsite
@Debugger(value="MagikDebug")
@CodeType(value="Subsidiary")
public class deco_test_4181 {
    @SourceHash(value=1034583738)
    @Debugger(value="MagikDebug")
    @CodeType(value="Method")
    public static Object deco_test__test_callsite(Object _self) {
        CallSite dt = Invoker.bootstrapPrivate("get_dt()", (Object)_self);
        ResultTuple cfr_ignored_0 = (ResultTuple)((Object)Invoker.tupleBootstrapPrivate("do()", (Object)_self, (Object)dt));
        ResultTuple cfr_ignored_1 = (ResultTuple)((Object)Invoker.tupleBootstrap("do()", (Object)dt));
        return ResultTuple.EMPTY_TUPLE;
    }
}


@Debugger(value="MagikDebug")
@CodeType(value="Primary")
public class deco_test_4180
implements ExecutableMagik {
    @Override
    @Debugger(value="MagikDebug")
    @CodeType(value="TopLevel")
    public Object execute() {
        DynamicAccessor.bootstrapStorer("!source_file!", "sw", (Object)ConstantBuilder.stringBootstrap("string", "C:\\Users\\frnkv\\source\\repos\\sw-jar-decompiler\\decompile_target\\source\\deco_test.magik"));
        DynamicAccessor.bootstrapStorer("!current_package!", "sw", (Object)ProcInvoker.bootstrap("()", GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "package"), ConstantBuilder.stringBootstrap("string", "user")));
        ProcInvoker.naturalBootstrap("()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "remex"), (Object)ConstantBuilder.symbolBootstrap("symbol", "deco_test"));
        ProcInvoker.naturalBootstrap("()", (Object)GlobalAccessor.bootstrapFetcher2("fetchGlobal2", "sw", "def_slotted_exemplar"), (Object)ConstantBuilder.symbolBootstrap("symbol", "deco_test"), (Object)VectorBuilder.EMPTY_VECTOR, (Object)ConstantBuilder.symbolBootstrap("symbol", "model"));
        return TupleBuilder.bootstrap("tb", MagikObjectUtils.createMethod("deco_test", "test_callsite()", deco_test_4181.class, "deco_test__test_callsite", 1, 1));
    }
}

############
############
