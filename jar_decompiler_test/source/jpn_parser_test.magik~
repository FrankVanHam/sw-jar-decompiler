_package user
$

#remex(:jpn_parser_test)

_pragma(classify_level=restricted, topic={jar_decompiler, test})
def_slotted_exemplar(:jpn_parser_test,
	{},
	:test_case)
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method jpn_parser_test.test_int()
	_local inp << write_string("Integer.valueOf(10)")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	_local jpn_exp << p.parse_expression()

	_local jp << deco:jpn_parser.new()
	_local dcn_node << jp.parse_expression(jpn_exp)
	_self.assert_true(dcn_node.is_class_of?(deco:dcn_constant))
	_self.assert_equals(10, dcn_node.value)

	
	_local out << internal_text_output_stream.new()
	dcn_node.decode_on(out)
	_self.assert_equals("10", out.string)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method jpn_parser_test.test_symbol()	
	_local inp << write_string("ConstantBuilder.stringBootstrap('symbol', 'user')").substitute_character(%', %")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	_local jpn_exp << p.parse_expression()

	_local jp << deco:jpn_parser.new()
	_local dcn_node << jp.parse_expression(jpn_exp)
	_self.assert_true(dcn_node.is_class_of?(deco:dcn_constant))
	_self.assert_equals(:user, dcn_node.value)
	
	_local out << internal_text_output_stream.new()
	dcn_node.decode_on(out)
	_self.assert_equals(":user", out.string)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method jpn_parser_test.test_simple_dynamic()
	_local inp << write_string("DynamicAccessor.bootstrapStorer('!a_dynamic!', 'sw', (Object)ConstantBuilder.stringBootstrap('symbol', 'a_value'))").substitute_character(%', %")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	_local jpn_exp << p.parse_statement()

	_local jp << deco:jpn_parser.new()
	_local dcn_node << jp.parse_expression(jpn_exp)
	_self.assert_true(dcn_node.is_class_of?(deco:dcn_dynamic_store))
	_self.assert_equals(:a_value, dcn_node.value_node.value)

	_local out << internal_text_output_stream.new()
	dcn_node.decode_on(out)
	_self.assert_equals("_dynamic sw:!a_dynamic! << :a_value", out.string)
_endmethod
$


_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method jpn_parser_test.test_proc_execution()
	## 
	## 
	_local inp << write_string("ProcInvoker.bootstrap('()', GlobalAccessor.bootstrapFetcher2('fetchGlobal2', 'sw', 'package'))").substitute_character(%', %")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	_local jpn_exp << p.parse_statement()

	_local jp << deco:jpn_parser.new()
	_local dcn_node << jp.parse_expression(jpn_exp)
	_self.assert_true(dcn_node.is_class_of?(deco:dcn_call))

	_local out << internal_text_output_stream.new()
	dcn_node.decode_on(out)
	_self.assert_equals("sw:package()", out.string)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method jpn_parser_test.test_proc_execution_with_one_arg()
	## 
	_local inp << write_string("ProcInvoker.bootstrap('()', ",
				   "GlobalAccessor.bootstrapFetcher2('fetchGlobal2', 'sw', 'package'), ",
				   "ConstantBuilder.stringBootstrap('symbol', 'user'));").substitute_character(%', %")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	_local jpn_exp << p.parse_statement()

	_local jp << deco:jpn_parser.new()
	_local dcn_node << jp.parse_expression(jpn_exp)
	_self.assert_true(dcn_node.is_class_of?(deco:dcn_call))
	_self.assert_equals(1, dcn_node.args.size)

	_local out << internal_text_output_stream.new()
	dcn_node.decode_on(out)
	_self.assert_equals("sw:package(:user)", out.string)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method jpn_parser_test.test_exemplar()
	## 
	_local inp << write_string("ProcInvoker.naturalBootstrap('()', ",
				   "(Object)GlobalAccessor.bootstrapFetcher2('fetchGlobal2', ",
				   "'sw', ",
				   "'def_slotted_exemplar'), ",
				   "(Object)ConstantBuilder.symbolBootstrap('symbol', 'deco_test'), ",
				   "(Object)VectorBuilder.EMPTY_VECTOR)").substitute_character(%', %")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	_local jpn_exp << p.parse_statement()

	_local jp << deco:jpn_parser.new()
	_local dcn_node << jp.parse_expression(jpn_exp)
	_self.assert_true(dcn_node.is_class_of?(deco:dcn_call))
	
	_local out << internal_text_output_stream.new()
	dcn_node.decode_on(out)
	_self.assert_equals("sw:def_slotted_exemplar(:deco_test, {})", out.string)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method jpn_parser_test.test_exemplar_and_method()
	##
	_local inp << _self.simple_test_source_code()
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	_local jpn_exp << p.parse_file()

	_local jp << deco:jpn_parser.new()
	_local dcn_node << jp.parse_file(jpn_exp)
	_self.assert_true(dcn_node.is_class_of?(deco:dcn_file))
	_self.assert_equals(1, dcn_node.methods.size)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method jpn_parser_test.test_simple_test_execution_source_code()
	##
	_local inp << _self.simple_test_execution_source_code()
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	_local jpn_exp << p.parse_file()

	_local jp << deco:jpn_parser.new()
	_local dcn_node << jp.parse_file(jpn_exp)
	
	_self.assert_true(dcn_node.is_class_of?(deco:dcn_file))
	_self.assert_equals(1, dcn_node.methods.size)
	
	_local out_indent << indentation_stream.new(out << internal_text_output_stream.new())
	dcn_node.decode_on(out_indent)
	write(out.string)

	_local goal << write_string(
			       "_package !current_package!", newline_char,
			       "$", newline_char,
			       "sw:def_slotted_exemplar(:deco_test, {})", newline_char,
			       "$", newline_char,
			       "_method deco_test", newline_char,
			       "    _return ((1) + (10))", newline_char,
			       "_endmethod", newline_char,
			       "$")
	
	_self.assert_equals_execution_strings(goal, out.string)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method jpn_parser_test.assert_equals_execution_strings(p_goal, p_given)
	##
	_local goal << p_goal.substitute_string(space_char,"").substitute_string(newline_char,"")
	_local given << p_given.substitute_string(space_char,"").substitute_string(newline_char,"")
	_if goal<>given
	_then
		_self.fail(write_string("Strings are not equal. Goal:", newline_char,
					goal, newline_char,
					"Given:", newline_char,
					given))
	_endif 
_endmethod
$


_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method jpn_parser_test.simple_test_source_code()
	_local inp << write_string(
			      "public class deco_test_34 {", newline_char,
			      "    public static Object deco_test__test(Object _self) {", newline_char,
			      "        return BinaryDispatcher.bootstrap('+', Integer.valueOf(10), Integer.valueOf(1));", newline_char,
			      "    }", newline_char,
			      "}", newline_char )
	inp << inp.substitute_character(%', %")
	>> inp
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method jpn_parser_test.simple_test_execution_source_code()
	_local inp << write_string( 
			      "public class deco_test_34 {", newline_char,
			      "    public static Object deco_test__test(Object _self) {", newline_char,
			      "        return BinaryDispatcher.bootstrap('+', Integer.valueOf(10), Integer.valueOf(1));", newline_char,
			      "    }", newline_char,
			      "}", newline_char,
			      "public class deco_test_33", newline_char,
			      "implements ExecutableMagik {", newline_char,
			      "    @Override", newline_char,
			      "    public Object execute() {", newline_char,
			      "        DynamicAccessor.bootstrapStorer('!current_package!', 'sw', (Object)ProcInvoker.bootstrap('()', GlobalAccessor.bootstrapFetcher2('fetchGlobal2', 'sw', 'package'), ConstantBuilder.stringBootstrap('symbol', 'user')));", newline_char,
			      "        ProcInvoker.naturalBootstrap('()', (Object)GlobalAccessor.bootstrapFetcher2('fetchGlobal2', 'sw', 'def_slotted_exemplar'), (Object)ConstantBuilder.symbolBootstrap('symbol', 'deco_test'), (Object)VectorBuilder.EMPTY_VECTOR);", newline_char,
			      "        return TupleBuilder.bootstrap('tb', MagikObjectUtils.createMethod('deco_test', 'test()', deco_test_34.class, 'deco_test__test', 1, 1));", newline_char,
			      "    }", newline_char,
			      "}", newline_char )
	inp << inp.substitute_character(%', %")
	>> inp
_endmethod
$
