_package user
$

#remex(:deco_snippet)

_pragma(classify_level=restricted, topic={jar_decompiler})
def_slotted_exemplar(:deco_snippet,
	{
		{:cache, _unset}
	})
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method deco_snippet.get_snippet(p_name)
	>> _self.ensure_cache[p_name]
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method deco_snippet.reset()
	.cache << _unset 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method deco_snippet.ensure_cache
	_if .cache _is _unset
	_then
		.cache << _self.create_cache()
	_endif
	>> .cache
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method deco_snippet.create_cache()
	##
	_local hash << equality_hash_table.new()
	_local f << sw:smallworld_product.get_data_file("snippets.txt", _self.module_name)
	_local in << external_text_input_stream.new(f)
	_protect
		_loop
			_local (name, text) << _self.read_snippet(in)
			_if name _is _unset _then _leave _endif
			hash[name] << text
		_endloop 
	_protection
		in.close()
	_endprotect
	>> hash
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method deco_snippet.read_snippet(p_stream)
	_local name << _unset 
	_local out << internal_text_output_stream.new()
	_loop
		_local str << p_stream.get_line()
		
		_if str _is _unset _then _leave _endif
		_if str.matches?("##*")
		_then
			_if name _is _unset
			_then
				name << str.slice_to_end(3).trim_spaces().as_symbol()
			_else
				_leave
			_endif
		_else
			out.write(str)
			out.newline()
		_endif
	_endloop
	>> name, out.string
_endmethod
$
