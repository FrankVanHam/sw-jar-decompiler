_package user
$

#remex(:jpn_parser_test)

_pragma(classify_level=restricted, topic={jar_decompiler, test})
def_slotted_exemplar(:jpn_parser_test,
	{},
	:test_case)
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method jpn_parser_test.test_int()
	_local inp << write_string("Integer.valueOf(10)")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	_local jpn_exp << p.parse_expression()
	_self.assert_true(jpn_exp.is_class_of?(deco:jpn_method_invocation))
	_self.assert_true(jpn_exp.sender.is_class_of?(deco:jpn_type), "should be type")
	
	_local jp << deco:jpn_parser.new()
	_local dcn_node << jp.parse_expression(jpn_exp)
	_self.assert_true(dcn_node.is_class_of?(deco:dcn_constant))
	_self.assert_equals("10" , dcn_node.string_value)


	_local out << internal_text_output_stream.new()
	dcn_node.decode_on(out)
	_self.assert_equals("10", out.string)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method jpn_parser_test.test_symbol()
	_local inp << write_string("ConstantBuilder.stringBootstrap('symbol', 'user')").substitute_character(%', %")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	_local jpn_exp << p.parse_expression()

	_local jp << deco:jpn_parser.new()
	_local dcn_node << jp.parse_expression(jpn_exp)
	_self.assert_true(dcn_node.is_class_of?(deco:dcn_constant))
	_self.assert_equals("user", dcn_node.string_value)

	_local out << internal_text_output_stream.new()
	dcn_node.decode_on(out)
	_self.assert_equals(":user", out.string)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method jpn_parser_test.test_simple_dynamic()
	_local inp << write_string("DynamicAccessor.bootstrapStorer('!a_dynamic!', 'sw', (Object)ConstantBuilder.stringBootstrap('symbol', 'a_value'))").substitute_character(%', %")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	_local jpn_exp << p.parse_statement()

	_local jp << deco:jpn_parser.new()
	_local dcn_node << jp.parse_expression(jpn_exp)
	_self.assert_true(dcn_node.is_dynamic_store?)
	_self.assert_equals("a_value", dcn_node.value_node.string_value)

	_local out << internal_text_output_stream.new()
	dcn_node.decode_on(out)
	_self.assert_equals("_dynamic sw:!a_dynamic! << :a_value", out.string)
_endmethod
$


_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method jpn_parser_test.test_proc_execution()
	##
	_local inp << write_string("ProcInvoker.bootstrap('()', GlobalAccessor.bootstrapFetcher2('fetchGlobal2', 'sw', 'package'))").substitute_character(%', %")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	_local jpn_exp << p.parse_statement()

	_local jp << deco:jpn_parser.new()
	_local dcn_node << jp.parse_expression(jpn_exp)
	_self.assert_true(dcn_node.is_class_of?(deco:dcn_call))

	_local out << internal_text_output_stream.new()
	dcn_node.decode_on(out)
	_self.assert_equals("sw:package()", out.string)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method jpn_parser_test.test_proc_execution_with_one_arg()
	##
	_local inp << write_string("ProcInvoker.bootstrap('()', ",
				   "GlobalAccessor.bootstrapFetcher2('fetchGlobal2', 'sw', 'package'), ",
				   "ConstantBuilder.stringBootstrap('symbol', 'user'));").substitute_character(%', %")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	_local jpn_exp << p.parse_statement()

	_local jp << deco:jpn_parser.new()
	_local dcn_node << jp.parse_expression(jpn_exp)
	_self.assert_true(dcn_node.is_class_of?(deco:dcn_call))
	_self.assert_equals(1, dcn_node.args.size)

	_local out << internal_text_output_stream.new()
	dcn_node.decode_on(out)
	_self.assert_equals("sw:package(:user)", out.string)
_endmethod
$


_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method jpn_parser_test.test_return_empty_tuple()
	##
	_local inp << write_string("return ResultTuple.EMPTY_TUPLE;")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	_local jpn_exp << p.parse_statement()

	_local jp << deco:jpn_parser.new()
	_local dcn_node << jp.parse_statement(jpn_exp)
	_self.assert_true(dcn_node.is_class_of?(deco:dcn_return), "should be return")
	_self.assert_true(dcn_node.expression.is_class_of?(deco:dcn_constant), "return value should be unset")

	_local out << internal_text_output_stream.new()
	dcn_node.decode_on(out)
	_self.assert_equals("_return _unset", out.string.trim_spaces())
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method jpn_parser_test.test_integer_declare()
	##
	_local inp << write_string("Integer var = 1;")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	_local jpn_exp << p.parse_statement()

	_local jp << deco:jpn_parser.new()
	_local dcn_node << jp.parse_expression(jpn_exp)
	_self.assert_true(dcn_node.is_class_of?(deco:dcn_local_assignment), "should be local assignment")
	_self.assert_true(dcn_node.only_local() _isnt _unset, "should be one local")
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method jpn_parser_test.test_declare_local()
	##
	_local inp << write_string("CallSite a;")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	_local jpn_exp << p.parse_statement()

	_local jp << deco:jpn_parser.new()
	_local dcn_node << jp.parse_statement(jpn_exp)
	_self.assert_true(dcn_node.is_class_of?(deco:dcn_local_declaration), "should be local declaration")

	_local out << internal_text_output_stream.new()
	dcn_node.decode_on(out)
	_self.assert_equals("_local a", out.string.trim_spaces())
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method jpn_parser_test.test_declare_local_assign()
	##
	_local inp << write_string("CallSite a = 10;")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	_local jpn_exp << p.parse_statement()
	_self.assert_true(jpn_exp.is_class_of?(deco:jpn_assignment), "should be assignment")
	_self.assert_true(jpn_exp.left.is_declaration?, "should be an declaration")
			
	_local jp << deco:jpn_parser.new()
	_local dcn_node << jp.parse_expression(jpn_exp)
	_self.assert_true(dcn_node.is_class_of?(deco:dcn_local_assignment), "should be assignment")
	_self.assert_true(dcn_node.only_local().is_class_of?(deco:dcn_local_declaration), "should be local declaration")

	_local out << internal_text_output_stream.new()
	dcn_node.decode_on(out)
	_self.assert_equals("_local a << 10", out.string.trim_spaces())
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method jpn_parser_test.test_declare_local_array_assign()
	##
	_local inp << write_string("Object[] a = 10;")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	_local jpn_exp << p.parse_statement()
	_self.assert_true(jpn_exp.is_class_of?(deco:jpn_assignment), "should be assignment")
	_self.assert_true(jpn_exp.left.is_declaration?, "should be an declaration")
			
	_local jp << deco:jpn_parser.new()
	_local dcn_node << jp.parse_expression(jpn_exp)
	_self.assert_true(dcn_node.is_class_of?(deco:dcn_local_assignment), "should be assignment")
	_self.assert_true(dcn_node.only_local().is_class_of?(deco:dcn_local_declaration), "should be local declaration")

	_local out << internal_text_output_stream.new()
	dcn_node.decode_on(out)
	_self.assert_equals("_local a << 10", out.string.trim_spaces())
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method jpn_parser_test.test_declare_local_boolean_assign()
	##
	_local inp << write_string("boolean bl = MagikObjectUtils.is(1,2)")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	_local jpn_exp << p.parse_statement()
	_self.assert_true(jpn_exp.is_class_of?(deco:jpn_assignment), "should be assignment")
	_self.assert_true(jpn_exp.left.is_declaration?, "should be an declaration")
			
	_local jp << deco:jpn_parser.new()
	_local dcn_node << jp.parse_expression(jpn_exp)
	_self.assert_true(dcn_node.is_class_of?(deco:dcn_local_assignment), "should be assignment")
	_self.assert_true(dcn_node.only_local().is_class_of?(deco:dcn_local_declaration), "should be local declaration")
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method jpn_parser_test.test_alternative_vector_declaration()
	##
	_local inp << write_string("x = (Object)new Object[]{ConstantBuilder.symbolBootstrap('symbol', 'select_world()'), ConstantBuilder.symbolBootstrap('symbol', 'select_world_by_name()')}").substitute_character(%', %")
	
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	p.define_locals("x")
	_local jpn_exp << p.parse_statement()
	_self.assert_true(jpn_exp.is_class_of?(deco:jpn_assignment), "should be assignment")
	_self.assert_true(jpn_exp.right.expression.is_class_of?(deco:jpn_new), "new")
	
	_local jp << deco:jpn_parser.new()
	_local dcn_node << jp.parse_expression(jpn_exp)
	_self.assert_true(dcn_node.expression.is_class_of?(deco:dcn_vector), "Set a vector")
_endmethod
$

