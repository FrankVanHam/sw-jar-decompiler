_package user
$

#remex(:jpn_parser_test)

_pragma(classify_level=restricted, topic={jar_decompiler, test})
def_slotted_exemplar(:jpn_parser_test,
	{},
	:test_case)
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method jpn_parser_test.test_int()
	_local inp << write_string("Integer.valueOf(10)")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	_local jpn_exp << p.parse_expression()

	_local jp << deco:jpn_parser.new()
	_local dcn_node << jp.parse_expression(jpn_exp)
	_self.assert_true(dcn_node.is_class_of?(deco:dcn_constant))
	_self.assert_equals(10, dcn_node.value)

	
	_local out << internal_text_output_stream.new()
	dcn_node.decode_on(out)
	_self.assert_equals("10", out.string)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method jpn_parser_test.test_symbol()	
	_local inp << write_string("ConstantBuilder.stringBootstrap('symbol', 'user')").substitute_character(%', %")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	_local jpn_exp << p.parse_expression()

	_local jp << deco:jpn_parser.new()
	_local dcn_node << jp.parse_expression(jpn_exp)
	_self.assert_true(dcn_node.is_class_of?(deco:dcn_constant))
	_self.assert_equals(:user, dcn_node.value)
	
	_local out << internal_text_output_stream.new()
	dcn_node.decode_on(out)
	_self.assert_equals(":user", out.string)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method jpn_parser_test.test_simple_dynamic()
	_local inp << write_string("DynamicAccessor.bootstrapStorer('!a_dynamic!', 'sw', (Object)ConstantBuilder.stringBootstrap('symbol', 'a_value'))").substitute_character(%', %")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	_local jpn_exp << p.parse_statement()

	_local jp << deco:jpn_parser.new()
	_local dcn_node << jp.parse_expression(jpn_exp)
	_self.assert_true(dcn_node.is_class_of?(deco:dcn_dynamic_store))
	_self.assert_equals(:a_value, dcn_node.value_node.value)

	_local out << internal_text_output_stream.new()
	dcn_node.decode_on(out)
	_self.assert_equals("_dynamic sw:!a_dynamic! << :a_value", out.string)
_endmethod
$


_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method jpn_parser_test.test_proc_execution()
	## 
	## 
	_local inp << write_string("ProcInvoker.bootstrap('()', GlobalAccessor.bootstrapFetcher2('fetchGlobal2', 'sw', 'package'))").substitute_character(%', %")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	_local jpn_exp << p.parse_statement()

	_local jp << deco:jpn_parser.new()
	_local dcn_node << jp.parse_expression(jpn_exp)
	_self.assert_true(dcn_node.is_class_of?(deco:dcn_call))

	_local out << internal_text_output_stream.new()
	dcn_node.decode_on(out)
	_self.assert_equals("sw:package()", out.string)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler, test})
_method jpn_parser_test.test_proc_execution_with_one_arg()
	## 
	_local inp << write_string("ProcInvoker.bootstrap('()', ",
				   "GlobalAccessor.bootstrapFetcher2('fetchGlobal2', 'sw', 'package'), ",
				   "ConstantBuilder.stringBootstrap('symbol', 'user'));").substitute_character(%', %")
	_local s << deco:lexical_scanner.new(inp.read_stream())
	_local p << deco:java_parser.new(s)
	_local jpn_exp << p.parse_statement()

	_local jp << deco:jpn_parser.new()
	_local dcn_node << jp.parse_expression(jpn_exp)
	_self.assert_true(dcn_node.is_class_of?(deco:dcn_call))
	_self.assert_equals(1, dcn_node.args.size)

	_local out << internal_text_output_stream.new()
	dcn_node.decode_on(out)
	_self.assert_equals("sw:package(:user)", out.string)
_endmethod
$
