_package user
$

#remex(:deco_snippet)

_pragma(classify_level=restricted, topic={jar_decompiler})
def_slotted_exemplar(:deco_snippet,
	{
		{:filename, _unset},
		{:data, _unset}
	})
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method deco_snippet.new(p_name)
	>> _clone.init(p_name)
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_private _method deco_snippet.init(p_name)
	.filename << p_name
	>> _self 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_iter _method deco_snippet.snippets()
	_self.build_data()
	_for i_name, i_vec _over .data.fast_keys_and_elements()
	_loop
		_loopbody(i_name, _scatter i_vec)
	_endloop 
_endmethod
$
_pragma(classify_level=restricted, topic={jar_decompiler})
_method deco_snippet.build_data()
	##
	_local hash << equality_hash_table.new()
	_local f << sw:smallworld_product.get_data_file(.filename, _self.module_name)
	_local in << external_text_input_stream.new(f)
	_protect
		_loop
			_local (name, str1, str2) << _self.read_snippet(in)
			_if name _is _unset _then _leave _endif
			hash[name] << {str1,str2}
		_endloop 
	_protection
		in.close()
	_endprotect
	.data << hash
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_method deco_snippet.read_snippet(p_stream)
	_local str1 << str2 << _unset 
	_local name << _self.find_title(p_stream)
	_if name _isnt _unset
	_then
		str1 << _self.find_part(p_stream)
		str2 << _self.find_part(p_stream)
	_endif
	>> name, str1, str2
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_private _method deco_snippet.find_title(p_stream)
	##
	_local name << _unset 
	_loop
		_local str << p_stream.get_line()
		
		_if str _is _unset _then _leave _endif
		_if str.matches?("## *")
		_then
			name << str.slice_to_end(4).trim_spaces().as_symbol()
			_leave 
		_endif
	_endloop 
	>> name 
_endmethod
$

_pragma(classify_level=restricted, topic={jar_decompiler})
_private _method deco_snippet.find_part(p_stream)
	##
	_local out << internal_text_output_stream.new()
	_loop
		_local str << p_stream.get_line()
		
		_if str _is _unset _then _leave _endif
		_if str.matches?("####*")
		_then
			_leave
		_else
			out.write(str)
			out.newline()
		_endif
	_endloop
	>> out.string
_endmethod
$
